#include <iostream>
#include <ctime>
#include <vector>
#include <list>
#include <queue>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <cassert>
#include <utility>
#include <sstream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <climits>
#include <iterator>
#include <fstream>
using namespace std;

typedef long long 		int64;
typedef vector<int> 		vi;
typedef string 			ST;
typedef stringstream 		SS;
typedef vector< vector<int> > 	vvi;
typedef pair<int,int> 		ii;
typedef vector<string> 		vs;
/*
#if __cplusplus > 199711L	// for g++0x, value of __cplusplus must be greater thana 199711L.
	#define tr(i, c)	for(auto i = begin(c); i != end(c); i++)
#else
	#define tr(i, c)	for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#endif
*/
#define endl		("\n")
#define tr(i, c)	for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define PI		M_PI
#define E 		M_E
#define	eps		1e-9

#define	Sf		scanf
#define	Pf		printf

#define forn(i, n)	for(int i = 0, lets_stop_here = (int)n; i <  lets_stop_here; i++)
#define forab(i, a, b)	for(int i = a, lets_stop_here = (int)b; i <= lets_stop_here; i++)
#define rep(i, a, b)	for(int i = a, lets_stop_here = (int)b; i >= lets_stop_here; i--)

#define	all(c)		(c).begin(), (c).end()
#define	cl(a, b)	memset(a, b, sizeof(a))
#define mp		make_pair
#define pb		push_back

#define	present(x, c)	((c).find(x) != (c).end())	//map & set//
#define	cpresent(x, c)	(find( (c).begin(), (c).end(), x) != (c).end())	//vector & list//

#define read(n)		scanf("%d", &n)
#define write(n)	printf("%d ", n)
#define writeln(n)	printf("%d\n", n)

//#define debug(x)
#define debug(x)	cout << #x << " = " << x << "\n"

class AirTravel
{
public:
	double shortestTrip(vector <int> latitude, vector <int> longitude, vector <string> canTravel, int origin, int destination);
};

double distance(int lat1, int lon1, int lat2, int lon2) {
	double lt1 = M_PI/180.0*lat1, ln1 = M_PI/180.0*lon1;
	double lt2 = M_PI/180.0*lat2, ln2 = M_PI/180.0*lon2;
	
	return 4000.0 * acos(sin(lt1)*sin(lt2) + cos(lt1)*cos(lt2)*cos(ln1-ln2));
}

double AirTravel::shortestTrip (vector <int> latitude, vector <int> longitude, vector <string> canTravel, int origin, int destination) 
{
	int N = latitude.size();
	vector < vector <double> > dist(N, vector <double> (N, 1e50));

	for(int u = 0; u < canTravel.size(); ++u) {
		istringstream ss(canTravel[u]);
		int v;
		while(ss >> v) 
			dist[u][v] = distance(latitude[u], longitude[u], latitude[v], longitude[v]);
	}
	for(int u = 0; u < N; ++u) 
		dist[u][u] = 0.0;
	for(int k = 0; k < N; ++k) {
		for(int i = 0; i < N; ++i) {
			for(int j = 0; j < N; ++j) {
				dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]);
			}
		}
	}

	return dist[origin][destination] > 1e49 ? -1.0 : dist[origin][destination];
/*
	vector < double > dist(N, -1.0);
	vector < vector <int> > G(N);

	for(int i = 0; i < canTravel.size(); ++i) {
		istringstream ss(canTravel[i]);
		int v;
		while(ss >> v) 
			G[i].push_back(v);
	}

	priority_queue < pair <double, int>, vector <pair <double, int> >, greater<pair <double, int> > > pq;
	pq.push(make_pair(0.0, origin));

	while(!pq.empty()) {
		pair < double, int > nd = pq.top();
		pq.pop();
		int u = nd.second;
		double d = nd.first;

		if(dist[u] > -0.5)
			continue;
		dist[u] = d;
		
		for(int i = 0; i < G[u].size(); ++i) {
			int v = G[u][i];
			if(dist[v] > -0.5)
				continue;
			double curDist = d + distance(latitude[u], longitude[u], latitude[v], longitude[v]);
			pq.push(make_pair(curDist, v));
		}
	}
	
	return dist[destination];
*/

}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, vector <string> p2, int p3, int p4, bool hasAnswer, double p5) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p2[i] << "\"";
	}
	cout << "}" << "," << p3 << "," << p4;
	cout << "]" << endl;
	AirTravel *obj;
	double answer;
	obj = new AirTravel();
	clock_t startTime = clock();
	answer = obj->shortestTrip(p0, p1, p2, p3, p4);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p5 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == answer && fabs(p5 - answer) <= 1e-9 * max(1.0, fabs(p5));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <int> p1;
	vector <string> p2;
	int p3;
	int p4;
	double p5;
	
	{
	// ----- test 0 -----
	int t0[] = {0,0,70};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {90,0,45};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"2","0 2","0 1"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 0;
	p4 = 1;
	p5 = 10612.237799994255;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {0,0,70};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {90,0,45};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"1 2","0 2","0 1"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 0;
	p4 = 1;
	p5 = 6283.185307179586;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {0,30,60};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {25,-130,78};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"1 2","0 2","1 2"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 0;
	p4 = 0;
	p5 = 0.0;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {0,20,55};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {-20,85,42};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"1","0","0"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 0;
	p4 = 2;
	p5 = -1.0;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// You are working for a shipping company, TopShipper, that specializes in shipping products by air. Your cargo jets transport items between a set of airports. From each airport, you can travel directly to some subset of the other airports. (Some airports may be too far, or may not have a safe passageway.)  The ability to travel from one airport to another does not guarantee the ability to travel directly in the opposite direction.
// 
// You are about to send out a cargo plane on a trip to pick up a large shipment of a certain product. Unfortunately, only one other airport has this product for pickup, and you aren't guaranteed that there is a safe, direct route to the other airport.  You may have to travel through one or more other airports to get to your final destination.  Nonetheless, you wish to ultimately end up at the airport that has your desired product, and which you can get to by travelling the shortest possible distance.
// 
// You are to return a double indicating the number of miles travelled by the cargo plane along the optimal route from the origin to the destination.  If no such route exists, return -1.
// 
// Given two coordinates, (lat1, lon1) and (lat2, lon2), the shortest distance between them is across an arc known as a great circle.  The arclength along a great circle, between two points on the earth can be calculated as:
// radius * acos(sin(lat1) * sin(lat2) + cos(lat1) * cos(lat2) * cos(lon1 - lon2))
// 
// For purposes of this problem, the radius of the earth is 4000 miles.
// 
// You are given the latitude and longitude coordinates of each airport in latitude and longitude.  The i-th element of latitude corresponds to the i-th element of longitude.  You are also given vector <string> canTravel.  The i-th element of canTravel is a space-delimited list of the 0-based indices of the airports that can be reached from airport i.  Finally, you are given origin and destination, the indices of the airports at which you start and end your trip.
// 
// DEFINITION
// Class:AirTravel
// Method:shortestTrip
// Parameters:vector <int>, vector <int>, vector <string>, int, int
// Returns:double
// Method signature:double shortestTrip(vector <int> latitude, vector <int> longitude, vector <string> canTravel, int origin, int destination)
// 
// 
// CONSTRAINTS
// -latitude, longitude, and canTravel will contain between 1 and 20 elements, inclusive.
// -latitude, longitude, and canTravel will each contain the same number of elements.
// -Each element of latitude will be between -89 and 89, inclusive.
// -Each element of longitude will be between -179 and 179, inclusive.
// -Each element of canTravel will be a space-delimited list of integers, with no leading zeroes.
// -Each integer represented in each element of canTravel will be between 0 and n - 1, where n is the number of elements in latitude.
// -origin and destination will be between 0 and n - 1, inclusive, where n is the number of elements in latitude.
// -No two airports will reside at the same latitude and longitude.
// 
// 
// EXAMPLES
// 
// 0)
// {0, 0, 70}
// {90, 0, 45}
// {"2", "0 2", "0 1"}
// 0
// 1
// 
// Returns: 10612.237799994255
// 
// Here, we are looking to travel from airport 0 to airport 1.
// 
// Using the given formula, we calculate that the distance from 0 to 1 is 6283, from 0 to 2 is 5306, and from 1 to 2 is 5306.
// 
// A direct route from airport 0 to 1 would be fastest, if such a route were allowed.  Since it is not, we have to travel through airport 2.
// 
// 1)
// {0, 0, 70}
// {90, 0, 45}
// {"1 2", "0 2", "0 1"}
// 0
// 1
// 
// Returns: 6283.185307179586
// 
// Here, we have the same three airports, and there is a safe route between any two.  Thus, we take the direct route, which is quickest.
// 
// 2)
// {0, 30, 60}
// {25, -130, 78}
// {"1 2", "0 2", "1 2"}
// 0
// 0
// 
// Returns: 0.0
// 
// We are free to travel as we wish, but since our destination is the same as our point of origin, we don't have much travel to do.
// 
// 3)
// {0, 20, 55}
// {-20, 85, 42}
// {"1", "0", "0"}
// 0
// 2
// 
// Returns: -1.0
// 
// Notice here that we could go from airport 2 to airport 0, but not from 0 to 2.  Given the available routes, there is no way we can get from airport 0 to airport 2.
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

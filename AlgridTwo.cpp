#include <iostream>
#include <ctime>
#include <vector>
#include <list>
#include <queue>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <cassert>
#include <utility>
#include <sstream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <climits>
#include <iterator>
#include <fstream>
using namespace std;

typedef long long 		int64;
typedef vector<int> 		vi;
typedef string 			ST;
typedef stringstream 		SS;
typedef vector< vector<int> > 	vvi;
typedef pair<int,int> 		ii;
typedef vector<string> 		vs;
/*
#if __cplusplus > 199711L	// for g++0x, value of __cplusplus must be greater thana 199711L.
	#define tr(i, c)	for(auto i = begin(c); i != end(c); i++)
#else
	#define tr(i, c)	for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#endif
*/
#define endl		("\n")
#define tr(i, c)	for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define PI		M_PI
#define E 		M_E
#define	eps		1e-9

#define	Sf		scanf
#define	Pf		printf

#define forn(i, n)	for(int i = 0, lets_stop_here = (int)n; i <  lets_stop_here; i++)
#define forab(i, a, b)	for(int i = a, lets_stop_here = (int)b; i <= lets_stop_here; i++)
#define rep(i, a, b)	for(int i = a, lets_stop_here = (int)b; i >= lets_stop_here; i--)

#define	all(c)		(c).begin(), (c).end()
#define	CL(a, b)	memset(a, b, sizeof(a))
#define mp		make_pair
#define pb		push_back

#define	present(x, c)	((c).find(x) != (c).end())	//map & set//
#define	cpresent(x, c)	(find( (c).begin(), (c).end(), x) != (c).end())	//vector & list//

#define read(n)		scanf("%d", &n)
#define write(n)	printf("%d ", n)
#define writeln(n)	printf("%d\n", n)

#if (0 or defined ONLINE_JUDGE)
	#define DEBUG
#else 
	#define DEBUG(x)	cout << #x << " = " << x << "\n"
#endif

class AlgridTwo
{
public:
	int makeProgram(vector <string> output);
};

int AlgridTwo::makeProgram (vector <string> output) 
{
	int ret;
	
	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	AlgridTwo *obj;
	int answer;
	obj = new AlgridTwo();
	clock_t startTime = clock();
	answer = obj->makeProgram(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"BB","WB"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"BBWBBB","WBWBBW"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 8;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"BWBWBW","WWWWWW","WBBWBW"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"WWBWBWBWBWBWBWBW","BWBWBWBWBWBWBWBB","BWBWBWBWBWBWBWBW"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 73741817;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Algrid2 is a program that uses a single grid with cells colored white or black as input and returns a new one as output. The grid has H rows and W columns. The topmost row is row 0, the bottommost row is row H-1, the leftmost column is column 0 and the rightmost column is column W-1. The cell at row i, column j can be denoted as (i,j). The program works by evaluating pairs of contiguous cells and making decisions depending on their contents. The following pseudo-code describes how the program works:
// 
// 
// For i = 0 to H-2:
//     For j = 0 to W-2:
//         //Get the current colors of cells (i,j) and (i,j+1)
//         A = Color(i,j) , B = Color(i,j+1)
// 
//         If (A,B) == (White, White) Then:
//              Do nothing.
//         EndIf
//         If (A,B) == (Black, White) Then: 
//              Repaint cells (i+1,j) and (i+1,j+1) Black.
//         EndIf
//         If (A,B) == (White, Black) Then:
//              Repaint cells (i+1,j) and (i+1,j+1) White.
//         EndIf
//         if (A,B) == (Black, Black) Then:
//              Swap the colors in cells (i+1,j) and (i+1,j+1).
//         EndIf
//     EndFor
// EndFor
// 
// 
// You will be given a possible output for the program as a vector <string> output. The j-th character in the i-th element of output represents the color of cell (i,j) where 'W' represents white and 'B' represents black. Count the total number of input grids that can generate this output. Two input grids are different if there is at least one cell in which the colors are different. Since the result may be very large, return it modulo 1000000007.
// 
// DEFINITION
// Class:AlgridTwo
// Method:makeProgram
// Parameters:vector <string>
// Returns:int
// Method signature:int makeProgram(vector <string> output)
// 
// 
// CONSTRAINTS
// -output will contain between 2 and 50 elements, inclusive.
// -Each element of output will contain between 2 and 50 characters, inclusive.
// -All elements of output will have the same length.
// -Each element of output will only contain 'W' or 'B' characters.
// 
// 
// EXAMPLES
// 
// 0)
// {"BB",
//  "WB"}
// 
// Returns: 1
// 
// The only way to generate that output following the rules described is:
// 
// BB
// BW
// 
// 
// 1)
// {"BBWBBB",
//  "WBWBBW"}
// 
// Returns: 8
// 
// There are 8 ways in total:
// 
// BBWBBB BBWBBB BBWBBB BBWBBB
// BWWWBB WWWBBB BWBBBB WWWWBB
// 
// BBWBBB BBWBBB BBWBBB BBWBBB
// WWBBBB BWBWBB WWBWBB BWWBBB
// 
// 
// 
// 2)
// {"BWBWBW",
//  "WWWWWW",
//  "WBBWBW"}
// 
// Returns: 0
// 
// 
// 
// 3)
// {"WWBWBWBWBWBWBWBW",
//  "BWBWBWBWBWBWBWBB",
//  "BWBWBWBWBWBWBWBW"}
// 
// Returns: 73741817
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef string ST;
typedef stringstream SS;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef vector <string> vs;

#define endl 		("\n")
#define DEBUG(x)	cout << #x << " = " << x << "\n"
#define Pf		printf
#define	Sf		scanf

#define	ep		1e-9
#define PI		M_PI
#define E 		M_E

#define	CL(a, b)	memset(a, b, sizeof(a))
#define	mp		make_pair
#define	pb		push_back

#define	all(c)		(c).begin(), (c).end()
#define	tr(i, c)	for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())		//vector & list//

#define forn(i, n)	for(int i = 0, loop_ends_here = (int)n; i < loop_ends_here ; i++)
#define forab(i, a, b)	for(int i = a, loop_ends_here = (int)b; i <= loop_ends_here; i++)
#define rep(i, a, b)	for(int i = a, loop_ends_here = (int)b; i >= loop_ends_here; i--)

#define read(n)		scanf("%d", &n)
#define write(n)	printf("%d ", n)
#define writeln(n)	printf("%d\n", n)

class AlternateColors
{
public:
	string getColor(long long r, long long g, long long b, long long k);
};


string AlternateColors::getColor (long long r, long long g, long long b, long long k) 
{
	ST red = "RED", green = "GREEN", blue = "BLUE";
	k--;
	int64 mn = min(r, b);
	mn = min(mn, g);
	DEBUG(mn);

	if(k < 3*mn) {
		if(k%3 == 0)
			return red;
		return k % 3 == 1 ? green : blue;
	}
	r -= mn; b -= mn; g -= mn;
	k -= 3*mn;
// RGB
	if(g > 0 && b > 0) {	// r == 0
		mn = min(b, g);
		if(k < 2*mn)
			return k%2 == 0 ? green : blue;
		k -= 2*mn;
		g -= mn;
		b -= mn;
	}
	else if(r > 0 && b > 0) {	// g == 0
		mn = min(b, r);
		if(k < 2*mn)
			return k%2 == 0 ? red : blue;
		k -= 2*mn;
		r -= mn;
		b -= mn;
	}
	else if(r > 0 && g > 0) {	// b == 0
		mn = min(g, r);
		if(k < 2*mn)
			return k%2 == 0 ? red : green;
		k -= 2*mn;
		r -= mn;
		g -= mn;
	}
	if(r > 0)
		return red;
	return g > 0 ? green : blue;
	string ret;
	
	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, long long p0, long long p1, long long p2, long long p3, bool hasAnswer, string p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3;
	cout << "]" << endl;
	AlternateColors *obj;
	string answer;
	obj = new AlternateColors();
	clock_t startTime = clock();
	answer = obj->getColor(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p4 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p4;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	long long p0;
	long long p1;
	long long p2;
	long long p3;
	string p4;
	
	{
	// ----- test 0 -----
	p0 = 1ll;
	p1 = 1ll;
	p2 = 1ll;
	p3 = 3ll;
	p4 = "BLUE";
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 3ll;
	p1 = 4ll;
	p2 = 5ll;
	p3 = 4ll;
	p4 = "RED";
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 7ll;
	p1 = 7ll;
	p2 = 1ll;
	p3 = 7ll;
	p4 = "GREEN";
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 1000000000000ll;
	p1 = 1ll;
	p2 = 1ll;
	p3 = 1000000000002ll;
	p4 = "RED";
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 653ll;
	p1 = 32ll;
	p2 = 1230ll;
	p3 = 556ll;
	p4 = "BLUE";
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 1ll;
	p1 = 1ll;
	p2 = 1ll;
	p3 = 3ll;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, false, p4) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Bob is playing with his ball destroyer robot. Initially, Bob has r red balls, g green balls and b blue balls. The robot will repeat the following 3-step program until there are no balls left:
// 
// If there is at least one red ball available, destroy one red ball.
// If there is at least one green ball available, destroy one green ball.
// If there is at least one blue ball available, destroy one blue ball.
// 
// You are given the long longs r, g and b. You are also given a long long k. Find the color of the k-th ball (1-index based) that will be destroyed.
// If the color of the k-th ball to be destroyed is red, return "RED" (quotes for clarity, returned values are case-sensitive).
// If the color is green, return "GREEN".
// If the color is blue, return "BLUE".
// 
// 
// DEFINITION
// Class:AlternateColors
// Method:getColor
// Parameters:long long, long long, long long, long long
// Returns:string
// Method signature:string getColor(long long r, long long g, long long b, long long k)
// 
// 
// CONSTRAINTS
// -r, g and b  will each be between 1 and 1000000000000 (10^12), inclusive.
// -k will be between 1 and r+g+b, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 1
// 1
// 1
// 3
// 
// Returns: "BLUE"
// 
// The order in which the balls are destroyed is: Red, green and blue. The third ball was blue.
// 
// 1)
// 3
// 4
// 5
// 4
// 
// Returns: "RED"
// 
// The order in which the balls are destroyed is:  Red, green, blue, red, green, blue, red, green, blue, green, blue and blue.
// 
// 2)
// 7
// 7
// 1
// 7
// 
// Returns: "GREEN"
// 
// 
// 
// 3)
// 1000000000000
// 1
// 1
// 1000000000002
// 
// Returns: "RED"
// 
// Once the only green and blue balls are destroyed, all of the remaining balls will be red.
// 
// 4)
// 653
// 32
// 1230
// 556
// 
// Returns: "BLUE"
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

#include <bits/stdc++.h>
using namespace std;

class Arrows
{
public:
	int longestArrow(string s);
};

string s;
int N;
int length(int idx) {
	char ch = s[idx];
	if(ch == '<') {
		int len = 1;
		idx++;
		if(idx < 0 || idx>=N)
			return 1;
		ch = s[idx];
		if(ch == '<' || ch == '>')
			return 1;
		while(idx<N && s[idx]==ch) {
			len++;
			idx++;
		}
		return len;
	}
	else if(ch == '>') {
		int len = 1;
		idx--;
		if(idx < 0 || idx>=N)
			return 1;
		ch = s[idx];
		if(ch == '<' || ch == '>')
			return 1;
		while(idx>=0 && s[idx]==ch) {
			len++;
			idx--;
		}
		return len;
	}
	return -1;
}

int Arrows::longestArrow (string s) 
{
	:: s = s;
	int ret=-1;
	N = s.size();
	for(int i = 0; i < N; ++i){
		ret = max(ret, length(i) );
	}
	
	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	Arrows *obj;
	int answer;
	obj = new Arrows();
	clock_t startTime = clock();
	answer = obj->longestArrow(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	int p1;
	
	{
	// ----- test 0 -----
	p0 = "<--->--==>";
	p1 = 4;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "<<<<<<<<<<";
	p1 = 1;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "----==-";
	p1 = -1;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "<----=====>";
	p1 = 6;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// In this problem, a left single arrow is defined as a "less than" character ('<') immediately followed by zero or more consecutive hyphen characters ('-').  A left double arrow is a "less than" character ('<') immediately followed by zero or more consecutive equals characters ('=').  A right single arrow is zero or more hyphen characters ('-') immediately followed by a "greater than" character ('>').  A right double arrow is zero or more equals characters ('=') immediately followed by a "greater than" character ('>').  For example, the following are arrows (quotes for clarity only): "==>", "<-", "<", "<===", "--->", ">".  The length of an arrow is the number of characters it contains.
// 
// You will be given a string s.  Return the length of the longest arrow in s, or -1 if it does not contain any arrows.
// 
// 
// DEFINITION
// Class:Arrows
// Method:longestArrow
// Parameters:string
// Returns:int
// Method signature:int longestArrow(string s)
// 
// 
// NOTES
// -Arrows may overlap. See examples for further clarifications.
// 
// 
// CONSTRAINTS
// -s will contain between 1 and 50 characters, inclusive.
// -Each character in s will be one of '<', '>', '-' or '='.
// 
// 
// EXAMPLES
// 
// 0)
// "<--->--==>"
// 
// Returns: 4
// 
// The arrows contained in s in this case are, by order of appearance:
// "<", "<-", "<--", "<---", "--->", "-->", "->", ">", "==>", "=>" and ">".
// Note that many of these arrows, including some pairs with one left arrow and one right arrow, are overlapping.
// 
// 1)
// "<<<<<<<<<<"
// 
// Returns: 1
// 
// All arrows are of length 1. Note that "<" is both a left single arrow and a left double arrow according to the definition.
// 
// 2)
// "----==-"
// 
// Returns: -1
// 
// No arrows contained.
// 
// 3)
// "<----=====>"
// 
// Returns: 6
// 
// 
// 
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

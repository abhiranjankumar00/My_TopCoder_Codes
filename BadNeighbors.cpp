#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef string ST;
typedef stringstream SS;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef vector <string> vs;

#define Pf	printf
#define	Sf	scanf

#define	ep	1e-9
#define PI M_PI
#define E M_E

#define	CL(a, b)	memset(a, b, sizeof(a))
#define	mp	make_pair

#define	pb	push_back

#define	all(c)	(c).begin(), (c).end()
#define	tr(i, c)	for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())	//vector & list//

#define forn(i, n)	for(int i = 0, loop_ends_here = (int)n; i < loop_ends_here; i++)
#define forab(i, a, b)	for(int i = a, loop_ends_here = (int) b; i <= loop_ends_here; i++)
#define rep(i, a, b)	for(int i = a, loop_ends_here = (int)b; i>=loop_ends_here; i--)

#define read(n)		scanf("%d", &n)
#define write(n)	printf("%d ", n)
#define writeln(n)	printf("%d\n", n)

class BadNeighbors
{
public:
	int maxDonations(vector <int> donations);
};


int BadNeighbors::maxDonations (vector <int> v) 
{
	int N = v.size();
	vi ans(N, 0);
	
	ans[0] = v[0];
	ans[1] = v[1];
	forab(i, 2, N-2) {
		ans[i] = v[i];
		
		forab(j, 0, i-2 )
			ans[i] = max(ans[i], v[i] + ans[j]);
	}

	vi ans1(v.size()); 
	ans1[0] = 0;
	
	forab(i, 1, N-1){
		ans1[i] = v[i];
		forab(j,1 , i-2)
			ans1[i] = max(ans1[i], v[i] + ans1[j]);
	}

	int ret1 = *max_element(all(ans));
	int ret2 = *max_element(all(ans1));
	return max(ret1, ret2);
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	BadNeighbors *obj;
	int answer;
	obj = new BadNeighbors();
	clock_t startTime = clock();
	answer = obj->maxDonations(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	int p1;
	
	{
	// ----- test 0 -----
	int t0[] = {10,3,2,5,7,8};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 19;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {11,15};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 15;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {7,7,7,7,7,7,7};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 21;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {1,2,3,4,5,1,2,3,4,5};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 16;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {94,40,49,65,21,21,106,80,92,81,679,4,61,6,237,12,72,74,29,95,265,35,47,1,61,397,52,72,37,51,1,81,45,435,7,36,57,86,81,72};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2926;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// The old song declares "Go ahead and hate your neighbor", and the residents of
// Onetinville have taken those words to heart.  Every resident hates his next-door 
// neighbors on both sides.  Nobody is willing to live farther away from the town's
// well than his neighbors, so the town has been arranged in a big circle around
// the well.  Unfortunately, the town's well is in disrepair and needs to be restored.  You
// have been hired to collect donations for the Save Our Well fund.
// 
// 
// 
// Each of the town's residents is willing to donate a certain amount, as specified in the vector <int>
// donations, which is listed in clockwise order around the well.  However, nobody is willing to 
// contribute to a fund to which his neighbor has also contributed.  Next-door neighbors are always listed
// consecutively in donations, except that the first and last entries in donations are also
// for next-door neighbors.  You must calculate and return the maximum amount of donations that can be collected.
// 
// 
// 
// DEFINITION
// Class:BadNeighbors
// Method:maxDonations
// Parameters:vector <int>
// Returns:int
// Method signature:int maxDonations(vector <int> donations)
// 
// 
// CONSTRAINTS
// -donations contains between 2 and 40 elements, inclusive.
// -Each element in donations is between 1 and 1000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
//  { 10, 3, 2, 5, 7, 8 }
// 
// Returns: 19
// 
// The maximum donation is 19, achieved by 10+2+7.  It would be better to take 10+5+8 except that
// the 10 and 8 donations are from neighbors.
// 
// 1)
// { 11, 15 }
// 
// Returns: 15
// 
// 2)
// { 7, 7, 7, 7, 7, 7, 7 }
// 
// Returns: 21
// 
// 3)
// { 1, 2, 3, 4, 5, 1, 2, 3, 4, 5 }
// 
// Returns: 16
// 
// 4)
// { 94, 40, 49, 65, 21, 21, 106, 80, 92, 81, 679, 4, 61,  
//   6, 237, 12, 72, 74, 29, 95, 265, 35, 47, 1, 61, 397,
//   52, 72, 37, 51, 1, 81, 45, 435, 7, 36, 57, 86, 81, 72 }
// 
// Returns: 2926
// 
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

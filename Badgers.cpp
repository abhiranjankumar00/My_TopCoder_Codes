#include <bits/stdc++.h>
using namespace std;

class Badgers
{
public:
	int feedMost(vector <int> hunger, vector <int> greed, int totalFood);
};

//SRM 476 Div 1

int Badgers::feedMost (vector <int> hunger, vector <int> greed, int totalFood) 
{
  int ret = 0;
  int N = hunger.size();

  for(int k = 1; k <= N; k++) {
    vector <int> food;
    for(int i = 0; i < (int)N; ++i) {
      int eats = hunger[i] + (k-1)*greed[i];
      food.push_back(eats);
    }
    sort(food.begin(), food.end());
    int eaten = 0;
    for(int i = 0; i < (int)k; ++i) {
      eaten += food[i];
    }
    if(eaten <= totalFood)
      ret=k;
  }

  return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << p2;
	cout << "]" << endl;
	Badgers *obj;
	int answer;
	obj = new Badgers();
	clock_t startTime = clock();
	answer = obj->feedMost(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	vector <int> p0;
	vector <int> p1;
	int p2;
	int p3;
	
	// ----- test 0 -----
	disabled = false;
	p0 = {1,2,3};
	p1 = {2,2,1};
	p2 = 7;
	p3 = 2;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = {5,2,1,5};
	p1 = {0,2,4,1};
	p2 = 19;
	p3 = 3;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = {1,1,1,1,1};
	p1 = {1000,1000,1000,1000,1000};
	p2 = 10;
	p3 = 1;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = {1,2,3,4,5,6,7,8,9,10};
	p1 = {10,9,8,7,6,5,4,3,2,1};
	p2 = 100;
	p3 = 5;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Badgers are lovely furry animals, and Manao has just decided to start keeping a few. The pet shop has offered him N badgers, and they are all so cute that Manao wants to take as many as he can feed. Normally, a badger needs some amount of food per day to be satisfied. However, if he sees other badgers eating, his greed awakens and he wants to eat more. A badger will want a fixed additional amount of food for each co-eater.
// 
// You're given vector <int>s hunger and greed, both containing N elements. The i-th element of hunger is the number of units of food that the i-th badger needs per day if he's alone. The i-th element of greed is the amount of additional units of food the i-th badger will need for each co-eater. Return the maximum number of badgers Manao can take while keeping them all satisfied if he can supply no more than totalFood units of food per day.
// 
// 
// DEFINITION
// Class:Badgers
// Method:feedMost
// Parameters:vector <int>, vector <int>, int
// Returns:int
// Method signature:int feedMost(vector <int> hunger, vector <int> greed, int totalFood)
// 
// 
// CONSTRAINTS
// -hunger will contain between 1 and 50 elements, inclusive.
// -greed will contain the same number of elements as hunger.
// -Each element of hunger will be between 1 and 1000, inclusive.
// -Each element of greed will be between 0 and 1000, inclusive.
// -totalFood will be between 1 and 1000000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {1,2,3}
// {2,2,1}
// 7
// 
// Returns: 2
// 
// Manao can take badger 0 and one of the other two badgers.
// 
// 
// 1)
// {5,2,1,5}
// {0,2,4,1}
// 19
// 
// Returns: 3
// 
// Badger 2 is too greedy, but the rest can be fed together and will only need (5 + 2 * 0) + (2 + 2 * 2) + (5 + 2 * 1) = 18 units of food.
// 
// 
// 2)
// {1,1,1,1,1}
// {1000,1000,1000,1000,1000}
// 10
// 
// Returns: 1
// 
// They are too greedy to eat together.
// 
// 
// 3)
// {1,2,3,4,5,6,7,8,9,10}
// {10,9,8,7,6,5,4,3,2,1}
// 100
// 
// Returns: 5
// 
// END KAWIGIEDIT TESTING

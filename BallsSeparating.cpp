#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
#include <iterator>
#include <fstream>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef string ST;
typedef stringstream SS;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef vector <string> vs;

#define DEBUG(x)	cout << #x << " = " << x << "\n"
#define endl 		("\n")

#define	ep		1e-9
#define PI		M_PI
#define E 		M_E

#define	CL(a, b)	memset(a, b, sizeof(a))
#define	mp		make_pair
#define	pb		push_back

#define	all(c)		(c).begin(), (c).end()
#define	tr(i, c)	for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())		//vector & list//

#define forn(i, n)	for(int i = 0, loop_ends_here = (int)n; i < loop_ends_here ; i++)
#define forab(i, a, b)	for(int i = a, loop_ends_here = (int)b; i <= loop_ends_here; i++)
#define rep(i, a, b)	for(int i = a, loop_ends_here = (int)b; i >= loop_ends_here; i--)

#define Pf		printf
#define	Sf		scanf

#define read(n)		scanf("%d", &n)
#define write(n)	printf("%d ", n)
#define writeln(n)	printf("%d\n", n)

/*
#ifdef DEBUG
	#undef DEBUG
#endif
#define DEBUG
*/

class BallsSeparating
{
public:
	int minOperations(vector <int> red, vector <int> green, vector <int> blue);
};

int N;
vi red, green, blue;

int solve(int r, int g, int b) {
	int ret = 0;

	forn(i, N) {
		if(i == r) 
			ret += blue[i] + green[i];
		else if(i == g) 
			ret += red[i] + blue[i];
		else if(i == b) 
			ret += red[i] + green[i];
		else 
			ret += red[i] + green[i] + blue[i] - max(red[i], max(green[i], blue[i]));
	}
	return ret;
}

int BallsSeparating::minOperations (vector <int> _red, vector <int> _green, vector <int> _blue) 
{
	red = _red; green = _green; blue = _blue;
	N = red.size();
	if(N < 3)
		return -1;
	int ret = 1e9;

	forn(r, N)	forn(g, N)	forn(b, N)	if(r != g && r != b && b != g)
		ret = min(ret, solve(r, b, g));
	return ret;

}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, vector <int> p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}";
	cout << "]" << endl;
	BallsSeparating *obj;
	int answer;
	obj = new BallsSeparating();
	clock_t startTime = clock();
	answer = obj->minOperations(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <int> p1;
	vector <int> p2;
	int p3;
	
	{
	// ----- test 0 -----
	int t0[] = {1,1,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,1,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {1,1,1};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 6;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {5};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {6};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {8};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = -1;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {4,6,5,7};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {7,4,6,3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {6,5,3,8};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 37;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {7,12,9,9,7};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {7,10,8,8,9};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {8,9,5,6,13};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 77;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {842398,491273,958925,849859,771363,67803,184892,391907,256150,75799};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {268944,342402,894352,228640,903885,908656,414271,292588,852057,889141};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {662939,340220,600081,390298,376707,372199,435097,40266,145590,505103};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 7230607;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// There are N boxes numbered from 0 to N-1, inclusive. For each i, box i contains red[i] red balls, green[i] green balls, and blue[i] blue balls.
// 
// 
// Fox Ciel wants to separate the balls by colors. In each operation, she can pick a single ball from some box and put it into another box. She considers the balls to be separated if no box contains balls of more than one color.
// 
// 
// Return the minimal number of operations required to separate the balls. If this is impossible, return -1.
// 
// 
// DEFINITION
// Class:BallsSeparating
// Method:minOperations
// Parameters:vector <int>, vector <int>, vector <int>
// Returns:int
// Method signature:int minOperations(vector <int> red, vector <int> green, vector <int> blue)
// 
// 
// CONSTRAINTS
// -red, green and blue will each contain between 1 and 50 elements, inclusive.
// -red, green and blue will contain the same number of elements.
// -Each element of red, green and blue will be between 1 and 1,000,000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {1, 1, 1}
// {1, 1, 1}
// {1, 1, 1}
// 
// Returns: 6
// 
// One way to separate the balls in six operations is as follows:
// 
// Move a red ball from box 1 to box 0.
// Move a red ball from box 2 to box 0.
// Move a green ball from box 0 to box 1.
// Move a green ball from box 2 to box 1.
// Move a blue ball from box 0 to box 2.
// Move a blue ball from box 1 to box 2.
// 
// The pictures on the left and on the right show the initial and the final states of the balls, respectively.
// 
// 
// 
// Â 
// 
// 
// 1)
// {5}
// {6}
// {8}
// 
// Returns: -1
// 
// It is impossible to separate the balls.
// 
// 2)
// {4, 6, 5, 7}
// {7, 4, 6, 3}
// {6, 5, 3, 8}
// 
// Returns: 37
// 
// 
// 
// 3)
// {7, 12, 9, 9, 7}
// {7, 10, 8, 8, 9}
// {8, 9, 5, 6, 13}
// 
// Returns: 77
// 
// 
// 
// 4)
// {842398, 491273, 958925, 849859, 771363, 67803, 184892, 391907, 256150, 75799}
// {268944, 342402, 894352, 228640, 903885, 908656, 414271, 292588, 852057, 889141}
// {662939, 340220, 600081, 390298, 376707, 372199, 435097, 40266, 145590, 505103}
// 
// Returns: 7230607
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

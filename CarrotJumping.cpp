#include <bits/stdc++.h>
using namespace std;

class CarrotJumping
{
public:
	int theJump(int init);
};

const long long mod = 1e9 + 7;

long long _pow(int a, int p) {
  if(p == 0)
    return 1ll;
  long long ret = _pow(a, p/2);
  ret = (ret*ret)%mod;
  if(p%2==1)
    ret = (ret*a)%mod;
  return ret;
}

int CarrotJumping::theJump (int init) 
{
  map <int, int> steps;
  long long inv4 = _pow(4, mod-2), inv8 = _pow(8, mod-2);

  queue <pair <int, int> > q;

  q.push(make_pair(0, 0));
  steps[0] = 0;

  while(!q.empty()) {
    pair <int, int> nd = q.front();
    q.pop();
    int u = nd.first, step = nd.second;

    int v = ((u-3+mod)*inv4)%mod;
    if(step < 1e5 && steps.find(v) == steps.end()) {
      steps[v] = step+1;
      q.push(make_pair(v, step+1));
    }

    v = ((u-7+mod)*inv8)%mod;
    if(step < 1e5 && steps.find(v) == steps.end()) {
      steps[v] = step+1;
      q.push(make_pair(v, step+1));
    }
  }

  auto it = steps.find(init);
  return it == steps.end() ? -1 : it->second;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << p0;
	cout << "]" << endl;
	CarrotJumping *obj;
	int answer;
	obj = new CarrotJumping();
	clock_t startTime = clock();
	answer = obj->theJump(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	int p0;
	int p1;
	
	// ----- test 0 -----
	disabled = false;
	p0 = 125000000;
	p1 = 1;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = 281250001;
	p1 = 2;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = 18426114;
	p1 = 58;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = 4530664;
	p1 = 478;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = 705616876;
	p1 = 100000;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 5 -----
	disabled = false;
	p0 = 852808441;
	p1 = -1;
	all_right = (disabled || KawigiEdit_RunTest(5, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Rabbits often feel hungry, so when they go out to eat carrots, they jump as quickly as possible.
// 
// 
// Initially, rabbit Hanako stands at position init. From position x, she can jump to either position 4*x+3 or 8*x+7 in a single jump. She can jump at most 100,000 times because she gets tired by jumping.
// 
// 
// Carrots are planted at position x if and only if x is divisible by 1,000,000,007 (i.e. carrots are planted at position 0, position 1,000,000,007, position 2,000,000,014, and so on). Return the minimal number of jumps required to reach a carrot. If it's impossible to reach a carrot using at most 100,000 jumps, return -1.
// 
// 
// 
// DEFINITION
// Class:CarrotJumping
// Method:theJump
// Parameters:int
// Returns:int
// Method signature:int theJump(int init)
// 
// 
// CONSTRAINTS
// -init will be between 1 and 1,000,000,006, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 125000000
// 
// Returns: 1
// 
// She can jump from 125000000 to 1000000007.
// 
// 1)
// 281250001
// 
// Returns: 2
// 
// 281250001 -> 1125000007 -> 9000000063
// 
// 2)
// 18426114
// 
// Returns: 58
// 
// 
// 
// 3)
// 4530664
// 
// Returns: 478
// 
// 
// 
// 4)
// 705616876
// 
// Returns: 100000
// 
// 5)
// 852808441
// 
// Returns: -1
// 
// She can't reach any carrot by making at most 100,000 jumps.
// 
// END KAWIGIEDIT TESTING

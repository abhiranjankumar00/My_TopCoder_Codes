#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef string ST;
typedef stringstream SS;

#define Pf	printf
#define	Sf	scanf

#define ep 1e-9
#define CL(a, b)	memset(a, b, sizeof(a))

#define pb	push_back
#define mp	make_pair
#define	SZ(a)	int((a).size())

#define tr(i, c)	for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())	//vector & list//
#define	all(c)	(c).begin(), (c).end()

#define forn(i, n)	for(int i = 0; i < n; i++)
#define forab(i, a, b)	for(int i = a; i <= b; i++)
#define rep(i, a, b)	for(int i = a; i>=b; i--)

class ChatTranscript
{
public:
	int howMany(vector <string> transcript, string name)
	{
		int ret = 0;
		name += ":";
		tr(it, transcript)	if(it->substr(0, name.length()) == name)	ret++;
		return ret;
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, string p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "\"" << p1 << "\"";
	cout << "]" << endl;
	ChatTranscript *obj;
	int answer;
	obj = new ChatTranscript();
	clock_t startTime = clock();
	answer = obj->howMany(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	string p1;
	int p2;
	
	{
	// ----- test 0 -----
	string t0[] = {"Bob: Hello Tim.","Tim: Hello Bob.","Bob: How are ya Tim?","Frank: Stop chatting!"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "Bob";
	p2 = 2;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"Bob: This is a long","sentence that takes 2 lines.","Tim: Yes it is.","Bob : I am not Bob.","Frank: No you aren't!"," Bob: Neither am I."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "Bob";
	p2 = 1;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"Crazy1010: !@LK%#L%K @#L%K @#L%K@#L%K2kl53k2","Bob: You are crazy.","Crazy1010 Yup #@LK%$L!K%LK%!K% !K afmas,"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "Crazy1010";
	p2 = 1;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"A:A:A:A:A:A:A:A:A","b:b:b:b:b:b:b:b:b"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "B";
	p2 = 0;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"A:A:A:A:A:A:A:A:A"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "A";
	p2 = 1;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// You have received the transcript of an online chat.  Each element of transcript corresponds to a line.  You want to know how many times name said something.  To do this, count how many lines begin with name immediately followed by a colon.  This comparison is case sensitive.
// 
// DEFINITION
// Class:ChatTranscript
// Method:howMany
// Parameters:vector <string>, string
// Returns:int
// Method signature:int howMany(vector <string> transcript, string name)
// 
// 
// CONSTRAINTS
// -transcript will contain between 1 and 50 elements inclusive.
// -Each element of transcript will contain between 1 and 50 characters inclusive.
// -Each character in each element of transcript will have ASCII value between 32 and 126 inclusive.
// -name will contain between 1 and 50 characters inclusive.
// -Each character in name will be a letter (A-Z, a-z) or a digit (0-9).
// 
// 
// EXAMPLES
// 
// 0)
// {
// "Bob: Hello Tim.",
// "Tim: Hello Bob.",
// "Bob: How are ya Tim?",
// "Frank: Stop chatting!"
// }
// "Bob"
// 
// Returns: 2
// 
// Bob managed to say two things before Frank entered the conversation.
// 
// 1)
// {
// "Bob: This is a long",
// "sentence that takes 2 lines.",
// "Tim: Yes it is.",
// "Bob : I am not Bob.",
// "Frank: No you aren't!",
// " Bob: Neither am I."
// }
// "Bob"
// 
// Returns: 1
// 
// Only one line begins with "Bob:" (quotes for clarity).
// 
// 2)
// {
// "Crazy1010: !@LK%#L%K @#L%K @#L%K@#L%K2kl53k2",
// "Bob: You are crazy.",
// "Crazy1010 Yup #@LK%$L!K%LK%!K% !K afmas,"
// }
// "Crazy1010"
// 
// Returns: 1
// 
// 3)
// {
// "A:A:A:A:A:A:A:A:A",
// "b:b:b:b:b:b:b:b:b"
// }
// "B"
// 
// Returns: 0
// 
// 4)
// {"A:A:A:A:A:A:A:A:A"}
// "A"
// 
// Returns: 1
// 
// END KAWIGIEDIT TESTING







//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef string ST;
typedef stringstream SS;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef vector <string> vs;

#define Pf	printf
#define	Sf	scanf

#define	ep	1e-9
#define PI M_PI
#define E M_E

#define	CL(a, b)	memset(a, b, sizeof(a))
#define	mp	make_pair

#define	pb	push_back

#define	all(c)	(c).begin(), (c).end()
#define	tr(i, c)	for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())	//vector & list//

#define forn(i, n)	for(int i = 0, loop_ends_here = (int)n; i < loop_ends_here; i++)
#define forab(i, a, b)	for(int i = a, loop_ends_here = (int) b; i <= loop_ends_here; i++)
#define rep(i, a, b)	for(int i = a, loop_ends_here = (int)b; i>=loop_ends_here; i--)

#define read(n)		scanf("%d", &n)
#define write(n)	printf("%d ", n)
#define writeln(n)	printf("%d\n", n)

class CirclesCountry
{
public:
	int leastBorders(vector <int> X, vector <int> Y, vector <int> R, int x1, int y1, int x2, int y2);
};

bool in(double x, int x1, int x2) {
	return (x >= min(x1, x2) - 1e-9) && (x <= max(x1, x2) + 1e-9);
}

int CirclesCountry::leastBorders (vector <int> X, vector <int> Y, vector <int> R, int _x1, int _y1, int _x2, int _y2) 
{
	if(_x2 == _x1 && _y2 == _y1)	return 0;
	
	int ret = 0;
	
	forn(i, X.size()) {
		int64 r = R[i], x0 = X[i], y0 = Y[i];
		int64 x1 = _x1, y1 = _y1, x2 = _x2, y2 = _y2;
		double A, B, C, D;
		double xx1, xx2, yy1, yy2;
		
		if(x2 - x1 != 0) {
			double d1 = (1.0*y2 - y1) / (1.0*x2-x1);
			double d2 = y2 - d1*x2;
			double d3 = d2 - y0;
			
			A = 1+d1*d1;
			B = -2*x0 + 2*d1*d3;
			C = x0*x0 + d3*d3 - r*r;
			D = B*B - 4*A*C;

			if(D > 0 || abs(D) <= 1e-9) {
				if(abs(D) <= 1e-9)
					D = 1e-100;
				xx1 = (-B + sqrt(D)) / (2*A);
				xx2 = (-B - sqrt(D)) / (2*A);
				yy1 = xx1 *d1 + d2;
				yy2 = xx2 *d1 + d2;
			}
			else
				xx1 = xx2 = yy1 = yy2 = 1e7;
		}
		else {
			double d1 = (1.0*x2 - x1) / (1.0*y2 - y1);
			double d2 = x2 - d1*y2;
			double d3 = d2 - x0;
			
			A = d1*d1 + 1;
			B = -2*y0 + 2*d1*d2;
			C = d3*d3 + y0*y0 - r*r;
			D = B*B - 4*A*C;

			if(D > 0 || abs(D) <= 1e-9) {
				if(abs(D) <= 1e-9)
					D = 1e-100;
				yy1 = (-B + sqrt(D)) / (2*A);
				yy2 = (-B - sqrt(D)) / (2*A);
				xx1 = yy1 *d1 + d2;
				xx2 = yy2 *d1 + d2;
			}
			else
				xx1 = xx2 = yy1 = yy2 = 1e7;
		}

		if( (in(xx1, x1, x2) && in(yy1, y1, y2)) ^ (in(xx2, x1, x2) && in(yy2, y1, y2)) )
			ret++;

		Pf("Circle (%3lld, %3lld, %3lld), pt1 = (%3lld, %3lld), pt2 = (%3lld, %3lld)\t\t", x0, y0, r, x1, y1, x2, y2);
		if(abs(D) <= 1e-9) {
			cout << "Intersect at one points.\n";
			//	ret++;
		}
		else if(D > 0)
			cout << "Intersects at two points.\n";
		else
			cout << "Doesn't intersect.\n";
	}
	
	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, vector <int> p2, int p3, int p4, int p5, int p6, bool hasAnswer, int p7) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}" << "," << p3 << "," << p4 << "," << p5 << "," << p6;
	cout << "]" << endl;
	CirclesCountry *obj;
	int answer;
	obj = new CirclesCountry();
	clock_t startTime = clock();
	answer = obj->leastBorders(p0, p1, p2, p3, p4, p5, p6);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p7 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p7;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <int> p1;
	vector <int> p2;
	int p3;
	int p4;
	int p5;
	int p6;
	int p7;
	
	{
	// ----- test 0 -----
	int t0[] = {0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {2};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = -5;
	p4 = 1;
	p5 = 5;
	p6 = 1;
	p7 = 0;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, p5, p6, true, p7) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {0,-6,6};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0,1,2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {2,2,2};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = -5;
	p4 = 1;
	p5 = 5;
	p6 = 1;
	p7 = 2;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, p5, p6, true, p7) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {1,-3,2,5,-4,12,12};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,-1,2,5,5,1,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {8,1,2,1,1,1,2};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = -5;
	p4 = 1;
	p5 = 12;
	p6 = 1;
	p7 = 3;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, p5, p6, true, p7) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {-3,2,2,0,-4,12,12,12};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {-1,2,3,1,5,1,1,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {1,3,1,7,1,1,2,3};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 2;
	p4 = 3;
	p5 = 13;
	p6 = 2;
	p7 = 5;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, p5, p6, true, p7) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {-107,-38,140,148,-198,172,-179,148,176,153,-56,-187};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {175,-115,23,-2,-49,-151,-52,42,0,68,109,-174};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {135,42,70,39,89,39,43,150,10,120,16,8};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 102;
	p4 = 16;
	p5 = 19;
	p6 = -108;
	p7 = 3;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, p5, p6, true, p7) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Circles Country is a country that contains several circular-shaped districts.  Some districts may be situated inside other districts, but their borders do not intersect or touch.  Qatam is a resident of Circles Country.  When he travels between two locations, he always tries to cross the fewest number of district borders as possible because crossing borders is usually a laborious task.
// 
// Imagine Circles Country as an infinite plane.  You are given vector <int>s X, Y and R, where (X[i], Y[i]) are the coordinates of the i-th district's center and R[i] is its radius.  Qatam is currently at point (x1,y1) and he needs to get to point (x2,y2).  Neither of these points lies on a district border.  Return the minimal number of district borders he must cross to get to his destination.
// 
// 
// DEFINITION
// Class:CirclesCountry
// Method:leastBorders
// Parameters:vector <int>, vector <int>, vector <int>, int, int, int, int
// Returns:int
// Method signature:int leastBorders(vector <int> X, vector <int> Y, vector <int> R, int x1, int y1, int x2, int y2)
// 
// 
// CONSTRAINTS
// -X will contain between 1 and 50 elements, inclusive.
// -X, Y and R will each contain the same number of elements.
// -Each element of X and Y will be between -1000 and 1000, inclusive.
// -Each element of R will be between 1 and 1000, inclusive.
// -x1, y1, x2 and y2 will be between -1000 and 1000, inclusive.
// -No two circumferences will have common points.
// -The points (x1,y1) and (x2,y2) will not lie on any of the circumferences.
// 
// 
// EXAMPLES
// 
// 0)
// {0}
// {0}
// {2}
// -5
// 1
// 5
// 1
// 
// Returns: 0
// 
// 
// 
// 1)
// {0,-6,6}
// {0,1,2}
// {2,2,2}
// -5
// 1
// 5
// 1
// 
// Returns: 2
// 
// 
// 
// 2)
// {1,-3,2,5,-4,12,12}
// {1,-1,2,5,5,1,1}
// {8,1,2,1,1,1,2}
// -5
// 1
// 12
// 1
// 
// Returns: 3
// 
// 
// 
// 3)
// {-3,2,2,0,-4,12,12,12}
// {-1,2,3,1,5,1,1,1}
// {1,3,1,7,1,1,2,3}
// 2
// 3
// 13
// 2
// 
// Returns: 5
// 
// 
// 
// 4)
// {-107,-38,140,148,-198,172,-179,148,176,153,-56,-187}
// {175,-115,23,-2,-49,-151,-52,42,0,68,109,-174}
// {135,42,70,39,89,39,43,150,10,120,16,8}
// 102
// 16
// 19
// -108
// 
// Returns: 3
// 
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

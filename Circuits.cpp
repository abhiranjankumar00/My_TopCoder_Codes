#include <bits/stdc++.h>
using namespace std;

class Circuits
{
public:
	int howLong(vector <string> connects, vector <string> costs);
};

vector <vector<int> > graph, cost;
vector <bool> vis;
int ret = 0;

void dfs(int u, int c) {
  ret = max(ret, c);
  for(int i = 0; i < (int)graph[u].size(); ++i) {
    dfs(graph[u][i], c + cost[u][i]);
  }
}

int Circuits::howLong (vector <string> connects, vector <string> costs) 
{
  ret = 0;
  int N = connects.size();
  cost = vector <vector<int> > (N);
  graph = vector <vector<int> > (N);
  vis = vector <bool> (N); 

  for(int i = 0; i < (int)N; ++i) {
    stringstream ss1(connects[i]), ss2(costs[i]);
    int v, c;

    while(ss1 >> v) {
      ss2 >> c;
      graph[i].push_back(v);

      cost[i].push_back(c);
    }
  }

  for(int i = 0; i < (int)N; ++i) {
    dfs(i, 0);
  }
	
	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <string> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	Circuits *obj;
	int answer;
	obj = new Circuits();
	clock_t startTime = clock();
	answer = obj->howLong(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	vector <string> p0;
	vector <string> p1;
	int p2;
	
	// ----- test 0 -----
	disabled = false;
	p0 = {"1 2","2",""};
	p1 = {"5 3","7",""};
	p2 = 12;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = {"1 2 3 4 5","2 3 4 5","3 4 5","4 5","5",""};
	p1 = {"2 2 2 2 2","2 2 2 2","2 2 2","2 2","2",""};
	p2 = 10;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = {"1","2","3","","5","6","7",""};
	p1 = {"2","2","2","","3","3","3",""};
	p2 = 9;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = {"","2 3 5","4 5","5 6","7","7 8","8 9","10","10 11 12","11","12","12",""};
	p1 = {"","3 2 9","2 4","6 9","3","1 2","1 2","5","5 6 9","2","5","3",""};
	p2 = 22;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = {"","2 3","3 4 5","4 6","5 6","7","5 7",""};
	p1 = {"","30 50","19 6 40","12 10","35 23","8","11 20",""};
	p2 = 105;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// An essential part of circuit design and general system optimization is critical path analysis.  On a chip, the critical path represents the longest path any signal would have to travel during execution.  In this problem we will be analyzing chip designs to determine their critical path length.  The chips in this problem will not contain any cycles, i.e. there exists no path from one component of a chip back to itself.
// 
// Given a vector <string> connects representing the wiring scheme, and a vector <string> costs representing the cost of each connection, your method will return the size of the most costly path between any 2 components on the chip.  In other words, you are to find the longest path in a directed, acyclic graph.  Element j of connects will list the components of the chip that can be reached directly from the jth component (0-based). Element j of costs will list the costs of each connection mentioned in the jth element of connects.  As mentioned above, the chip will not contain any cyclic paths.  For example:
// connects = {"1 2",
//             "2",
//             ""}
// costs    = {"5 3",
//             "7",
//             ""}
// 
// In this example, component 0 connects to components 1 and 2 with costs 5 and 3 respectively.  Component 1 connects to component 2 with a cost of 7.  All connections mentioned are directed.  This means a connection from component i to component j does not imply a connection from component j to component i.  Since we are looking for the longest path between any 2 components, your method would return 12.
//          
// 
// 
// DEFINITION
// Class:Circuits
// Method:howLong
// Parameters:vector <string>, vector <string>
// Returns:int
// Method signature:int howLong(vector <string> connects, vector <string> costs)
// 
// 
// CONSTRAINTS
// -connects must contain between 2 and 50 elements inclusive
// -connects must contain the same number of elements as costs
// -Each element of connects must contain between 0 and 50 characters inclusive
// -Each element of costs must contain between 0 and 50 characters inclusive
// -Element i of connects must contain the same number of integers as element i of costs
// -Each integer in each element of connects must be between 0 and the size of connects-1 inclusive
// -Each integer in each element of costs must be between 1 and 1000 inclusive
// -Each element of connects may not contain repeated integers
// -Each element of connects must be a single space delimited list of integers, each of which has no extra leading zeros.  There will be no leading or trailing whitespace.
// -Each element of costs must be a single space delimited list of integers, each of which has no extra leading zeros.  There will be no leading or trailing whitespace.
// -The circuit may not contain any cycles
// -There will be at least 1 connection.
// 
// 
// EXAMPLES
// 
// 0)
// {"1 2",
//  "2",
//  ""}
// {"5 3",
//  "7",
//  ""}
// 
// Returns: 12
// 
// From above
// 
// 1)
// {"1 2 3 4 5","2 3 4 5","3 4 5","4 5","5",""}
// {"2 2 2 2 2","2 2 2 2","2 2 2","2 2","2",""}
// 
// Returns: 10
// 
// The longest path goes from 0-1-2-3-4-5 for a cost of 10.
// 
// 2)
// {"1","2","3","","5","6","7",""}
// {"2","2","2","","3","3","3",""}
// 
// Returns: 9
// 
// The 0-1-2-3 path costs 6 whereas the 4-5-6-7 path costs 9
// 
// 3)
// {"","2 3 5","4 5","5 6","7","7 8","8 9","10",
//  "10 11 12","11","12","12",""}
// {"","3 2 9","2 4","6 9","3","1 2","1 2","5",
//  "5 6 9","2","5","3",""}
// 
// Returns: 22
// 
// 4)
// {"","2 3","3 4 5","4 6","5 6","7","5 7",""}
// {"","30 50","19 6 40","12 10","35 23","8","11 20",""}
// 
// Returns: 105
// 
// END KAWIGIEDIT TESTING

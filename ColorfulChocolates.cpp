#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
#include <iterator>
#include <fstream>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef string ST;
typedef stringstream SS;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef vector <string> vs;

#define DEBUG(x)	cout << #x << " = " << x << "\n"
#define endl 		("\n")

#define	ep		1e-9
#define PI		M_PI
#define E 		M_E

#define	CL(a, b)	memset(a, b, sizeof(a))
#define	mp		make_pair
#define	pb		push_back

#define	all(c)		(c).begin(), (c).end()
#define	tr(i, c)	for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())		//vector & list//

#define forn(i, n)	for(int i = 0, loop_ends_here = (int)n; i < loop_ends_here ; i++)
#define forab(i, a, b)	for(int i = a, loop_ends_here = (int)b; i <= loop_ends_here; i++)
#define rep(i, a, b)	for(int i = a, loop_ends_here = (int)b; i >= loop_ends_here; i--)

#define Pf		printf
#define	Sf		scanf

#define read(n)		scanf("%d", &n)
#define write(n)	printf("%d ", n)
#define writeln(n)	printf("%d\n", n)

/*
#ifdef DEBUG
	#undef DEBUG
#endif
#define DEBUG
*/

class ColorfulChocolates
{
public:
	int maximumSpread(string chocolates, int maxSwaps);
};
vvi colors;
int maxSwaps;

int spread(int id, int jd) {
	int lt = jd-1, rt = jd+1;
	int swap = maxSwaps;
	int ret = 1;

	while(lt >= 0 || rt < colors[id].size()) {
		if(lt >= 0 && rt < colors[id].size()) {
			int swapFromLeft = colors[id][jd] - colors[id][lt] - (jd-lt);
			int swapFromRight = colors[id][rt] - colors[id][jd] - (rt-jd);
			if(min(swapFromLeft, swapFromRight) > swap)
				return ret;
			if(swapFromLeft <= swapFromRight) {
				swap -= swapFromLeft;
				lt--;
				ret++;
			}
			else {
				swap -= swapFromRight;
				rt++;
				ret++;
			}
		}
		else if(lt >= 0) {
			int swapFromLeft = colors[id][jd] - colors[id][lt] - (jd-lt);
			if(swapFromLeft > swap)
				return ret;
			swap -= swapFromLeft;
			lt--;
			ret++;
		}
		else {
			int swapFromRight = colors[id][rt] - colors[id][jd] - (rt-jd);
			if(swapFromRight > swap)
				return ret;
			swap -= swapFromRight;
			rt++;
			ret++;
		}
	}
	return ret;
}

int spread(int id) {
	int ret = 0; 
	forn(j, colors[id].size()) 
		ret = max(ret, spread(id, j));
	return ret;
}

int ColorfulChocolates::maximumSpread (string chocolates, int _maxSwaps) 
{
	maxSwaps = _maxSwaps;
	colors.clear();
	colors.resize(26);
	forn(i, chocolates.size())
		colors[chocolates[i] - 'A'].pb(i);;
	int ret = 0;
	forn(i, 26)
		ret = max(ret, spread(i));
	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << p1;
	cout << "]" << endl;
	ColorfulChocolates *obj;
	int answer;
	obj = new ColorfulChocolates();
	clock_t startTime = clock();
	answer = obj->maximumSpread(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	p0 = "TIJLNWNRXPQPBETEWQFFSEYZPJSIIWYDEHOSEDLDTEUUINAGGH";
	p1 = 19;
	p2 = 3;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Beaver Bindu has some chocolates arranged in a row.
// The wrapping of each chocolate has a single color.
// Multiple chocolates can share the same color.
// In this problem, each of the possible colors is represented by an uppercase letter.
// You are given a string chocolates.
// For each i, the i-th chocolate (0-based index) in the row has the color chocolates[i].
// 
// 
// The spread of a row of chocolates is the maximum number of adjacent chocolates that all share the same color.
// Formally, the spread can be defined as the maximum value of (j-i+1), where i <= j and all the chocolates in the positions between i and j, inclusive, have the same color.
// 
// 
// You are also given an int maxSwaps.
// Bindu can swap any two adjacent chocolates.
// She has decided to make at most maxSwaps such swaps.
// 
// 
// Return the maximum spread she can obtain.
// 
// 
// DEFINITION
// Class:ColorfulChocolates
// Method:maximumSpread
// Parameters:string, int
// Returns:int
// Method signature:int maximumSpread(string chocolates, int maxSwaps)
// 
// 
// CONSTRAINTS
// -chocolates will contain between 1 and 50 characters, inclusive.
// -Each character in chocolates will be an uppercase letter ('A'-'Z').
// -maxSwaps will be between 1 and 2500, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// "ABCDCBC"
// 1
// 
// Returns: 2
// 
// One optimal solution is to swap chocolates at positions 2 and 3, obtaining the row "ABDCCBC", which has spread 2.
// 
// 
// 1)
// "ABCDCBC"
// 2
// 
// Returns: 3
// 
// The only optimal solution is to produce the row "ABDCCCB".
// 
// 
// 2)
// "ABBABABBA"
// 3
// 
// Returns: 4
// 
// The row "ABBBBAABA" can be produced with 3 swaps.
// 
// 3)
// "ABBABABBA"
// 4
// 
// Returns: 5
// 
// An optimal solution is to produce the row "AABBBBBAA".
// 
// 4)
// "QASOKZNHWNFODOQNHGQKGLIHTPJUVGKLHFZTGPDCEKSJYIWFOO"
// 77
// 
// Returns: 5
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

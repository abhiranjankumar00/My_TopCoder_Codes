#include <iostream>
#include <ctime>
#include <vector>
#include <list>
#include <queue>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <cassert>
#include <utility>
#include <sstream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <climits>
#include <iterator>
#include <fstream>
using namespace std;

typedef long long 		int64;
typedef vector<int> 		vi;
typedef string 			ST;
typedef stringstream 		SS;
typedef vector< vector<int> > 	vvi;
typedef pair<int,int> 		ii;
typedef vector<string> 		vs;
/*
#if __cplusplus > 199711L	// for g++0x, value of __cplusplus must be greater thana 199711L.
	#define tr(i, c)	for(auto i = begin(c); i != end(c); i++)
#else
	#define tr(i, c)	for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#endif
*/
#define endl		("\n")
#define tr(i, c)	for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define PI		M_PI
#define E 		M_E
#define	eps		1e-9

#define	Sf		scanf
#define	Pf		printf

#define forn(i, n)	for(int i = 0, lets_stop_here = (int)n; i <  lets_stop_here; i++)
#define forab(i, a, b)	for(int i = a, lets_stop_here = (int)b; i <= lets_stop_here; i++)
#define rep(i, a, b)	for(int i = a, lets_stop_here = (int)b; i >= lets_stop_here; i--)

#define	all(c)		(c).begin(), (c).end()
#define	cl(a, b)	memset(a, b, sizeof(a))
#define mp		make_pair
#define pb		push_back

#define	present(x, c)	((c).find(x) != (c).end())	//map & set//
#define	cpresent(x, c)	(find( (c).begin(), (c).end(), x) != (c).end())	//vector & list//

#define read(n)		scanf("%d", &n)
#define write(n)	printf("%d ", n)
#define writeln(n)	printf("%d\n", n)

#if (0)
	#define debug 
#else 
	#define debug(x)	cout << #x << " = " << x << "\n"
#endif

class ColorfulStrings
{
public:
	string getKth(int n, int k);
};

bool used[11];
vs strs;

int getIndex(int n, int id) {
	while(id--)
		n/= 10;
	return n % 10;
}

void geenrate(int cur, int n) {
	if(n == 0) {
		return;
	}
}


string ColorfulStrings::getKth (int n, int k) 
{
	if(n > 8)
		return "";
	k--;
	cl(used, 0);
	strs.clear();

	generate(0, n);

	return "";
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	ColorfulStrings *obj;
	string answer;
	obj = new ColorfulStrings();
	clock_t startTime = clock();
	answer = obj->getKth(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	string p2;
	
	{
	// ----- test 0 -----
	p0 = 3;
	p1 = 4;
	p2 = "238";
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 4;
	p1 = 2000;
	p2 = "";
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 5;
	p1 = 1;
	p2 = "23457";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 2;
	p1 = 22;
	p2 = "52";
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 6;
	p1 = 464;
	p2 = "257936";
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 8;
	p1 = 12345;
	all_right = KawigiEdit_RunTest(5, p0, p1, false, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	p0 = 7;
	p1 = 123;
	all_right = KawigiEdit_RunTest(6, p0, p1, false, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// The product value of a string is 
// the product of all the digits ('0'-'9') in the string. 
// For example, the product value of "123" is 1 * 2 * 3 = 6. 
// A string is called colorful if it contains only digits 
// and the product value of each of its nonempty contiguous substrings is distinct. 
// 
// For example, the string "263" has six substrings: "2", "6", "3", "26", "63" and "263". 
// The product values of these substrings are: 2, 6, 3, 2 * 6 = 12, 6 * 3 = 18 
// and 2 * 6 * 3 = 36, respectively. 
// Since all six product values are distinct, "263" is colorful. 
// On the other hand, "236" is not colorful 
// because two of its substrings, "6" and "23", have the same product value (6 = 2 * 3). 
// 
// Return the k-th (1-based) lexicographically smallest 
// colorful string of length n. 
// If there are less than k colorful strings of length n, 
// return an empty string instead. 
// 
// 
// DEFINITION
// Class:ColorfulStrings
// Method:getKth
// Parameters:int, int
// Returns:string
// Method signature:string getKth(int n, int k)
// 
// 
// NOTES
// -The lexicographically smaller of two strings is the one that has the smaller character ('0' < '1' < ... < '9') at the first position where they differ. 
// 
// 
// CONSTRAINTS
// -n will be between 1 and 50, inclusive. 
// -k will be between 1 and 1,000,000,000, inclusive. 
// 
// 
// EXAMPLES
// 
// 0)
// 3
// 4
// 
// Returns: "238"
// 
// The first four smallest colorful strings of length 3 are "234", "235", "237" and "238".
// 
// 
// 1)
// 4
// 2000
// 
// Returns: ""
// 
// The number of colorful strings of length 4 is less than 2000.
// 
// 
// 2)
// 5
// 1
// 
// Returns: "23457"
// 
// 3)
// 2
// 22
// 
// Returns: "52"
// 
// 4)
// 6
// 464
// 
// Returns: "257936"
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef string ST;
typedef stringstream SS;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef vector <string> vs;

#define Pf	printf
#define	Sf	scanf

#define	ep	1e-9
#define PI M_PI
#define E M_E

#define	CL(a, b)	memset(a, b, sizeof(a))
#define	mp	make_pair

#define	pb	push_back

#define	all(c)	(c).begin(), (c).end()
#define	tr(i, c)	for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())	//vector & list//

#define forn(i, n)	for(int i = 0, loop_ends_here = (int)n; i < loop_ends_here; i++)
#define forab(i, a, b)	for(int i = a, loop_ends_here = (int) b; i <= loop_ends_here; i++)
#define rep(i, a, b)	for(int i = a, loop_ends_here = (int)b; i>=loop_ends_here; i--)

#define read(n)		scanf("%d", &n)
#define write(n)	printf("%d ", n)
#define writeln(n)	printf("%d\n", n)

class ConcatenateNumber
{
public:
	int getSmallest(int number, int k);
};


int ConcatenateNumber::getSmallest (int _N, int _K) 
{
	int64 N = _N, K = _K;
	int64 len = 1;
	
	int64 n = N;
	while(n > 0) {
		len *= 10ll;
		n /= 10;
	}

	set <int64> s;
//	cout << "len = " << len << endl << endl;;

	int64 mod = N%K;

//	Pf("i = 1, mod = %lld\n", mod);

	if(mod == 0ll)
		return 1ll;
	s.insert(mod);

	forab(i, 2, 1e9) {
		mod = ((mod*len) % K + (N % K ))%K;
		
//		Pf("i = %d, mod = %lld\n",i, mod);

		if(s.find(mod) != s.end())
			return -1;
		if(mod == 0ll)
			return i;
		s.insert(mod);
	}
	
	return len;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	ConcatenateNumber *obj;
	int answer;
	obj = new ConcatenateNumber();
	clock_t startTime = clock();
	answer = obj->getSmallest(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	p0 = 2;
	p1 = 9;
	p2 = 9;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 121;
	p1 = 11;
	p2 = 1;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 1;
	p1 = 2;
	p2 = -1;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 35;
	p1 = 98765;
	p2 = 9876;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 1000000000;
	p1 = 3;
	p2 = 3;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Given a positive integer number, concatenate one or more copies of number to create an integer that is divisible by k.  Do not add any leading zeroes.  Return the least number of copies needed, or -1 if it is impossible.
// 
// DEFINITION
// Class:ConcatenateNumber
// Method:getSmallest
// Parameters:int, int
// Returns:int
// Method signature:int getSmallest(int number, int k)
// 
// 
// CONSTRAINTS
// -number will be between 1 and 1,000,000,000, inclusive.
// -k will be between 1 and 100,000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 2
// 9
// 
// Returns: 9
// 
// At least 9 copies are needed, since 222222222 is divisible by 9.
// 
// 1)
// 121
// 11
// 
// Returns: 1
// 
// 121 is divisible by 11.
// 
// 2)
// 1
// 2
// 
// Returns: -1
// 
// You can never get an even number by concatenating only 1's.
// 
// 3)
// 35
// 98765
// 
// Returns: 9876
// 
// The resulting integer could be really big.
// 
// 4)
// 1000000000
// 3
// 
// Returns: 3
// 
// 
// 
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

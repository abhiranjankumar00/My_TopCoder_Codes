#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef string ST;
typedef stringstream SS;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef vector <string> vs;

#define endl 		("\n")
#define DEBUG(x)	cout << #x << " = " << x << "\n"
#define Pf		printf
#define	Sf		scanf

#define	ep		1e-9
#define PI		M_PI
#define E 		M_E

#define	CL(a, b)	memset(a, b, sizeof(a))
#define	mp		make_pair
#define	pb		push_back

#define	all(c)		(c).begin(), (c).end()
#define	tr(i, c)	for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())		//vector & list//

#define forn(i, n)	for(int i = 0, loop_ends_here = (int)n; i < loop_ends_here ; i++)
#define forab(i, a, b)	for(int i = a, loop_ends_here = (int)b; i <= loop_ends_here; i++)
#define rep(i, a, b)	for(int i = a, loop_ends_here = (int)b; i >= loop_ends_here; i--)

#define read(n)		scanf("%d", &n)
#define write(n)	printf("%d ", n)
#define writeln(n)	printf("%d\n", n)

class CorrectMultiplication
{
public:
	long long getMinimum(int a, int b, int c);
};

int64 ans;
const int range = 5e2+1;
//const int range = 1e3+111;
int64 a, b, c;

void correctAns(int64 A, int64 B, int64 C) {
	ans = min(ans, abs(A-a) + abs(B-b) + abs(C-c));
	ans = min(ans, abs(B-a) + abs(A-b) + abs(C-c));
}

void check(int64 C) {
	for(int a = 1; a*a <= C; a++)	if(C % a == 0) {
		correctAns(a, C/a, C);
	}
}

long long CorrectMultiplication::getMinimum (int _a, int _b, int _c) 
{
	a = _a, b = _b, c = _c;
	ans = 1e16;

	forn(i, range) {
		if(i >= ans)
			break;
		if(c - i > 0)
			check(c-i);
		check(c+i);
	}

	return ans;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, bool hasAnswer, long long p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2;
	cout << "]" << endl;
	CorrectMultiplication *obj;
	long long answer;
	obj = new CorrectMultiplication();
	clock_t startTime = clock();
	answer = obj->getMinimum(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	long long p3;
	
	{
	// ----- test 0 -----
	p0 = 19;
	p1 = 28;
	p2 = 522;
	p3 = 2ll;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 10;
	p1 = 30;
	p2 = 500;
	p3 = 11ll;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 11111;
	p1 = 11111;
	p2 = 123454321;
	p3 = 0ll;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 1000;
	p1 = 100;
	p2 = 10;
	p3 = 1089ll;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 399;
	p1 = 522;
	p2 = 199999;
	p3 = 24ll;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Krolik found a sheet of paper with an equation containing three positive integers: 
// "a * b = c". 
// This equation might be wrong, 
// so Krolik is trying to make it correct by adjusting the numbers a, b, and c. 
// 
// You are given three ints a, b, and c. 
// Return a long long containing the minimum value of |A - a| + |B - b| + |C - c|, 
// where A, B, and C are positive integers satisfying A * B = C. 
// 
// 
// DEFINITION
// Class:CorrectMultiplication
// Method:getMinimum
// Parameters:int, int, int
// Returns:long long
// Method signature:long long getMinimum(int a, int b, int c)
// 
// 
// NOTES
// -|x| is the absolute value of x (which is x for non-negative x and (-x) for negative x). 
// 
// 
// CONSTRAINTS
// -a, b, and c will each be between 1 and 1,000,000,000, inclusive. 
// 
// 
// EXAMPLES
// 
// 0)
// 19
// 28
// 522
// 
// Returns: 2
// 
// By assigning A = 18, B = 29, and C = 522 the value of |A - a| + |B - b| + |C - c| is minimized. 
// 
// 
// 1)
// 10
// 30
// 500
// 
// Returns: 11
// 
// 2)
// 11111
// 11111
// 123454321
// 
// Returns: 0
// 
// 3)
// 1000
// 100
// 10
// 
// Returns: 1089
// 
// Note that A, B, and C must be positive integers. 
// 
// 
// 4)
// 399
// 522
// 199999
// 
// Returns: 24
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

#include <bits/stdc++.h>
using namespace std;

class CreatePairs
{
public:
	int maximalSum(vector <int> data);
};

int CreatePairs::maximalSum (vector <int> data) 
{
	int ret;
	
	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	CreatePairs *obj;
	int answer;
	obj = new CreatePairs();
	clock_t startTime = clock();
	answer = obj->maximalSum(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	int p1;
	
	{
	// ----- test 0 -----
	int t0[] = {0,1,2,4,3,5};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 27;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {-1,1,2,3};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 6;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {-1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = -1;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {-1,0,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {1,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// You are given a list of integers, and you are allowed to group elements into pairs.  Each element must either belong to a single pair or remain unpaired.  Sum the products of the pairs with the values of the unpaired elements.  Your goal is to maximize this sum.
// 
// 
// For example, consider the list {0, 1, 2, 4, 3, 5}.  If you make the pairs (2, 3) and (4, 5), the sum is 0 + 1 + (2 * 3) + (4 * 5) = 27.
// 
// 
// You are given a vector <int> data containing the list of integers.  Return the maximum possible sum.
// 
// 
// 
// DEFINITION
// Class:CreatePairs
// Method:maximalSum
// Parameters:vector <int>
// Returns:int
// Method signature:int maximalSum(vector <int> data)
// 
// 
// CONSTRAINTS
// -data will contain between 1 and 50 elements, inclusive.
// -Each element of data will be between -1000 and 1000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {0, 1, 2, 4, 3, 5}
// 
// Returns: 27
// 
// The example from the problem statement.
// 
// 1)
// {-1, 1, 2, 3}
// 
// Returns: 6
// 
// If we create a pair (2, 3) we get the sum (-1) + 1 + (2 * 3) = 6.
// 
// 2)
// {-1}
// 
// Returns: -1
// 
// No pairs can be created, so the answer is -1.
// 
// 3)
// {-1, 0, 1}
// 
// Returns: 1
// 
// In this case we can create a pair (-1, 0) to make the sum equal to (-1) * 0 + 1 = 1.
// 
// 4)
// {1, 1}
// 
// Returns: 2
// 
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

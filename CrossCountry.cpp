#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef string ST;
typedef stringstream SS;

#define Pf	printf
#define	Sf	scanf

#define ep 1e-9
#define CL(a, b)	memset(a, b, sizeof(a))

#define pb	push_back
#define mp	make_pair
#define	SZ(a)	int((a).size())

#define	all(c)	(c).begin(), (c).end()
#define tr(i, c)	for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())	//vector & list//

#define forn(i, n)	for(int i = 0; i < n; i++)
#define forab(i, a, b)	for(int i = a; i <= b; i++)
#define rep(i, a, b)	for(int i = a; i>=b; i--)

ST orde

class CrossCountry
{
public:
	string scoreMeet(int numTeams, string finishOrder)
	{
		string ret;
		vi v(numTeams);
		vi sum(numTeams);
		
		forn(i, order)
		
		return ret;
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, string p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << "\"" << p1 << "\"";
	cout << "]" << endl;
	CrossCountry *obj;
	string answer;
	obj = new CrossCountry();
	clock_t startTime = clock();
	answer = obj->scoreMeet(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	string p1;
	string p2;
	
	{
	// ----- test 0 -----
	p0 = 2;
	p1 = "AABBABBABBA";
	p2 = "AB";
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 3;
	p1 = "CCCBBBBBAAACC";
	p2 = "BC";
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 4;
	p1 = "ABDCBADBDCCDBCDBCAAAC";
	p2 = "BDCA";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 10;
	p1 = "BDHCEAJBIDBCCHGCBDJEBAAHEGAGGADHGIECJEHAEBDADJCDHG";
	p2 = "BCDAHEG";
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 3;
	p1 = "BABCAABABAB";
	p2 = "AB";
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// You are the coach of a high school cross country team.  You are hosting a cross country meet at your school this weekend, and you need to be ready to score the meet.  Since it is a bit of a pain to do by hand, especially for large meets, you are going to write a program to do it for you.  Given the number of teams and the order in which the runners finish, determine the order in which each team places.
// Capital letters will represent the teams in finishOrder and in the return value.  The first team is 'A', the second team is 'B', and so on.  The place in which the five fastest runners on a team finish is added together (first place=1, second place=2, etc...), and that is the team's score (a team must have at least five runners finish to place).  Lower scores beat higher scores, and in the event of a tie the sixth fastest runners of each team are compared, and the team whose sixth fastest runner finished earlier wins the tie.  If two teams tie and only one has a sixth runner, that team wins the tie.  If two teams tie and neither has a sixth runner, the team who's letter comes first alphabetically wins the tie.
// You will be given an int, numTeams, which is the number of teams competing, and a string, finishOrder, which is the order in which the runners finish.  You are to return a string that lists the teams in the order they placed in the meet.  If a team has fewer than 5 runners finish, do not include it in the return value.
// For example, if finishOrder="AABBABBABBA", then team A's runners finish 1st, 2nd, 5th, 8th, and 11th, for a team score of 27 points.  Team B's runners finish 3rd, 4th, 6th, 7th, 9th, and 10th, for a team score of 29 points (notice that only team B's first 5 runners are scored).  In this case the return value would be "AB".
// 
// DEFINITION
// Class:CrossCountry
// Method:scoreMeet
// Parameters:int, string
// Returns:string
// Method signature:string scoreMeet(int numTeams, string finishOrder)
// 
// 
// NOTES
// -If a team has fewer than 5 runners finish, don't remove that team's runners from finishOrder before calculating the score of the other teams.
// 
// 
// CONSTRAINTS
// -numTeams will be between 2 and 10, inclusive.
// -finishOrder will be between 10 and 50 characters, inclusive.
// -finishOrder will contain only the first numTeams capital letters ('A','B',...).
// -finishOrder will not contain more than seven occurrences of the same character.
// 
// 
// EXAMPLES
// 
// 0)
// 2
// "AABBABBABBA"
// 
// Returns: "AB"
// 
// The example from above.
// 
// 1)
// 3
// "CCCBBBBBAAACC"
// 
// Returns: "BC"
// 
// In this case team A does not qualify because only 3 of its runners finish.  Team B beats team C with a score of 30-31.  Remember not to remove team A's runners, doing this would have team C win over team B with a score of 25-30.
// 
// 2)
// 4
// "ABDCBADBDCCDBCDBCAAAC"
// 
// Returns: "BDCA"
// 
// 3)
// 10
// "BDHCEAJBIDBCCHGCBDJEBAAHEGAGGADHGIECJEHAEBDADJCDHG"
// 
// Returns: "BCDAHEG"
// 
// 4)
// 3
// "BABCAABABAB"
// 
// Returns: "AB"
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

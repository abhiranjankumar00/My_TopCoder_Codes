#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
using namespace std;

#define	all(c)	(c).begin(), (c).end()
#define	tr(i, c)	for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

class CubeStickers
{
public:
	string isPossible(vector <string> sticker)
	{
        int twoSum = 0, oneSum = 0;
        map <string, int> mp;
        for(int i = 0; i < (int)sticker.size(); ++i) {
            mp[sticker[i]]++;
        }
        for(auto it = (mp).begin(); it != (mp).end(); ++it) {
            if(it->second == 1)
                oneSum++;
            else
                twoSum+=2;
        }
        return twoSum + oneSum >= 6 ? "YES" : "NO";
	}
};



// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	CubeStickers *obj;
	string answer;
	obj = new CubeStickers();
	clock_t startTime = clock();
	answer = obj->isPossible(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	string p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"cyan","magenta","yellow","purple","black","white","purple"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "YES";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"blue","blue","blue","blue","blue","blue","blue","blue","blue","blue"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "NO";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"red","yellow","blue","red","yellow","blue","red","yellow","blue"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "YES";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"purple","orange","orange","purple","black","orange","purple"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "NO";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"white","gray","green","blue","yellow","red","target","admin"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "YES";
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// NOTE: This problem statement contains images that may not display properly if viewed outside of the applet.
// Fox Ciel has a cube and some colored stickers.  You are given a vector <string> sticker, where the i-th element is the color of the i-th sticker.  Ciel wants to choose six of these stickers and apply one on each of the cube's faces.  Each pair of adjacent faces must have different colors.  Two faces are considered adjacent if they share an edge.
// 
// If this is possible, return "YES", otherwise, return "NO" (all quotes for clarity).
// 
// 
// DEFINITION
// Class:CubeStickers
// Method:isPossible
// Parameters:vector <string>
// Returns:string
// Method signature:string isPossible(vector <string> sticker)
// 
// 
// CONSTRAINTS
// -sticker will contain between 6 and 50 elements, inclusive.
// -Each element of sticker will contain between 1 and 10 lowercase letters ('a'-'z'), inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {"cyan","magenta","yellow","purple","black","white","purple"}
// 
// Returns: "YES"
// 
// One of the possible ways is shown in the following picture:
// 
// 
// 
// 1)
// {"blue","blue","blue","blue","blue","blue","blue","blue","blue","blue"}
// 
// Returns: "NO"
// 
// 
// 
// 2)
// {"red","yellow","blue","red","yellow","blue","red","yellow","blue"}
// 
// Returns: "YES"
// 
// 
// 
// 3)
// {"purple","orange","orange","purple","black","orange","purple"}
// 
// Returns: "NO"
// 
// 
// 
// 4)
// {"white","gray","green","blue","yellow","red","target","admin"}
// 
// Returns: "YES"
// 
// 
// 
// END KAWIGIEDIT TESTING//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
//With unused code cleaner (beta) by ahmed_aly

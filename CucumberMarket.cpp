#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef string ST;
typedef stringstream SS;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef vector <string> vs;

#define endl 		("\n")
#define DEBUG(x)	cout << #x << " = " << x << "\n"
#define Pf		printf
#define	Sf		scanf

#define	ep		1e-9
#define PI		M_PI
#define E 		M_E

#define	CL(a, b)	memset(a, b, sizeof(a))
#define	mp		make_pair
#define	pb		push_back

#define	all(c)		(c).begin(), (c).end()
#define	tr(i, c)	for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())		//vector & list//

#define forn(i, n)	for(int i = 0, loop_ends_here = (int)n; i < loop_ends_here ; i++)
#define forab(i, a, b)	for(int i = a, loop_ends_here = (int)b; i <= loop_ends_here; i++)
#define rep(i, a, b)	for(int i = a, loop_ends_here = (int)b; i >= loop_ends_here; i--)

#define read(n)		scanf("%d", &n)
#define write(n)	printf("%d ", n)
#define writeln(n)	printf("%d\n", n)

class CucumberMarket
{
public:
	string check(vector <int> price, int budget, int k);
};


string CucumberMarket::check (vector <int> price, int budget, int k) 
{
	sort(all(price));
	reverse(all(price));
	int sum = 0;
	forn(i, k) {
			sum += price[i];
	}
	return sum <= budget ? "YES" : "NO";

}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, int p2, bool hasAnswer, string p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << p1 << "," << p2;
	cout << "]" << endl;
	CucumberMarket *obj;
	string answer;
	obj = new CucumberMarket();
	clock_t startTime = clock();
	answer = obj->check(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p3 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	int p1;
	int p2;
	string p3;
	
	{
	// ----- test 0 -----
	int t0[] = {1000,1,10,100};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1110;
	p2 = 3;
	p3 = "YES";
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {1000,1,10,100};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1109;
	p2 = 3;
	p3 = "NO";
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {33,4};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 33;
	p2 = 1;
	p3 = "YES";
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {1,1,1,1,1,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	p2 = 4;
	p3 = "NO";
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {1000,1000,1000,1000,1000,1000,1000,1000,1000};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 10000;
	p2 = 9;
	p3 = "YES";
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// Cucumber Boy is young and loves cucumbers.  Therefore, Cucumber Boy will go to the cucumber market to buy some cucumbers.
// 
// Different cucumbers may have different costs.  For each i, buying the i-th cucumber (0-based index) costs price[i] yen.
// 
// Cucumber Boy's mother gave him budget yen.  However, he does not understand money well.
// He just chooses some k unique cucumbers he likes.  If the total price of the chosen cucumbers is not greater than budget yen, he can buy them, otherwise he cannot.
// 
// You are given the vector <int> price, the int budget and the int k.  Your method must return "YES" (quotes for clarity) if Cucumber Boy can buy any set of k unique cucumbers, and "NO" if there is some set of k cucumbers that is too expensive for him.
// 
// 
// 
// DEFINITION
// Class:CucumberMarket
// Method:check
// Parameters:vector <int>, int, int
// Returns:string
// Method signature:string check(vector <int> price, int budget, int k)
// 
// 
// CONSTRAINTS
// -price will contain between 1 and 9 elements, inclusive.
// -Each element of price will be between 1 and 1000, inclusive.
// -budget will be between 1 and 10000, inclusive.
// -k will be between 1 and the number of elements in price, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {1000,1,10,100}
// 1110
// 3
// 
// Returns: "YES"
// 
// There are 4 choices.
// 
// If he chooses cucumbers 0, 1, and 2, the total price will be 1000+1+10 = 1011 yen.
// If he chooses cucumbers 0, 1, and 3, the total price will be 1000+1+100 = 1101 yen.
// If he chooses cucumbers 0, 2, and 3, the total price will be 1000+10+100 = 1110 yen.
// If he chooses cucumbers 1, 2, and 3, the total price will be 1+10+100 = 111 yen.
// 
// The result is "YES", because Cucumber Boy can buy any set of k unique cucumbers.
// 
// 
// 1)
// {1000,1,10,100}
// 1109
// 3
// 
// Returns: "NO"
// 
// This case is the same as the example 0, except for the value of budget. 
// 
// If he chooses cucumbers 0, 2, and 3, the total price will be 1000+10+100 = 1110 yen.
//  1110 yen is greater than the budget therefore the result is "NO".
// 
// 2)
// {33,4}
// 33
// 1
// 
// Returns: "YES"
// 
// 
// 
// 3)
// {1,1,1,1,1,1}
// 2
// 4
// 
// Returns: "NO"
// 
// 
// 
// 4)
// {1000,1000,1000,1000,1000,1000,1000,1000,1000}
// 10000
// 9
// 
// Returns: "YES"
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

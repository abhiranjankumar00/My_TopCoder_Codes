#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef string ST;
typedef stringstream SS;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef vector <string> vs;

#define Pf	printf
#define	Sf	scanf

#define	ep	1e-9
#define PI M_PI
#define E M_E

#define	CL(a, b)	memset(a, b, sizeof(a))
#define	mp	make_pair

#define	pb	push_back

#define	all(c)	(c).begin(), (c).end()
#define	tr(i, c)	for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())	//vector & list//

#define forn(i, n)	for(int i = 0, loop_ends_here = (int)n; i < loop_ends_here; i++)
#define forab(i, a, b)	for(int i = a, loop_ends_here = (int) b; i <= loop_ends_here; i++)
#define rep(i, a, b)	for(int i = a, loop_ends_here = (int)b; i>=loop_ends_here; i--)

class Cut
{
	int ret;
/*
	bool _cut(vi &len, int &cut) {
		bool ans = false;
		tr(it, len)	if(*it == 10) {
			ret++;
			*it = 0;
		}
		tr(it, len)
			if(*it > 0 && *it % 10 == 0 && *it/10 - 1 <= cut) {
				Pf("#1: len = %d, cut = %d, cuts added = %d, new cut = %d\n", *it, cut, *it/10, cut - (*it/10 - 1));
				ans = true;
				ret += *it/10;
				*it = 0;
				cut = cut - (*it/10 - 1);
			}

		tr(it, len) {
			while(cut && *it >= 10) {
				Pf("#2: len = %d, cut = %d, cuts added = %d, new cut = %d\n", *it, cut, *it/10, cut - 1);
				ret++;
				cut--;
				*it -= 10;
			}
		}

		return ans;
	}
*/
public:
	int getMaximum(vector <int> len, int maxCuts)
	{
		ret = 0;
		sort(all(len));

		tr(it, len)	if(*it == 10) {
			Pf("#0: old elem = %d, new elem = %d, old ret = %d, new ret = %d, old cut = %d, new cut = %d\n", *it, 0, ret, ret+1, maxCuts, maxCuts);
			*it = 0;
			ret++;
		}

		tr(it, len)	if(*it > 0 && *it%10 == 0 && *it/10-1 <= maxCuts) {
			Pf("#1: old elem = %d, new elem = %d, old ret = %d, new ret = %d, old cut = %d, new cut = %d\n", *it, 0, ret, ret+*it/10, maxCuts, maxCuts - (*it/10-1));
			ret += *it/10;
			maxCuts = maxCuts - (*it/10 - 1);
			*it = 0;
		}

		tr(it, len) {
			while(maxCuts > 0 && *it >= 10) {
			Pf("#2: old elem = %d, new elem = %d, old ret = %d, new ret = %d, old cut = %d, new cut = %d\n", *it, 0, ret, ret+*it/10, maxCuts, maxCuts - (*it/10-1));
				*it -= 10;
				maxCuts--;
				ret++;
			}
		}

//		_cut(len, maxCuts);
		
		return ret;
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	Cut *obj;
	int answer;
	obj = new Cut();
	clock_t startTime = clock();
	answer = obj->getMaximum(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	int t0[] = {13,20,13};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	p2 = 3;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {5,5,5,5};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	p2 = 0;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {34,10,48};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4;
	p2 = 5;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {30,50,30,50};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 350;
	p2 = 16;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Fox Ciel wants to eat eels as a celebration of this year's end.
// 
// Initially, Ciel has some eels of various lengths. She only likes to eat eels of length exactly 10, no more, no less.
// Before she eats, she may cut the eels to prepare pieces of desired length. However, she only has the time to make at most maxCuts cuts. A single cut looks as follows:
// 
// Fox Ciel chooses one of the eels. Let its length be x. She can only choose an eel of length greater than 1.
// She chooses an integer y such that 0 < y < x.
// She cuts the eel into two pieces so that one of them measures exactly y.
// In other words, instead of one eel of length x she now has two eels of lengths y and (x-y), respectively.
// 
// 
// You are given a vector <int> eelLengths. Each element of eelLengths is the length of one of the eels Ciel has at the beginning.
// You are also given the int maxCuts.
// Return the maximum number of eels of length exactly 10 she can produce.
// 
// DEFINITION
// Class:Cut
// Method:getMaximum
// Parameters:vector <int>, int
// Returns:int
// Method signature:int getMaximum(vector <int> eelLengths, int maxCuts)
// 
// 
// CONSTRAINTS
// -eelLengths will contain between 1 and 50 elements, inclusive.
// -Each element of eelLengths will be between 1 and 1,000, inclusive.
// -maxCuts will be between 1 and 1,000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {13, 20, 13}
// 2
// 
// Returns: 3
// 
// One optimal solution looks as follows:
// 
// First, cut eel 0 into two pieces of lengths 10 and 3. Next, cut eel 1 into two equal parts of length 10 each. This produces a total of 3 eels whose length is 10.
// 
// 
// 
// 1)
// {5, 5, 5, 5}
// 2
// 
// Returns: 0
// 
// There are four eels whose length is 5.
// As you cannot combine eels, it is impossible to make an eel of length 10.
// 
// 2)
// {34, 10, 48}
// 4
// 
// Returns: 5
// 
// She already has one eel of length 10. By cutting the other two eels she can produce four more eels of the desired length.
// 
// 3)
// {30, 50, 30, 50}
// 350
// 
// Returns: 16
// 
// She may cut eels at most 350 times, but in this case she doesn't have to cut them so many times.
// 
// END KAWIGIEDIT TESTING




//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef string ST;
typedef stringstream SS;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef vector <string> vs;

#define endl 		("\n")
#define DEBUG(x)	cout << #x << " = " << x << "\n"
#define Pf		printf
#define	Sf		scanf

#define	ep		1e-9
#define PI		M_PI
#define E 		M_E

#define	CL(a, b)	memset(a, b, sizeof(a))
#define	mp		make_pair
#define	pb		push_back

#define	all(c)		(c).begin(), (c).end()
#define	tr(i, c)	for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())		//vector & list//

#define forn(i, n)	for(int i = 0, loop_ends_here = (int)n; i < loop_ends_here ; i++)
#define forab(i, a, b)	for(int i = a, loop_ends_here = (int)b; i <= loop_ends_here; i++)
#define rep(i, a, b)	for(int i = a, loop_ends_here = (int)b; i >= loop_ends_here; i--)

#define read(n)		scanf("%d", &n)
#define write(n)	printf("%d ", n)
#define writeln(n)	printf("%d\n", n)

class CuttingBitString
{
public:
	int getmin(string S);
};

bool isDivisible(ST s) {
	if(st.size() == 0)
		return false;

	if(s[0] == '0')
		return false;

	int64 val = 0;
	int64 pow = 1;

	rep(i, s.size()-1, 0) {
		val = val + pow*(s[i] == '1' ? 1 : 0);
		pow *= 2;
	}

	if(val == 0)
		return false;
	while(val > 1 && val % 5 == 0)
		val /= 5;

	return val == 1 ? true : false;
}

int Ans[55];




int CuttingBitString::getmin (string S) 
{
	CL(Ans, -1);
/*
	int dp[S.size()];
	CL(dp, -1);

	forn(i, S.size()) {
//		Pf("[%d, %d] = %s\n", 0, i, S.substr(0, i+1).c_str());
		if( isDivisible(S.substr(0, i+1)))
			dp[i] = 1;

		forn(j, i)	if(dp[j] > -1 && isDivisible(S.substr(j+1, i-j)))
			dp[i] = dp[i] == -1 ? dp[j] + 1 : min(dp[i], dp[j]+1);

	}

	cout << endl;
	forn(i, S.size()) {
		Pf("%d: %d, \t", i, dp[i]);
	}
	cout << endl;

	return dp[S.size() -1];
*/
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	CuttingBitString *obj;
	int answer;
	obj = new CuttingBitString();
	clock_t startTime = clock();
	answer = obj->getmin(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	int p1;
	
	{
	// ----- test 0 -----
	p0 = "101101101";
	p1 = 3;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "1111101";
	p1 = 1;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "00000";
	p1 = -1;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "110011011";
	p1 = 3;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "1000101011";
	p1 = -1;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = "111011100110101100101110111";
	p1 = 5;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// We are in a distant future.
// After the downfall of mankind, the Earth is now ruled by fairies.
// The "Turing game Online" website is hot among fairies right now.
// On this website, everyone can play the programming puzzle "Turing game".
// 
// Fairies love powers of 5, that is, the numbers 1, 5, 25, 125, 625, and so on.
// In the Turing game, the player is given a string of bits (zeros and ones).
// The ideal situation is when the string is represents a power of 5 in binary, with no leading zeros.
// If that is not the case, the fairy player tries to cut the given string into pieces, each piece being a binary representation of a power of 5, with no leading zeros.
// Of course, it may be the case that even this is impossible.
// In that case, the fairy player becomes depressed, and bad things happen when a fairy gets depressed.
// You, as one of the surviving humans, are in charge of checking the bit strings to prevent the bad things from happening.
// 
// You are given a string S that consists of characters '0' and '1' only.
// S represents the string given to a player of the Turing game.
// Return the smallest positive integer K such that it is possible to cut S into K pieces, each of them being a power of 5.
// If there is no such K, return -1 instead.
// 
// DEFINITION
// Class:CuttingBitString
// Method:getmin
// Parameters:string
// Returns:int
// Method signature:int getmin(string S)
// 
// 
// CONSTRAINTS
// -S will contain between 1 and 50 characters, inclusive.
// -Each character in S will be either '0' or '1'.
// 
// 
// EXAMPLES
// 
// 0)
// "101101101"
// 
// Returns: 3
// 
// We can split the given string into three "101"s.
// Note that "101" is 5 in binary.
// 
// 1)
// "1111101"
// 
// Returns: 1
// 
// "1111101" is 5^3.
// 
// 2)
// "00000"
// 
// Returns: -1
// 
// 0 is not a power of 5.
// 
// 3)
// "110011011"
// 
// Returns: 3
// 
// Split it into "11001", "101" and "1".
// 
// 4)
// "1000101011"
// 
// Returns: -1
// 
// 
// 
// 5)
// "111011100110101100101110111"
// 
// Returns: 5
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

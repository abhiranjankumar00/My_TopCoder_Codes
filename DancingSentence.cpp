#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef string ST;
typedef stringstream SS;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef vector <string> vs;

#define endl 		("\n")
#define DEBUG(x)	cout << #x << " = " << x << "\n"
#define Pf		printf
#define	Sf		scanf

#define	ep		1e-9
#define PI		M_PI
#define E 		M_E

#define	CL(a, b)	memset(a, b, sizeof(a))
#define	mp		make_pair
#define	pb		push_back

#define	all(c)		(c).begin(), (c).end()
#define	tr(i, c)	for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())		//vector & list//

#define forn(i, n)	for(int i = 0, loop_ends_here = (int)n; i < loop_ends_here ; i++)
#define forab(i, a, b)	for(int i = a, loop_ends_here = (int)b; i <= loop_ends_here; i++)
#define rep(i, a, b)	for(int i = a, loop_ends_here = (int)b; i >= loop_ends_here; i--)

#define read(n)		scanf("%d", &n)
#define write(n)	printf("%d ", n)
#define writeln(n)	printf("%d\n", n)

class DancingSentence
{
public:
	string makeDancing(string sentence);
};


string DancingSentence::makeDancing (string sentence) 
{
	int idx = -1;

	forn(i, sentence.size()) if(sentence[i] != ' ') {
		idx++;

		if(idx % 2 == 0)
			sentence[i] = toupper(sentence[i]);
		else
			sentence[i] = tolower(sentence[i]);
	}
	return sentence;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	DancingSentence *obj;
	string answer;
	obj = new DancingSentence();
	clock_t startTime = clock();
	answer = obj->makeDancing(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	string p1;
	
	{
	// ----- test 0 -----
	p0 = "This is a dancing sentence";
	p1 = "ThIs Is A dAnCiNg SeNtEnCe";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = " This   is         a  dancing   sentence  ";
	p1 = " ThIs   Is         A  dAnCiNg   SeNtEnCe  ";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "aaaaaaaaaaa";
	p1 = "AaAaAaAaAaA";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "z";
	p1 = "Z";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// A sentence is called dancing if its first letter is uppercase and the case of each subsequent letter is the opposite of the previous letter. Spaces should be ignored when determining the case of a letter.  For example, "A b  Cd" is a dancing sentence because the first letter ('A') is uppercase, the next letter ('b') is lowercase, the next letter ('C') is uppercase, and the next letter ('d') is lowercase.
// You will be given a string sentence. Turn the sentence into a dancing sentence by changing the cases of the letters where necessary.  All spaces in the original sentence must be preserved.
// 
// DEFINITION
// Class:DancingSentence
// Method:makeDancing
// Parameters:string
// Returns:string
// Method signature:string makeDancing(string sentence)
// 
// 
// CONSTRAINTS
// -sentence will contain between 1 and 50 characters, inclusive.
// -Each character in sentence will be a letter ('A'-'Z','a'-'z') or a space (' ').
// -sentence will contain at least one letter ('A'-'Z','a'-'z').
// 
// 
// EXAMPLES
// 
// 0)
// "This is a dancing sentence"
// 
// Returns: "ThIs Is A dAnCiNg SeNtEnCe"
// 
// 1)
// " This   is         a  dancing   sentence  "
// 
// Returns: " ThIs   Is         A  dAnCiNg   SeNtEnCe  "
// 
// Spaces should be ignored when determining the cases of the letters, but they should be preserved in the return value.
// 
// 2)
// "aaaaaaaaaaa"
// 
// Returns: "AaAaAaAaAaA"
// 
// 3)
// "z"
// 
// Returns: "Z"
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

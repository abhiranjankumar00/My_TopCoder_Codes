#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
#include <iterator>
#include <fstream>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef string ST;
typedef stringstream SS;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef vector <string> vs;

#define DEBUG(x)	cout << #x << " = " << x << "\n"
#define endl 		("\n")

#define	ep		1e-9
#define PI		M_PI
#define E 		M_E

#define	CL(a, b)	memset(a, b, sizeof(a))
#define	mp		make_pair
#define	pb		push_back

#define	all(c)		(c).begin(), (c).end()
#define	tr(i, c)	for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())		//vector & list//

#define forn(i, n)	for(int i = 0, loop_ends_here = (int)n; i < loop_ends_here ; i++)
#define forab(i, a, b)	for(int i = a, loop_ends_here = (int)b; i <= loop_ends_here; i++)
#define rep(i, a, b)	for(int i = a, loop_ends_here = (int)b; i >= loop_ends_here; i--)

#define Pf		printf
#define	Sf		scanf

#define read(n)		scanf("%d", &n)
#define write(n)	printf("%lld ", n)
#define writeln(n)	printf("%d\n", n)

/*
#ifdef DEBUG
	#undef DEBUG
#endif
#define DEBUG
*/

class Display
{
public:
	vector <string> transform(vector <int> x, vector <int> y);
};

int64 Round(double d)	{	return floor(d+0.5);	}

void scale(vector <long long> &v) {
	int64 mn = *min_element(all(v)), mx = *max_element(all(v));
	
	tr(it, v)
		*it -= mn;
		
	mx = *max_element(all(v));
	
	tr(it, v)
		*it = Round((*it * 1000) / mx);
}


vector <string> Display::transform (vector <int> x, vector <int> y) 
{
	vector <long long> X, Y;
	tr(it, x)	X.pb((int64)*it);
	tr(it, y)	Y.pb((int64)*it);
	scale(X);
	scale(Y);
	vector <string> ret;

	forn(i, X.size()) {
		SS ss;
		ss << X[i] << " " << Y[i];
		ret.pb(ss.str());
	}
	
	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, bool hasAnswer, vector <string> p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	Display *obj;
	vector <string> answer;
	obj = new Display();
	clock_t startTime = clock();
	answer = obj->transform(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p2.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << "\"" << p2[i] << "\"";
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << answer[i] << "\"";
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p2.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p2[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <int> p1;
	vector <string> p2;
	
	{
	// ----- test 0 -----
	int t0[] = {-53,652,-6132,673,74,-473,373,736363,234,234,234};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {-6464,36464,-43,373,363,-37633,2022,-644,2520,2520,2520};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"8 421","9 1000","0 507","9 513","8 513","8 0","9 535","1000 499","9 542","9 542","9 542"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// We want to display a scatterplot in a 1000x1000 window.  However, our points may have x and y values anywhere between -1,000,000,000 and 1,000,000,000.  So, in order to display our data in a reasonable fashion, we want to make it fit in the window.  Your task is, given the x and y values of the data, scale and translate the data so that the lowest x value is 0, and the highest is 1000.  Do the same thing for the y values, being careful to preserve the relative distances in both the x and y directions.  For example, if x = {-100, 0, 50, 100}, then it should be changed to {0,500,750,1000}.  Note that changing the points may result in non-integral values, which should be rounded to the nearest integer (.5 rounds up).  The return value should be a vector <string>, each of whose elements is formatted as "<x> <y>", where <x> and <y> are the scaled and translated values of the corresponding elements of the input.  <x> and <y> should be separated by exactly one space and have no extra leading zeros.
// 
// DEFINITION
// Class:Display
// Method:transform
// Parameters:vector <int>, vector <int>
// Returns:vector <string>
// Method signature:vector <string> transform(vector <int> x, vector <int> y)
// 
// 
// CONSTRAINTS
// -Each element of x and y will be between -1,000,000,000 and 1,000,000,000, inclusive.
// -x will contain at least two distinct values.
// -y will contain at least two distinct values.
// -x and y will contain the same number of elements.
// -x and y will each contain between 2 and 50 elements, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {-100, 0, 50, 100}
// {-100, 0, 50, 100}
// 
// Returns: { "0 0",  "500 500",  "750 750",  "1000 1000" }
// 
// If we translate all the points +100 in both the x and y directions, and then scale all the coordinates up by a factor of 5, we find that they meet our requirements.
// 
// 1)
// {0,2000,1}
// {0,2001,1}
// 
// Returns: { "0 0",  "1000 1000",  "1 0" }
// 
// 2)
// {-1000000000,1000000000,500000,499999}
// {-1000000000,1000000000,500000,499999}
// 
// Returns: { "0 0",  "1000 1000",  "500 500",  "500 500" }
// 
// 3)
// {-53,652,-6132,673,74,-473,373,736363,234,234,234}
// {-6464,36464,-43,373,363,-37633,2022,-644,2520,2520,2520}
// 
// Returns: { "8 421",  "9 1000",  "0 507",  "9 513",  "8 513",  "8 0",  "9 535",  "1000 499",  "9 542",  "9 542",  "9 542" }
// 
// 4)
// {0,1001,2000}
// {0,999,2000}
// 
// Returns: { "0 0",  "501 500",  "1000 1000" }
// 
// Be sure to round up when the fractional part is .5.
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

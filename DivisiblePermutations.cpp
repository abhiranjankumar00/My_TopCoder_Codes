#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef string ST;
typedef stringstream SS;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef vector <string> vs;

#define endl 		("\n")
#define DEBUG(x)	cout << #x << " = " << x << "\n"
#define Pf		printf
#define	Sf		scanf

#define	ep		1e-9
#define PI		M_PI
#define E 		M_E

#define	CL(a, b)	memset(a, b, sizeof(a))
#define	mp		make_pair
#define	pb		push_back

#define	all(c)		(c).begin(), (c).end()
#define	tr(i, c)	for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())		//vector & list//

#define forn(i, n)	for(int i = 0, loop_ends_here = (int)n; i < loop_ends_here ; i++)
#define forab(i, a, b)	for(int i = a, loop_ends_here = (int)b; i <= loop_ends_here; i++)
#define rep(i, a, b)	for(int i = a, loop_ends_here = (int)b; i >= loop_ends_here; i--)

#define read(n)		scanf("%d", &n)
#define write(n)	printf("%d ", n)
#define writeln(n)	printf("%d\n", n)

class DivisiblePermutations
{
public:
	long long count(string N, int M);
};

// N.size() <= 15, M <= 50
int64 fact(int n) {	return n == 0 ? 1LL : n*fact(n-1);	}

ST N;
int sz;
int M ;
int64 Ans[1<<16][55];

int64 solve(int mask, int rem) {

	if(mask == 0)
		return rem == 0 ? 1 : 0;

	int64 &ret = Ans[mask][rem];

	if(ret > -1)
		return ret;

	ret = 0;

	forn(i, sz)	if(mask & (1<<i)) {



		int d = N[i] - '0';
		int newMask = mask & ~(1<<i);

		forn(j, M)
			if((j*10 + d) % M == rem)
				ret += solve(newMask, j);
	}

	return ret;
}

void solve2() {
	CL(Ans, 0);
	Ans[0][0] = 1;
	forab(i, 1, M-1)
		Ans[0][i] = 0;

	forn(mask, (1<<sz)) 	forn(rem, M){

		forn(i, sz)	if((mask & (1<<i)) == 0) {
			int d = N[i] - '0';
			int newMask = mask | (1<<i);

			Ans[newMask][(rem*10 + d)%M] += Ans[mask][rem];
		}
	}

}

long long DivisiblePermutations::count (string _N, int _M) 
{
	sort(all(_N));
	N = _N;
	M = _M;
	sz = N.size();
/*
	CL(Ans, -1);
	int64 ret = solve((1<<sz)-1, 0);
*/
	solve2();
	int64 ret = Ans[(1<<sz)-1][0];

	DEBUG(ret);

	forab(i, 1, 9) {
		int cnt = 0;
		tr(it, N )
			cnt += *it == i + '0' ? 1 : 0;
		ret /= fact(cnt);
	}

	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, int p1, bool hasAnswer, long long p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << p1;
	cout << "]" << endl;
	DivisiblePermutations *obj;
	long long answer;
	obj = new DivisiblePermutations();
	clock_t startTime = clock();
	answer = obj->count(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	int p1;
	long long p2;
	
	{
	// ----- test 0 -----
	p0 = "133";
	p1 = 7;
	p2 = 1ll;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "2753";
	p1 = 5;
	p2 = 6ll;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "1112225";
	p1 = 5;
	p2 = 20ll;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "123456789";
	p1 = 17;
	p2 = 21271ll;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "987654321999999";
	p1 = 39;
	p2 = 19960896ll;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// We define a permutation of an integer N as an integer that has the exact same digits as N, but possibly in a different order. Two permutations of N are considered different if the numbers they represent are not the same. For example, the set of all different permutations of the number N = 313 is {133, 313, 331}.
// Given a string N and an int M, determine the number of different permutations of N that are divisible by M.
// 
// 
// DEFINITION
// Class:DivisiblePermutations
// Method:count
// Parameters:string, int
// Returns:long long
// Method signature:long long count(string N, int M)
// 
// 
// CONSTRAINTS
// -N will contain between 1 and 15 non-zero digits ('1'-'9'), inclusive.
// -M will be between 1 and 50, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// "133"
// 7
// 
// Returns: 1
// 
// There are three permutations of 133 (133, 313, 331), but only 133 is divisible by 7.
// 
// 1)
// "2753"
// 5
// 
// Returns: 6
// 
// The permutations of 2753 that are divisible by 5 are 2375, 2735, 3275, 3725, 7235 and 7325.
// 
// 2)
// "1112225"
// 5
// 
// Returns: 20
// 
// 3)
// "123456789"
// 17
// 
// Returns: 21271
// 
// 4)
// "987654321999999"
// 39
// 
// Returns: 19960896
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

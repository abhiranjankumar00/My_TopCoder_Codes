#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef string ST;
typedef stringstream SS;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef vector <string> vs;

#define endl 		("\n")
#define DEBUG(x)	cout << #x << " = " << x << "\n"
#define Pf		printf
#define	Sf		scanf

#define	ep		1e-9
#define PI		M_PI
#define E 		M_E

#define	CL(a, b)	memset(a, b, sizeof(a))
#define	mp		make_pair
#define	pb		push_back

#define	all(c)		(c).begin(), (c).end()
#define	tr(i, c)	for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())		//vector & list//

#define forn(i, n)	for(int i = 0, loop_ends_here = (int)n; i < loop_ends_here ; i++)
#define forab(i, a, b)	for(int i = a, loop_ends_here = (int)b; i <= loop_ends_here; i++)
#define rep(i, a, b)	for(int i = a, loop_ends_here = (int)b; i >= loop_ends_here; i--)

#define read(n)		scanf("%d", &n)
#define write(n)	printf("%d ", n)
#define writeln(n)	printf("%d\n", n)

class DrawingPointsDivOne
{
public:
	int maxSteps(vector <int> x, vector <int> y);
};

const int xadd[] = {1, 1, -1, -1};
const int yadd[] = {1, -1, 1, -1};

int DrawingPointsDivOne::maxSteps (vector <int> x, vector <int> y) 
{
	set < ii > pts;
	forn(i, x.size())
		pts.insert(mp(x[i], y[i]));

	int cnt = 4;
	while(cnt--) {
		set < ii > tmp;
		tr(it, pts) {
			Pf("(%d, %d) ", it->first, it->second);
			forn(i, 4)
				tmp.insert(mp(it->first + xadd[i], it->second + yadd[i]));
		}
		cout << endl;
		pts = tmp;
	}

	int ret;
	
	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	DrawingPointsDivOne *obj;
	int answer;
	obj = new DrawingPointsDivOne();
	clock_t startTime = clock();
	answer = obj->maxSteps(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <int> p1;
	int p2;
	
	{
	// ----- test 0 -----
	int t0[] = {0,3};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0,0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 1;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {0,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0,0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 0;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {-70};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = -1;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// This problem statement contains images. It may not display properly outside the applet.
// 
// 
// 
// Once upon a time, Little Wojtek had drawn a number of points with integer coordinates onto a sheet of paper.
// Then he made zero or more steps.
// Each step looked as follows:
// Let's call all the points on Wojtek's paper old points.
// For every four old points that formed the vertices of a 1x1 square, Wojtek would draw a point in the middle of that square.
// Once he had drawn all such new points, he took an eraser and erased all the old points.
// 
// 
// 
// An example is shown in the picture below.
// On the left is Wojtek's original paper.
// In the middle is the same paper with the new points filled in.
// (For clarity, the old points are black and the new ones are red.)
// On the right is the paper after the old points were erased.
// 
// 
// 
//  
//  
// 
// 
// 
// 
// He has been playing for a while when he was called downstairs to dinner.
// He looked at the paper with a surprised face and wondered how many steps he had made.
// 
// 
// 
// You are given two vector <int>s x, y of some equal length n. They describe all of the points that were drawn by Wojtek in the last step of his play. More precisely, you may assume that there are real numbers (not necessarily integers) dy and dx such that the following holds:
// 
// For each i between 0 and n-1, there is a point at coordinates (dx+x[i], dy+y[i]).
// There are no other points anywhere on the paper, only those that follow from the previous statement.
// 
// 
// 
// 
// Return the maximum number of steps Wojtek could have made.
// If there is no maximum (that is, if the number of steps can be arbitrarily large), return -1 instead.
// 
// 
// DEFINITION
// Class:DrawingPointsDivOne
// Method:maxSteps
// Parameters:vector <int>, vector <int>
// Returns:int
// Method signature:int maxSteps(vector <int> x, vector <int> y)
// 
// 
// NOTES
// -Note that the points drawn by Wojtek in the last step of his play could have non-integer coordinates.
// -The paper used by Wojtek could have been arbitrarily large. In other words, ignore the paper size, it does not limit the number of steps in any way.
// 
// 
// CONSTRAINTS
// -x will contain between 1 and 50 elements, inclusive.
// -x and y will contain the same number of elements.
// -Each element of x will be between -70 and 70, inclusive.
// -Each element of y will be between -70 and 70, inclusive.
// -No two points described by x and y will be the same.
// 
// 
// EXAMPLES
// 
// 0)
// {0, 3}
// {0, 0}
// 
// Returns: 1
// 
// An example scenario:
// 
// 
// Wojtek draws the initial points at locations (100, 100), (100, 101), (101, 100), (101, 101), (103, 100), (104, 100), (103, 101), (104, 101), (315, 714).
// In the first and only step, Wojtek draws points at locations (100.5, 100.5) and (103.5, 100.5). These locations correspond to x and y in this test case.
// 
// 
// 1)
// {0,2}
// {0,0}
// 
// Returns: 0
// 
// 
// 
// 2)
// {-70}
// {3}
// 
// Returns: -1
// 
// 
// 
// 3)
// {-41,-40,1,-11,-32,-7,24,-11,49,-15,-22,20,-8,54,54,69,16,-30,36,-6,-30,40,64,20,-66,
//  -37,-33,-18,-35,36,9,61,-43,45,5,60,-8,-58,65,-66,41,12,34,-11,-57,-38,46,63,-55,3}
// {5,-24,-2,-4,23,14,1,70,-26,45,15,48,32,-41,54,-47,-67,-46,-9,-53,54,28,-61,11,53,68,
//  -33,62,37,-8,-17,-17,48,19,-49,56,-41,16,17,-50,28,59,10,50,23,-16,56,31,-70,-44}
// 
// Returns: 9
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

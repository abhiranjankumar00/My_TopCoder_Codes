#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef string ST;
typedef stringstream SS;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef vector <string> vs;

#define Pf	printf
#define	Sf	scanf

#define	ep	1e-9
#define PI M_PI
#define E M_E

#define	CL(a, b)	memset(a, b, sizeof(a))
#define	mp	make_pair

#define	pb	push_back

#define	all(c)	(c).begin(), (c).end()
#define	tr(i, c)	for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())	//vector & list//

#define forn(i, n)	for(int i = 0, loop_ends_here = (int)n; i < loop_ends_here; i++)
#define forab(i, a, b)	for(int i = a, loop_ends_here = (int) b; i <= loop_ends_here; i++)
#define rep(i, a, b)	for(int i = a, loop_ends_here = (int)b; i>=loop_ends_here; i--)

class EllysDirectoryListing
{
	bool f(ST & s1, ST &s2) {
		if(s1 == "." || s1 == "..")
			if(s2 == "." || s2 == "..")
			return true;
		return false;
	}
	
public:
	vector <string> getFiles(vector <string> files)
	{
		int sz = files.size();
		if(f(files[sz-1], files[sz-2]))
			return files;
		
		int idx = 0;
		for(; idx < sz; idx++)
			if(files[idx] == "." || files[idx] == "..")
				break;
			
		swap(files[sz-1], files[idx]);
		
		if(f(files[sz-1], files[sz-2]))
			return files;
			
		for(idx = 0; idx < sz; idx++)
			if(files[idx] == "." || files[idx] == "..")
				break;
			
		swap(files[sz-2], files[idx]);
		return files;
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, vector <string> p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	EllysDirectoryListing *obj;
	vector <string> answer;
	obj = new EllysDirectoryListing();
	clock_t startTime = clock();
	answer = obj->getFiles(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p1.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << "\"" << p1[i] << "\"";
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << answer[i] << "\"";
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p1.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p1[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	vector <string> p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"ContestApplet.jnlp",".","Image.jpg","..","Book.pdf","Movie.avi"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"ContestApplet.jnlp","Movie.avi","Image.jpg","Book.pdf","..","."};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"Image.jpg","..","."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"Image.jpg","..","."};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"..",".","Image.jpg"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"Image.jpg",".",".."};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"No","..","Zaphod",".","Just","very","very...","Improbable"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"No","Improbable","Zaphod","very...","Just","very",".",".."};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"www.topcoder.com","Ever.tried",".","Ever.failed","..","No","Matter.","Try","Again.","Fail","Again..","Fail.Better"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"www.topcoder.com","Ever.tried","Fail.Better","Ever.failed","Again..","No","Matter.","Try","Again.","Fail","..","."};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {"This",".","is","tricky","test",".."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"This","test","is","tricky","..","."};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Elly wants to write a program that lists all the files in a given directory.
// She already has the list of all the files.
// You will be given this list as a vector <string> files.
// 
// In addition to the names of files, the variable files will contain exactly two additional elements:
// the current directory (the string "."), and the parent directory (the string "..").
// These two elements may be anywhere in files.
// However, Elly wants them to be the last two elements.
// 
// In order to move the two directories to the last two positions in files, she wants you to
// perform the following steps:
// 
// 
// If "." and ".." are the last two elements of files (in any order), you are done.
// Find the first element of files that is either "." or "..". Swap it with the last element of files.
// If "." and ".." are now the last two elements of files (in any order), you are done.
// Find the first element of files that is either "." or "..". Swap it with the element of files that is one position before the last one.
// 
// 
// Your method must perform the above steps and return a vector <string> containing the modified
// order of elements in files.
// 
// DEFINITION
// Class:EllysDirectoryListing
// Method:getFiles
// Parameters:vector <string>
// Returns:vector <string>
// Method signature:vector <string> getFiles(vector <string> files)
// 
// 
// NOTES
// -Swapping elements at positions i and j means that the element at position i is moved to the position j and vice versa.
// 
// 
// CONSTRAINTS
// -files will contain between 2 and 50 elements, inclusive.
// -All elements of files will be distinct.
// -Exactly one element of files will be ".".
// -Exactly one element of files will be "..".
// -Each element of files will contain between 1 and 20 characters, inclusive.
// -Each element of files will contain only uppercase and lowercase letters and dots ('A'-'Z', 'a'-'z', '.').
// 
// 
// EXAMPLES
// 
// 0)
// {"ContestApplet.jnlp", ".", "Image.jpg", "..", "Book.pdf", "Movie.avi"}
// 
// Returns: {"ContestApplet.jnlp", "Movie.avi", "Image.jpg", "Book.pdf", "..", "." }
// 
// The directories are not the last two elements, so we search for the first one (in this case "."), and swap it with the last element (in this case "Movie.avi"). As "." and ".." are still not the last two elements, we search for the second one (in  this case "..") and swap it with "Book.pdf".
// 
// 1)
// {"Image.jpg", "..", "."}
// 
// Returns: {"Image.jpg", "..", "." }
// 
// In this case the directories are already the last two elements, so we do nothing.
// 
// 2)
// {"..", ".", "Image.jpg"}
// 
// Returns: {"Image.jpg", ".", ".." }
// 
// After swapping ".." with "Image.jpg", the directories are already the last two elements, so we are done.
// 
// 3)
// {"No", "..", "Zaphod", ".", "Just", "very", "very...", "Improbable"}
// 
// Returns: {"No", "Improbable", "Zaphod", "very...", "Just", "very", ".", ".." }
// 
// 
// 
// 4)
// {"www.topcoder.com", "Ever.tried", ".", "Ever.failed", "..", "No", "Matter.", "Try", "Again.", "Fail", "Again..", "Fail.Better"}
// 
// Returns: {"www.topcoder.com", "Ever.tried", "Fail.Better", "Ever.failed", "Again..", "No", "Matter.", "Try", "Again.", "Fail", "..", "." }
// 
// 5)
// {"This", ".", "is", "tricky", "test", ".."}
// 
// Returns: {"This", "test", "is", "tricky", "..", "." }
// 
// The first swap moves ".." to position 1, so we need to move it again to index 4 (indexed from zero).
// 
// END KAWIGIEDIT TESTING




//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

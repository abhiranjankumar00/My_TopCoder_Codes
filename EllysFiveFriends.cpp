#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef string ST;
typedef stringstream SS;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef vector <string> vs;

#define Pf	printf
#define	Sf	scanf

#define	ep	1e-9
#define PI M_PI
#define E M_E

#define	CL(a, b)	memset(a, b, sizeof(a))
#define	mp	make_pair

#define	pb	push_back

#define	all(c)	(c).begin(), (c).end()
#define	tr(i, c)	for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())	//vector & list//

#define forn(i, n)	for(int i = 0, loop_ends_here = (int)n; i < loop_ends_here; i++)
#define forab(i, a, b)	for(int i = a, loop_ends_here = (int) b; i <= loop_ends_here; i++)
#define rep(i, a, b)	for(int i = a, loop_ends_here = (int)b; i>=loop_ends_here; i--)

class EllysFiveFriends
{
public:
	int getZero(vector <int> numbers)
	{
		int ret;
		
		return ret;
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	EllysFiveFriends *obj;
	int answer;
	obj = new EllysFiveFriends();
	clock_t startTime = clock();
	answer = obj->getZero(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	int p1;
	
	{
	// ----- test 0 -----
	int t0[] = {5,1,1,2,3};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 10;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {2,1,1,1,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {3,4,1,4,5};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 520;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {42,666,1337,666,42};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 549119981;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {8792,9483,6787,9856,6205};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 165501353;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	int t0[] = {10000,10000,10000,10000,10000};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 952019520;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// During the girl sleepovers, Elly and her friends happen to play games that involve the consumption of fluids. For the purpose of this problem, we will assume that the fluids consumed are apple juice and orange juice. (This does not necessarily correspond to reality.)
// 
// One of these games is the following:
// Five girls sit down in a circle. We will label the girls 0 through 4 in the order in which they sit. Note that the girls 0 and 4 sit next to each other.
// At the beginning of the game, each girl i picks a positive integer numbers[i] between one and ten thousand.
// 
// The game then proceeds in rounds.
// Each round involves two girls that sit next to each other.
// Both girls must have positive integers at the beginning of the round.
// There are two possible actions they may perform:
// 
// If both their integers are odd, they may perform the "apple action":
// they subtract 1 from each of their integers, and they share a glass of apple juice.
// They may always perform the "orange action": They divide both their integers by 2
// (rounding down, if the result is not an integer) and share a glass of orange juice.
// 
// The girls win the game if all of their numbers reach zero.
// 
// 
// Elly once observed five of her friends playing this game. Elly recorded the game on a piece of paper:
// For each round, she wrote down the pair of girls that played in that round and the drink they chose. (The order in which she wrote down the two girls does not matter.)
// If the girls won the game, Elly gives the paper to you, otherwise she throws it away.
// 
// You are given the vector <int> numbers containing the integers the girls selected
// at the beginning of the game. Let X be the count of different ways in which the girls could
// have won the game. In other words, X is the number of different papers Elly could have written down and given to you. Your method must return this value modulo 1,000,000,007.
// 
// DEFINITION
// Class:EllysFiveFriends
// Method:getZero
// Parameters:vector <int>
// Returns:int
// Method signature:int getZero(vector <int> numbers)
// 
// 
// CONSTRAINTS
// -numbers will contain exactly 5 elements.
// -Each element of numbers will be between 1 and 10000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {5, 1, 1, 2, 3}
// 
// Returns: 10
// 
// One of the ways in which the girls can win the game:
// 
// Girls 0 and 1 drink orange juice. New integers: {2, 0, 1, 2, 3}.
// Girls 2 and 3 drink orange juice. New integers: {2, 0, 0, 1, 3}.
// Girls 3 and 4 drink apple juice.  New integers: {2, 0, 0, 0, 2}.
// Girls 0 and 4 drink orange juice. New integers: {1, 0, 0, 0, 1}.
// Girls 0 and 4 drink apple juice.  New integers: {0, 0, 0, 0, 0}.
// 
// A different way of winning the game has the same first four steps, and then in step 5 girls 0 and 4
// drink orange juice. Note that in step 2 girls 2 and 3 are not allowed to choose apple juice, as at
// that time at least one of their integers is even.
// 
// 1)
// {2, 1, 1, 1, 2}
// 
// Returns: 0
// 
// Here the girls cannot win the game at all.
// 
// 2)
// {3, 4, 1, 4, 5}
// 
// Returns: 520
// 
// Even with small numbers the answer can be rather big.
// 
// 3)
// {42, 666, 1337, 666, 42}
// 
// Returns: 549119981
// 
// Don't forget to use modular arithmetics.
// 
// 4)
// {8792, 9483, 6787, 9856, 6205}
// 
// Returns: 165501353
// 
// An almost maximal test case.
// 
// 5)
// {10000, 10000, 10000, 10000, 10000}
// 
// Returns: 952019520
// 
// The maximal test case.
// 
// END KAWIGIEDIT TESTING




//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

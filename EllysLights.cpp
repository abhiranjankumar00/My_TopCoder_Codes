#include <iostream>
#include <ctime>
#include <vector>
#include <list>
#include <queue>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <cassert>
#include <utility>
#include <sstream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <climits>
#include <iterator>
#include <fstream>
using namespace std;

typedef long long 		int64;
typedef vector<int> 		vi;
typedef string 			ST;
typedef stringstream 		SS;
typedef vector< vector<int> > 	vvi;
typedef pair<int,int> 		ii;
typedef vector<string> 		vs;
/*
#if __cplusplus > 199711L	// for g++0x, value of __cplusplus must be greater thana 199711L.
	#define tr(i, c)	for(auto i = begin(c); i != end(c); i++)
#else
	#define tr(i, c)	for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#endif
*/
#define endl		("\n")
#define tr(i, c)	for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define PI		M_PI
#define E 		M_E
#define	eps		1e-9

#define	Sf		scanf
#define	Pf		printf

#define forn(i, n)	for(int i = 0, lets_stop_here = (int)n; i <  lets_stop_here; i++)
#define forab(i, a, b)	for(int i = a, lets_stop_here = (int)b; i <= lets_stop_here; i++)
#define rep(i, a, b)	for(int i = a, lets_stop_here = (int)b; i >= lets_stop_here; i--)

#define	all(c)		(c).begin(), (c).end()
#define	CL(a, b)	memset(a, b, sizeof(a))
#define mp		make_pair
#define pb		push_back

#define	present(x, c)	((c).find(x) != (c).end())	//map & set//
#define	cpresent(x, c)	(find( (c).begin(), (c).end(), x) != (c).end())	//vector & list//

#define read(n)		scanf("%d", &n)
#define write(n)	printf("%d ", n)
#define writeln(n)	printf("%d\n", n)

#if (0 or defined ONLINE_JUDGE)
	#define DEBUG
#else 
	#define DEBUG(x)	cout << #x << " = " << x << "\n"
#endif

class EllysLights
{
public:
	int getMinimum(string initial, vector <string> switches);
};

int EllysLights::getMinimum (string initial, vector <string> switches) 
{
	int ret;
	
	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, vector <string> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	EllysLights *obj;
	int answer;
	obj = new EllysLights();
	clock_t startTime = clock();
	answer = obj->getMinimum(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	vector <string> p1;
	int p2;
	
	{
	// ----- test 0 -----
	p0 = "YNYNNN";
	string t1[] = {"YNNYNY","NYYYNN","YNYNYN","NNNNYN","NYNNNY"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 2;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "YNYNYN";
	string t1[] = {"NNNNNN","YYYYYY","NYNNNN","NNNYNN","NNNNNY"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 4;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "YYN";
	string t1[] = {"YNY","NYN"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = -1;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "NNYNYNYYYNNYYYYN";
	string t1[] = {"NYNYNYNYNYNYNYNY","YNYNYNYNYNYNYNYN","NNNNNNNNNNNNNNNN","YNNNNNNNNNNNNNNN","NYNNNNNNNNNNNNNN","NNYNNNNNNNNNNNNN","NNNYNNNNNNNNNNNN","NNNNYNNNNNNNNNNN","NNNNNYNNNNNNNNNN","NNNNNNYNNNNNNNNN","NNNNNNNYNNNNNNNN","NNNNNNNNYNNNNNNN","NNNNNNNNNYNNNNNN","NNNNNNNNNNYNNNNN","NNNNNNNNNNNYNNNN","NNNNNNNNNNNNYNNN","NNNNNNNNNNNNNYNN","NNNNNNNNNNNNNNYN","NNNNNNNNNNNNNNNY"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 6;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "NYNYNYYYNNYYYNNYNNYYYYYNNYNYYYY";
	string t1[] = {"NNNNNNNNNNNNNNNNNNYNNNNNNNNNNNN","NNNNNNNNYNNNYNNNNYYNYNNNNYNNNNN","NNNNNNNNNYNNNNNNNNNNNNYNNNNNNNN","NNNNNYNNNNNNNNNNNNNNNNNNNNNNNNN","NYNNNNNNNNNNNNYNNNNNNNNNNNNNNNN","NNNNNNNNNNNNNYYNNNNNNNNNNNNNNNY","NNNNNNYNNNNNNNNNNNNYNNNNNYNNNNN","NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","YNNNNNNNNNNNNNNNNNNYNNNNNNNNNNN","NNNYNNNNNNNNNNNNNNNNNNNYYNNNNNN","NYNNNNNNNNNNYNNNNNNNNNNNNNNNYNN","NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","NNNNNYNNNNNNNNNNNNNNNNNNNNNNNNY","NNNNNNNNNNYNNNNNNNNNYYYNNNNNNNN","NNNYNNNNNNNNNNNNNNNNNNNNNNNYNNN","NNNNNNNNYNNNNNNNNNNNNNNNYNNNNNN","YNNNYNNNNNNNNNNNNNNNNNNNNNNYNNN","NNNNNNNNNNYNNNNNNNNNNNNNNNNNNNN","NNNNYNNYNNNNNNNNNNNNNNNNNNNNNNN","NNNNNNNYNNNYNNNYNNNNNNNNNNNNNYN"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 7;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = "NYNYYNYNYYYYNNYNYNNYYNNNNNYNYNNNNNYNNNYN";
	string t1[] = {"NNNNNNNNNNNNNNNNNNNYNNNNNNNNNNNNNNNYNNNN","NNNNNNNNNNNNNNNNNNNNNNNNNNYNNNNNNNNNNNNN","NNNNNNNNNYNNNNYNNYNNNNNNNNNNNNNNNNNNNNNN","NNNNNNNNNNNNNNNNNNNYNNNNYNNNNNNNYNNNNNNN","NNNNNYNNNNNNNNNNNNNNNNNYNNNNNNNNNNNNNNNN","NNNNNNNNNNNNNNNNNNYNNNNNNNNYNNNYNNNNNYNN","NNNNNNNNNNYNNNNNNNNNNNNNNYNNNNNYNNYNNNNN","NNNNNYNNYNNYNNNNNNNNNNNNNNNNNNNNNYNNNNNN","YNNNYNNNNNNNNNNNNNYNNNYNNYNNNNNNNYNNNNNN","NNNNNNNNNYYNNNNNNNNNNNNYNNNNYNNNNNNNNNNN","NNNNNNNNNNNYNYNNNNNNNNNNNNNNNNNNNNNNNNNY","NNNNNNNNNNNNYNNNNNNNNNNNYNNNNNNNNNNNNNNN","NNNNNNNNNNNNNNNNNNNNNNYNNNNNNNNNNNNNNNNN","NNNYNNNNNNNNNNNNNNNNNYNNNNNNNNNNYNNNNNNN","NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","NNNNNNNNNNNNNNYNNYNNNNNNNNNNNNNNNNNNNNNN","NNYNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNYYNNY","NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNYNNNNNNNNN","NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","NNNNNNNYNNNNNYNYNNNNNNNNNNNNNNNNNNNNNNNN","NNYNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNYNNNNN","NYNNNNNNNNNNNNNNNNNNNNNNNNNNNYNNNNNNNNNN","NNNNYNNNNNN"
			"NNNNNNNNNNNNNNNNNNNNNNNNNNNNN","NYNNNNYNNNNNNNNNNNNNNNNNNNNYNNNNNNNNNNNN","NNNNNNYNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNYNN","NNNNNNNNNNNNYNNYYNNNNNNNNNNNNNNNNNNNNNNN","NNNNNNNYNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","NNNYNNNNNNNNNNNNNNNNYYNNNNNNNNNNNNNNNNNN","NNNNNNNNYNNNNNNNNNNNNNNNNNNNYNYNNNNNNNNN","NNNNNNNNNNNNNNNNNNNNNNNNNNYNNYNNNNNNYNNN"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = -1;
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Elly's house has a number of light bulbs. Some of them are turned on, some of them are not. She wants to switch all of them off for the upcoming Earth Hour.
// 
// Unfortunately, her house has a strange system of light switches. Each switch changes the state of some of the bulbs (possibly none or all of them). This means that if she uses the switch, all bulbs that are connected to it go off if they were on, and go on if they were off. She also knows that each bulb is connected to at most two switches. Help Elly determine what is the minimal number of switches she must use in order to turn off all the lights.
// 
// You are given a string initial and a vector <string> switches. Each character in initial represents one light bulb: if the i-th light bulb (0-based index) is initially on, the i-th character of initial is 'Y', otherwise it is 'N'. Each element of switches represents one switch: if the i-th switch toggles the j-th light bulb, switches[i][j] is 'Y', otherwise it is 'N'.
// 
// Find and return the smallest nonnegative integer X such that there is a sequence of X switches such that if Elly toggles those switches in the given order, all light bulbs will be turned off at the end. If no such X exists, return -1.
// 
// DEFINITION
// Class:EllysLights
// Method:getMinimum
// Parameters:string, vector <string>
// Returns:int
// Method signature:int getMinimum(string initial, vector <string> switches)
// 
// 
// NOTES
// -It is possible that none or all of the bulbs are turned on initially.
// -Elly is allowed to toggle the same switch more than once.
// 
// 
// CONSTRAINTS
// -initial will contain between 1 and 50 characters, inclusive.
// -Each character of initial will be either 'Y' or 'N'.
// -switches will contain between 1 and 50 elements, inclusive.
// -Each element of switches will contain the same number of characters as initial.
// -Each character of each element of switches will be either 'Y' or 'N'.
// -For each index of initial there will be at most two elements of switches that will have 'Y' at that index.
// 
// 
// EXAMPLES
// 
// 0)
// "YNYNNN"
// {"YNNYNY", "NYYYNN", "YNYNYN", "NNNNYN", "NYNNNY"}
// 
// Returns: 2
// 
// There are multiple ways how to turn off all the lights.
// For example, she can first use switch 0, then switch 4, and finally switch 1.
// The shortest solutions only use two switches.
// For example, it is enough to flip the switch 2 followed by the switch 3.
// 
// 1)
// "YNYNYN"
// {"NNNNNN", "YYYYYY", "NYNNNN", "NNNYNN", "NNNNNY"}
// 
// Returns: 4
// 
// Some of the switches might change the state of none or all of the bulbs. Some of the bulbs might be influenced by less than 2 switches.
// 
// 
// 2)
// "YYN"
// {"YNY", "NYN"}
// 
// Returns: -1
// 
// Sometimes there might be no way to switch off all the bulbs. In this case return -1.
// 
// 
// 3)
// "NNYNYNYYYNNYYYYN"
// {"NYNYNYNYNYNYNYNY",
//  "YNYNYNYNYNYNYNYN",
//  "NNNNNNNNNNNNNNNN",
//  "YNNNNNNNNNNNNNNN",
//  "NYNNNNNNNNNNNNNN",
//  "NNYNNNNNNNNNNNNN",
//  "NNNYNNNNNNNNNNNN",
//  "NNNNYNNNNNNNNNNN",
//  "NNNNNYNNNNNNNNNN",
//  "NNNNNNYNNNNNNNNN",
//  "NNNNNNNYNNNNNNNN",
//  "NNNNNNNNYNNNNNNN",
//  "NNNNNNNNNYNNNNNN",
//  "NNNNNNNNNNYNNNNN",
//  "NNNNNNNNNNNYNNNN",
//  "NNNNNNNNNNNNYNNN",
//  "NNNNNNNNNNNNNYNN",
//  "NNNNNNNNNNNNNNYN",
//  "NNNNNNNNNNNNNNNY"}
// 
// Returns: 6
// 
// There are 9 lit bulbs initially. We can turn them off one by one, but it will be faster to use one of the complex switches and then to toggle the ones that are still lit.
// 
// 4)
// "NYNYNYYYNNYYYNNYNNYYYYYNNYNYYYY"
// {"NNNNNNNNNNNNNNNNNNYNNNNNNNNNNNN",
//  "NNNNNNNNYNNNYNNNNYYNYNNNNYNNNNN",
//  "NNNNNNNNNYNNNNNNNNNNNNYNNNNNNNN",
//  "NNNNNYNNNNNNNNNNNNNNNNNNNNNNNNN",
//  "NYNNNNNNNNNNNNYNNNNNNNNNNNNNNNN",
//  "NNNNNNNNNNNNNYYNNNNNNNNNNNNNNNY",
//  "NNNNNNYNNNNNNNNNNNNYNNNNNYNNNNN",
//  "NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN",
//  "YNNNNNNNNNNNNNNNNNNYNNNNNNNNNNN",
//  "NNNYNNNNNNNNNNNNNNNNNNNYYNNNNNN",
//  "NYNNNNNNNNNNYNNNNNNNNNNNNNNNYNN",
//  "NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN",
//  "NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN",
//  "NNNNNYNNNNNNNNNNNNNNNNNNNNNNNNY",
//  "NNNNNNNNNNYNNNNNNNNNYYYNNNNNNNN",
//  "NNNYNNNNNNNNNNNNNNNNNNNNNNNYNNN",
//  "NNNNNNNNYNNNNNNNNNNNNNNNYNNNNNN",
//  "YNNNYNNNNNNNNNNNNNNNNNNNNNNYNNN",
//  "NNNNNNNNNNYNNNNNNNNNNNNNNNNNNNN",
//  "NNNNYNNYNNNNNNNNNNNNNNNNNNNNNNN",
//  "NNNNNNNYNNNYNNNYNNNNNNNNNNNNNYN"}
// 
// Returns: 7
// 
// 
// 
// 5)
// "NYNYYNYNYYYYNNYNYNNYYNNNNNYNYNNNNNYNNNYN"
// {"NNNNNNNNNNNNNNNNNNNYNNNNNNNNNNNNNNNYNNNN",
//  "NNNNNNNNNNNNNNNNNNNNNNNNNNYNNNNNNNNNNNNN",
//  "NNNNNNNNNYNNNNYNNYNNNNNNNNNNNNNNNNNNNNNN",
//  "NNNNNNNNNNNNNNNNNNNYNNNNYNNNNNNNYNNNNNNN",
//  "NNNNNYNNNNNNNNNNNNNNNNNYNNNNNNNNNNNNNNNN",
//  "NNNNNNNNNNNNNNNNNNYNNNNNNNNYNNNYNNNNNYNN",
//  "NNNNNNNNNNYNNNNNNNNNNNNNNYNNNNNYNNYNNNNN",
//  "NNNNNYNNYNNYNNNNNNNNNNNNNNNNNNNNNYNNNNNN",
//  "YNNNYNNNNNNNNNNNNNYNNNYNNYNNNNNNNYNNNNNN",
//  "NNNNNNNNNYYNNNNNNNNNNNNYNNNNYNNNNNNNNNNN",
//  "NNNNNNNNNNNYNYNNNNNNNNNNNNNNNNNNNNNNNNNY",
//  "NNNNNNNNNNNNYNNNNNNNNNNNYNNNNNNNNNNNNNNN",
//  "NNNNNNNNNNNNNNNNNNNNNNYNNNNNNNNNNNNNNNNN",
//  "NNNYNNNNNNNNNNNNNNNNNYNNNNNNNNNNYNNNNNNN",
//  "NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN",
//  "NNNNNNNNNNNNNNYNNYNNNNNNNNNNNNNNNNNNNNNN",
//  "NNYNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNYYNNY",
//  "NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNYNNNNNNNNN",
//  "NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN",
//  "NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN",
//  "NNNNNNNYNNNNNYNYNNNNNNNNNNNNNNNNNNNNNNNN",
//  "NNYNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNYNNNNN",
//  "NYNNNNNNNNNNNNNNNNNNNNNNNNNNNYNNNNNNNNNN",
//  "NNNNYNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN",
//  "NYNNNNYNNNNNNNNNNNNNNNNNNNNYNNNNNNNNNNNN",
//  "NNNNNNYNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNYNN",
//  "NNNNNNNNNNNNYNNYYNNNNNNNNNNNNNNNNNNNNNNN",
//  "NNNNNNNYNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN",
//  "NNNYNNNNNNNNNNNNNNNNYYNNNNNNNNNNNNNNNNNN",
//  "NNNNNNNNYNNNNNNNNNNNNNNNNNNNYNYNNNNNNNNN",
//  "NNNNNNNNNNNNNNNNNNNNNNNNNNYNNYNNNNNNYNNN"}
// 
// Returns: -1
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

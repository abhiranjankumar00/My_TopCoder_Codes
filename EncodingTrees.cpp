#include <bits/stdc++.h>
using namespace std;

class EncodingTrees
{
public:
	string getCode(int N, int index);
};

string EncodingTrees::getCode (int N, int index) 
{
	string ret;
	
	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	EncodingTrees *obj;
	string answer;
	obj = new EncodingTrees();
	clock_t startTime = clock();
	answer = obj->getCode(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	int p0;
	int p1;
	string p2;
	
	// ----- test 0 -----
	disabled = false;
	p0 = 2;
	p1 = 1;
	p2 = "ab";
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = 2;
	p1 = 2;
	p2 = "ba";
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = 2;
	p1 = 3;
	p2 = "";
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = 4;
	p1 = 9;
	p2 = "cbad";
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = 15;
	p1 = 14023;
	p2 = "abcdeohgfniljkm";
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// A binary tree is either empty or it consists of a root node and two binary trees, called the left subtree and the right subtree of the root node. Each node of our binary trees will contain one lowercase letter. We say that a binary tree is a binary search tree (BST) if and only if for each node the following conditions hold:
// 
// 
// 
//  All letters in the left subtree of the node occur earlier in the alphabet than the letter in the node. 
//  All letters in the right subtree of the node occur later in the alphabet than the letter in the node. 
// 
// 
// 
// Note that if a tree is a BST, then each subtree of this tree is also a BST. As a consequence, if the tree is non-empty, then both subtrees of the root node are BSTs again.
// 
// 
// 
// Examples of BSTs with 4 nodes:
// 
// 
// 
//     c        b        a
//    / \      / \        \
//   b   d    a   d        c
//  /            /        / \
// a            c        b   d
// 
// 
// 
// A pre-order code of a BST is a string obtained in the following way: 
// 
// 
// 
//  The pre-order code of an empty BST is an empty string. 
//  The pre-order code of a non-empty BST is obtained in the following way: Let L and R be the pre-order codes of the left and right subtree, respectively. Then the pre-order code of the whole BST is the concatenation of the letter in its root node, L and R (in this order). 
// 
// 
// 
// The pre-order codes for the trees above are "cbad", "badc" and "acbd", respectively.
// 
// 
// 
// Consider all BSTs with exactly N nodes containing the first N lowercase letters. Order these trees alphabetically by their pre-order codes.
// Our sequence of BSTs is one-based, i.e., the index of the first tree in this sequence is 1.
// Return the pre-order code of the BST at the specified index in this sequence.
// If index is larger than the number of BSTs with exactly N nodes, return an empty string.
// 
// 
// 
// DEFINITION
// Class:EncodingTrees
// Method:getCode
// Parameters:int, int
// Returns:string
// Method signature:string getCode(int N, int index)
// 
// 
// NOTES
// -You may assume that the number of our BSTs with 19 nodes doesn't exceed 2,000,000,000.
// 
// 
// CONSTRAINTS
// -N is between 1 and 19, inclusive.
// -index is between 1 and 2,000,000,000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 2
// 1
// 
// Returns: "ab"
// 
// There are 2 BSTs with 2 nodes. The first of them is
// 
// a
//  \
//   b
// 
// 
// 1)
// 2
// 2
// 
// Returns: "ba"
// 
// The second one is
// 
//   b
//  /
// a
// 
// 
// 2)
// 2
// 3
// 
// Returns: ""
// 
// There are only 2 BSTs with 2 nodes, so the empty string is returned for an index of 3.
// 
// 3)
// 4
// 9
// 
// Returns: "cbad"
// 
// The 14 valid pre-order codes of BSTs with 4 nodes: abcd, abdc, acbd, adbc, adcb, bacd, badc, cabd, cbad, dabc, dacb, dbac, dcab, dcba. The 9th tree:
// 
//     c
//    / \
//   b   d
//  /
// a
// 
// 
// 
// 4)
// 15
// 14023
// 
// Returns: "abcdeohgfniljkm"
// 
// END KAWIGIEDIT TESTING

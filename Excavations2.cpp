#include <iostream>
#include <ctime>
#include <vector>
#include <list>
#include <queue>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <cassert>
#include <utility>
#include <sstream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <climits>
#include <iterator>
#include <fstream>
using namespace std;

typedef long long 		int64;
typedef vector<int> 		vi;
typedef string 			ST;
typedef stringstream 		SS;
typedef vector< vector<int> > 	vvi;
typedef pair<int,int> 		ii;
typedef vector<string> 		vs;
/*
#if __cplusplus > 199711L	// for g++0x, value of __cplusplus must be greater thana 199711L.
	#define tr(i, c)	for(auto i = begin(c); i != end(c); i++)
#else
	#define tr(i, c)	for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#endif
*/
#define endl		("\n")
#define tr(i, c)	for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define PI		M_PI
#define E 		M_E
#define	eps		1e-9

#define	Sf		scanf
#define	Pf		printf

#define forn(i, n)	for(int i = 0, lets_stop_here = (int)n; i <  lets_stop_here; i++)
#define forab(i, a, b)	for(int i = a, lets_stop_here = (int)b; i <= lets_stop_here; i++)
#define rep(i, a, b)	for(int i = a, lets_stop_here = (int)b; i >= lets_stop_here; i--)

#define	all(c)		(c).begin(), (c).end()
#define	cl(a, b)	memset(a, b, sizeof(a))
#define mp		make_pair
#define pb		push_back

#define	present(x, c)	((c).find(x) != (c).end())	//map & set//
#define	cpresent(x, c)	(find( (c).begin(), (c).end(), x) != (c).end())	//vector & list//

#define read(n)		scanf("%d", &n)
#define write(n)	printf("%d ", n)
#define writeln(n)	printf("%d\n", n)

//#define debug(x)
#define debug(x)	cout << #x << " = " << x << "\n"

class Excavations2
{
public:
	long long count(vector <int> kind, vector <int> found, int K);
};

const int sz = 55;
long long _C[55][55];

long long dp[55][55];
vector <int> arr;
int N;

long long C(int n, int r) {
	if(n < r)
		return 0ll;
	long long &ret = _C[n][r];
	if(ret > -1)
		return ret;
	return ret = (r == 0 || r == n) ? 1ll : C(n-1, r-1) + C(n-1, r);
}

long long countWays(int id, int left) {
	if(id == N) 
		return left == 0 ? 1ll : 0ll;

	if(left <= 0) 
		return 0ll;

	long long &ret = dp[id][left];
	if(ret > -1)
		return ret;
	ret = 0;
	for(int k = 1; k <= min(left, arr[id]); ++k) {
		ret += C(arr[id], k) * countWays(id+1, left - k);
	}
	return ret;
}

long long Excavations2::count (vector <int> kind, vector <int> found, int K) 
{
	memset(_C, -1, sizeof(_C));
	memset(dp, -1, sizeof(dp));
	
	map <int, int> m;
	for(auto it = (kind).begin(); it != (kind).end(); ++it) {
		if(find(found.begin(), found.end(), *it) != found.end())
			m[*it]++;
	}
	arr.clear();
	for(auto it = (m).begin(); it != (m).end(); ++it) {
		arr.push_back(it->second);
	}
	N = arr.size();

	return countWays(0, K);
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, int p2, bool hasAnswer, long long p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << p2;
	cout << "]" << endl;
	Excavations2 *obj;
	long long answer;
	obj = new Excavations2();
	clock_t startTime = clock();
	answer = obj->count(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <int> p1;
	int p2;
	long long p3;
	
	{
	// ----- test 0 -----
	int t0[] = {1,2,2,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 2;
	p3 = 1ll;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {1,2,2,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 2;
	p3 = 4ll;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {1,2,1,1,2,3,4,3,2,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {4,2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 3;
	p3 = 6ll;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {50};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 21;
	p3 = 5567902560ll;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Once upon a time, there was a civilization called Ruritania. It had n building sites numbered from 0 to n-1. There were various types of buildings such as libraries, markets, and palaces. Each building type was assigned an integer from 1 to 50. The building at site i (0-based index) was of type kind[i].
// 
// With the passing of millennia, Ruritania declined and its building sites were covered in sand, concealing all the buildings. Recently, an intrepid archeologist excavated K building sites.
// 
// You are given vector <int>s kind and found as well as the int K. The types of buildings discovered by the excavation are described by the vector <int> found, which contains at most one value for each building type even if several buildings of a type were excavated.
// 
// Return the number of K-tuples of sites that could have been excavated to arrive at the given values. The answer is guaranteed to be at least one.
// 
// 
// DEFINITION
// Class:Excavations2
// Method:count
// Parameters:vector <int>, vector <int>, int
// Returns:long long
// Method signature:long long count(vector <int> kind, vector <int> found, int K)
// 
// 
// CONSTRAINTS
// -kind will contain N elements, where N is between 1 and 50, inclusive.
// -Each element of kind will be between 1 and 50, inclusive.
// -found will contain between 1 and 50 elements, inclusive.
// -Each element of found will occur in kind at least once.
// -The elements of found will be distinct.
// -K will be between the number of elements in found and N, inclusive.
// -There will exist at least one K-tuple of sites consistent with the given information.
// 
// 
// EXAMPLES
// 
// 0)
// {1, 2, 2, 1}
// {1}
// 2
// 
// Returns: 1
// 
// There are four building sites. Two contain a building of type 1 and two contain a building of type 2. The archeologist excavated two sites and only found buildings of type 1. The only possible scenario is that the archeologist excavated sites 0 and 3.
// 
// 1)
// {1, 2, 2, 1}
// {1, 2}
// 2
// 
// Returns: 4
// 
// The building sites are the same as before, but in this case buildings of type 1 and type 2 have been discovered. The archeologist must have excavated one of four possible pairs of sites: (0, 1), (0, 2), (1, 3), or (2, 3).
// 
// 2)
// {1, 2, 1, 1, 2, 3, 4, 3, 2, 2}
// {4, 2}
// 3
// 
// Returns: 6
// 
// The archeologist excavated one of six possible triples of building sites:
// 
// (1, 4, 6)
// (1, 6, 8)
// (1, 6, 9)
// (4, 6, 8)
// (4, 6, 9)
// (6, 8, 9)
// 
// 
// 3)
// {50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50}
// {50}
// 21
// 
// Returns: 5567902560
// 
// 
// 
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

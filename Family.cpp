#include <bits/stdc++.h>
using namespace std;

class Family
{
public:
	string isFamily(vector <int> parent1, vector <int> parent2);
};

string Family::isFamily (vector <int> parent1, vector <int> parent2)
{
	string ret;
	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	Family *obj;
	string answer;
	obj = new Family();
	clock_t startTime = clock();
	answer = obj->isFamily(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	vector <int> p0;
	vector <int> p1;
	string p2;
	
	// ----- test 0 -----
	disabled = false;
	p0 = {-1,-1,0};
	p1 = {-1,-1,1};
	p2 = "Possible";
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = {-1,-1,-1,-1,-1};
	p1 = {-1,-1,-1,-1,-1};
	p2 = "Possible";
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = {-1,-1,0,0,1};
	p1 = {-1,-1,1,2,2};
	p2 = "Impossible";
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = {-1,-1,-1,-1,1,-1,0,5,6,-1,0,3,8,6};
	p1 = {-1,-1,-1,-1,3,-1,4,6,5,-1,5,4,6,1};
	p2 = "Possible";
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = {-1,-1,-1,2,2,-1,5,6,4,6,2,1,8,0,2,4,6,9,-1,16,-1,11};
	p1 = {-1,-1,-1,1,0,-1,1,4,2,0,4,8,2,3,0,5,14,14,-1,7,-1,13};
	p2 = "Impossible";
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// A directed acyclic graph is a family graph if the following constraints are all satisfied:
// 
// The nodes of the graph are numbered 0 through N-1, for some positive N.
// Each node is either male or female.
// Each node either has no parents, or it has precisely two parents. (A parent of the node x is a node y such that there is an edge from y to x.)
// If a node has parents, their numbers are strictly smaller than the number of the node.
// If a node has parents, one of them must be male and the other female.
// 
// 
// You are given two vector <int>s parent1 and parent2 with N elements each.
// These describe one directed graph that resembles a family graph:
// For each i, node i has either two parents (in which case parent1[i] and parent2[i] are their numbers, and both of them are smaller than i), or it has no parents (in which case parent1[i] and parent2[i] are both -1).
// 
// Return "Possible" (quotes for clarity) if the given graph can be a family graph, and "Impossible" otherwise.
// 
// DEFINITION
// Class:Family
// Method:isFamily
// Parameters:vector <int>, vector <int>
// Returns:string
// Method signature:string isFamily(vector <int> parent1, vector <int> parent2)
// 
// 
// CONSTRAINTS
// -parent1 will contain between 1 and 100 elements, inclusive.
// -parent1 and parent2 will contain the same number of elements.
// -For each i, the i-th element (0-based) of parent1 will be between -1 and i-1, inclusive.
// -For each i, the i-th element (0-based) of parent2 will be between -1 and i-1, inclusive.
// -For each i, the i-th element of parent1 will be -1 if and only if the i-th element of parent2 is -1.
// -For each i, if the i-th element of parent1 is not -1, then the i-th element of parent1 and the i-th element of parent2 will be different.
// 
// 
// EXAMPLES
// 
// 0)
// {-1,-1,0}
// {-1,-1,1}
// 
// Returns: "Possible"
// 
// The parents of node 2 are nodes 0 and 1. Nodes 0 and 1 have no parents.
// 
// 1)
// {-1,-1,-1,-1,-1}
// {-1,-1,-1,-1,-1}
// 
// Returns: "Possible"
// 
// Nobody has any parents.
// 
// 2)
// {-1,-1,0,0,1}
// {-1,-1,1,2,2}
// 
// Returns: "Impossible"
// 
// Given that 0 and 1 have a child, their genders must be different. Given that 0 and 2 have a child, their genders must be different, too. Then, 1 and 2 must have the same gender, hence they cannot have a child together. Therefore, this cannot be a valid family graph.
// 
// 3)
// {-1,-1,-1,-1,1,-1,0,5,6,-1,0,3,8,6}
// 
// {-1,-1,-1,-1,3,-1,4,6,5,-1,5,4,6,1}
// 
// 
// Returns: "Possible"
// 
// 
// 
// 4)
// {-1,-1,-1,2,2,-1,5,6,4,6,2,1,8,0,2,4,6,9,-1,16,-1,11}
// {-1,-1,-1,1,0,-1,1,4,2,0,4,8,2,3,0,5,14,14,-1,7,-1,13}
// 
// Returns: "Impossible"
// 
// 
// 
// END KAWIGIEDIT TESTING

#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef string ST;
typedef stringstream SS;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef vector <string> vs;

#define endl 		("\n")
#define DEBUG(x)	cout << #x << " = " << x << "\n"
#define Pf		printf
#define	Sf		scanf

#define	ep		1e-9
#define PI		M_PI
#define E 		M_E

#define	CL(a, b)	memset(a, b, sizeof(a))
#define	mp		make_pair
#define	pb		push_back

#define	all(c)		(c).begin(), (c).end()
#define	tr(i, c)	for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())		//vector & list//

#define forn(i, n)	for(int i = 0, loop_ends_here = (int)n; i < loop_ends_here ; i++)
#define forab(i, a, b)	for(int i = a, loop_ends_here = (int)b; i <= loop_ends_here; i++)
#define rep(i, a, b)	for(int i = a, loop_ends_here = (int)b; i >= loop_ends_here; i--)

#define read(n)		scanf("%d", &n)
#define write(n)	printf("%d ", n)
#define writeln(n)	printf("%d\n", n)

class FauxPalindromes
{
public:
	string classifyIt(string word);
};


string FauxPalindromes::classifyIt (string word) 
{
	string tmp = word;
	reverse(all(tmp));
	if(tmp == word)
		return "PALINDROME";
	string :: iterator it = unique(all(word));
	word.erase(it, word.end());
	DEBUG(word);
	tmp = word;
	reverse(all(tmp));
	if(tmp == word)
		return "FAUX";
	return "NOT EVEN FAUX";
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	FauxPalindromes *obj;
	string answer;
	obj = new FauxPalindromes();
	clock_t startTime = clock();
	answer = obj->classifyIt(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	string p1;
	
	{
	// ----- test 0 -----
	p0 = "ANA";
	p1 = "PALINDROME";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "AAAAANNAA";
	p1 = "FAUX";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "LEGENDARY";
	p1 = "NOT EVEN FAUX";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "XXXYTYYTTYX";
	p1 = "FAUX";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "TOPCOODEREDOOCPOT";
	p1 = "PALINDROME";
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = "TOPCODEREDOOCPOT";
	p1 = "FAUX";
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	p0 = "XXXXYYYYYZZXXYYY";
	p1 = "NOT EVEN FAUX";
	all_right = KawigiEdit_RunTest(6, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 7 -----
	p0 = "A";
	p1 = "PALINDROME";
	all_right = KawigiEdit_RunTest(7, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// A word is a palindrome if it can be read the same forwards and backwards. For example, the strings "ANA", "AAXAA", "Z" and "XYYYYYX" are palindromes (quotes for clarity).
// 
// A word is a faux palindrome if, after replacing every group of consecutive equal letters with a single instance of the letter, the resulting word is a palindrome. For example, the string "AAAAANNAA" is a faux palindrome. A detailed explanation why this is a faux palindrome is given below in Example 1.
// Other examples of faux palindromes are the strings "AAAAAAAAAAAAAAAXA and "XYX". Note that every palindrome is also a faux palindrome.
// 
// You are given a string word. You are asked to classify it.
// If word is a palindrome, return "PALINDROME" (quotes for clarity, returned values are case sensitive).
// If word is not a palindrome but is a faux palindrome, return "FAUX".
// In case word is not a faux palindrome, return "NOT EVEN FAUX".
// 
// 
// 
// DEFINITION
// Class:FauxPalindromes
// Method:classifyIt
// Parameters:string
// Returns:string
// Method signature:string classifyIt(string word)
// 
// 
// CONSTRAINTS
// -word will contain between 1 and 50 characters, inclusive.
// -The characters in word will be upper case letters between 'A' and 'Z', inclusive (quotes for clarity).
// 
// 
// EXAMPLES
// 
// 0)
// "ANA"
// 
// Returns: "PALINDROME"
// 
// "ANA" reads the same from left to right and right to left.
// 
// 1)
// "AAAAANNAA"
// 
// Returns: "FAUX"
// 
// This is obviously not a palindrome. Now suppose that we replace each group of consecutive equal letters by a single copy of that letter. That is, we change "AAAAA" to "A", "NN" to "N", and "AA" to "A". In this way we will obtain the new string "ANA", which is a palindrome. Hence the original string is a faux palindrome.
// 
// 2)
// "LEGENDARY"
// 
// Returns: "NOT EVEN FAUX"
// 
// The word "LEGENDARY" already does not contain any group of consecutive equal letters and it is not a palindrome.
// 
// 3)
// "XXXYTYYTTYX"
// 
// Returns: "FAUX"
// 
// After replacing the groups of consecutive equal letters with a single letter, the string becomes "XYTYTYX". "XYTYTYX" is a palindrome.
// 
// 4)
// "TOPCOODEREDOOCPOT"
// 
// Returns: "PALINDROME"
// 
// This word contains some groups of consecutive equal letters, but it is already a palindrome without replacing them by single letters.
// 
// 5)
// "TOPCODEREDOOCPOT"
// 
// Returns: "FAUX"
// 
// 
// 
// 6)
// "XXXXYYYYYZZXXYYY"
// 
// Returns: "NOT EVEN FAUX"
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef string ST;
typedef stringstream SS;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef vector <string> vs;

#define Pf	printf
#define	Sf	scanf

#define	ep	1e-9
#define PI M_PI
#define E M_E

#define	CL(a, b)	memset(a, b, sizeof(a))
#define	mp	make_pair

#define	pb	push_back

#define	all(c)	(c).begin(), (c).end()
#define	tr(i, c)	for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())	//vector & list//

#define forn(i, n)	for(int i = 0, loop_ends_here = (int)n; i < loop_ends_here; i++)
#define forab(i, a, b)	for(int i = a, loop_ends_here = (int) b; i <= loop_ends_here; i++)
#define rep(i, a, b)	for(int i = a, loop_ends_here = (int)b; i>=loop_ends_here; i--)

#define read(n)		scanf("%d", &n)
#define write(n)	printf("%d ", n)
#define writeln(n)	printf("%d\n", n)

class FillBox
{
public:
	int minCubes(int length, int width, int height, vector <int> cubes);
};


int FillBox::minCubes (int length, int width, int height, vector <int> cubes) 
{
	int ret;
	
	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, vector <int> p3, bool hasAnswer, int p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << "{";
	for (int i = 0; int(p3.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p3[i];
	}
	cout << "}";
	cout << "]" << endl;
	FillBox *obj;
	int answer;
	obj = new FillBox();
	clock_t startTime = clock();
	answer = obj->minCubes(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p4;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	vector <int> p3;
	int p4;
	
	{
	// ----- test 0 -----
	p0 = 4;
	p1 = 4;
	p2 = 8;
	int t3[] = {10,10,10};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 2;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 4;
	p1 = 4;
	p2 = 8;
	int t3[] = {10,10,1};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 9;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 10;
	p1 = 10;
	p2 = 11;
	int t3[] = {2000};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 1100;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 10;
	p1 = 10;
	p2 = 11;
	int t3[] = {1099};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = -1;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 37;
	p1 = 42;
	p2 = 59;
	int t3[] = {143821,14382,1438,143,14,1};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 5061;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// You have a length x width x height box, and you want to fill it with cubes.  The cubes have sides that are powers of 2 (1x1x1, 2x2x2, 4x4x4, 8x8x8, etc.).  You are given a vector <int> cubes, the i-th element of which is the number of 2^i x 2^i x 2^i cubes you have (i is a 0-based index).  Return the minimum number of cubes necessary to fill the box, or -1 if it is impossible to do so.
// 
// DEFINITION
// Class:FillBox
// Method:minCubes
// Parameters:int, int, int, vector <int>
// Returns:int
// Method signature:int minCubes(int length, int width, int height, vector <int> cubes)
// 
// 
// CONSTRAINTS
// -length, width and height will each be between 1 and 10^6, inclusive.
// -cubes will contain between 1 and 20 elements, inclusive.
// -Each element of cubes will be between 0 and 10^6, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 4
// 4
// 8
// {10,10,10}
// 
// Returns: 2
// 
// In order to cover the 4x4x8 box we need two 4x4x4 cubes.
// 
// 1)
// 4
// 4
// 8
// {10,10,1}
// 
// Returns: 9
// 
// Same case as before but we have only one 4x4x4 cube so we will use eight 2x2x2 cubes
// 
// 2)
// 10
// 10
// 11
// {2000}
// 
// Returns: 1100
// 
// We have only 1x1x1 cubes. We will need 1100 of those cubes to cover the whole box.
// 
// 3)
// 10
// 10
// 11
// {1099}
// 
// Returns: -1
// 
// We don't have enough 1x1x1 cubes.
// 
// 4)
// 37
// 42
// 59
// {143821,14382,1438,143,14,1}
// 
// Returns: 5061
// 
// 
// 
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
using namespace std;

#define pb	push_back
#define all(a)	a.begin(), a.end()
#define	SZ(a)	int((a).size())

#define forn(i, n)	for(int i = 0; i < n; i++)
#define forab(i, a, b)	for(int i = a; i <= b; i++)
#define rep(i, a, b)	for(int i = a; i>=b; i--)

class Filtering
{
public:
	vector <int> designFilter(vector <int> sizes, string outcome)
	{
		vector <int> ret;
		int a[110], vis[110];

		forn(i, 110)	a[i] = 2, vis[i]= 0;

		forn(i, SZ(sizes))
		{
			if(outcome[i] == 'A')	a[sizes[i]] = 1;
			else			a[sizes[i]] = 0;
		}

		int l = *min_element(all(sizes)), r = *max_element(all(sizes));

		int j, k;
		forab(i, l, r)
		{
			if(vis[i] == 1)	continue;
			if(a[i] == 0 || a[i] == 2)	continue;

			for(j= i; j <= r; j++)	if(a[j] == 0)	break;
			j--;
			forab(K, i, j)	vis[K] = 1;

			for(k = j; k >= i; k--)	if(a[k] == 1)	break;


			ret.pb(i);
			ret.pb(k);
		}

		if(SZ(ret) > 2)	ret.clear();
		
		return ret;
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, string p1, bool hasAnswer, vector <int> p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "\"" << p1 << "\"";
	cout << "]" << endl;
	Filtering *obj;
	vector <int> answer;
	obj = new Filtering();
	clock_t startTime = clock();
	answer = obj->designFilter(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p2.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << p2[i];
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << answer[i];
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p2.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p2[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	string p1;
	vector <int> p2;
	
	{
	// ----- test 0 -----
	int t0[] = {3,4,5,6,7};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "AAAAA";
	int t2[] = {3,7};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {3,4,5,6,7};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "AARAA";
	p2.clear() /*{}*/;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {3,4,5,6,7};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "RAAAA";
	int t2[] = {4,7};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {68,57,7,41,76,53,43,77,84,52,34,48,27,75,36};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "RARRRARRRARARRR";
	int t2[] = {48,57};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {26,81,9,14,43,77,55,57,12,34,29,79,40,25,50};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "ARAAARRARARARAA";
	p2.clear() /*{}*/;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// You recently got a job at a company that designs various kinds of filters, and today, you've been given your first task.  A client needs a filter that accepts some objects and rejects some other objects based on their size.  The requirements are described in the vector <int> sizes and the string outcome.  If character i in outcome is 'A', then all objects of size sizes[i] must be accepted, and if character i is 'R', then all objects of size sizes[i] must be rejected.  If an object's size does not appear in sizes, then it doesn't matter if it is accepted or rejected.
// 
// Unfortunately, your knowledge of filters is very limited, and you can only design filters of one specific kind called (A, B)-filters.  Each such filter is characterized by two integers A and B.  It accepts an object if and only if its size is between A and B, inclusive.  You have excellent (A, B)-filter construction skills, so you can construct any such filter where 1 <= A <= B.
// 
// If it is possible to construct an (A, B)-filter that fulfills all the requirements described in sizes and outcome, return a vector <int> containing the filter's parameters, where element 0 is A and element 1 is B.  If there are several appropriate filters, choose the one that minimizes B - A.  If there are no suitable filters, return an empty vector <int>.
// 
// 
// DEFINITION
// Class:Filtering
// Method:designFilter
// Parameters:vector <int>, string
// Returns:vector <int>
// Method signature:vector <int> designFilter(vector <int> sizes, string outcome)
// 
// 
// CONSTRAINTS
// -sizes will contain between 1 and 50 elements, inclusive.
// -Each element of sizes will be between 1 and 100, inclusive.
// -All elements of sizes will be distinct.
// -outcome will contain the same number of characters as the number of elements in sizes.
// -Each character in outcome will be 'A' or 'R'.
// -outcome will contain at least one 'A' character.
// 
// 
// EXAMPLES
// 
// 0)
// {3, 4, 5, 6, 7}
// "AAAAA"
// 
// Returns: {3, 7 }
// 
// Any filter with A <= 3 and B >= 7 will work in this case. Among them, A = 3 and B = 7 gives the minimal difference of B - A.
// 
// 1)
// {3, 4, 5, 6, 7}
// "AARAA"
// 
// Returns: { }
// 
// This is similar to the previous example, but objects of size 5 need to be rejected. It's impossible to achieve this using a single (A, B)-filter.
// 
// 2)
// {3, 4, 5, 6, 7}
// "RAAAA"
// 
// Returns: {4, 7 }
// 
// However, it's possible to reject only objects of size 3.
// 
// 3)
// {68,57,7,41,76,53,43,77,84,52,34,48,27,75,36}
// "RARRRARRRARARRR"
// 
// Returns: {48, 57 }
// 
// 4)
// {26,81,9,14,43,77,55,57,12,34,29,79,40,25,50}
// "ARAAARRARARARAA"
// 
// Returns: { }
// 
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

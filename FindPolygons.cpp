#include <bits/stdc++.h>
using namespace std;

class FindPolygons
{
public:
	double minimumPolygon(int L);
};

double FindPolygons::minimumPolygon (int L) 
{
	double ret;
	
	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, bool hasAnswer, double p1) {
	cout << "Test " << testNum << ": [" << p0;
	cout << "]" << endl;
	FindPolygons *obj;
	double answer;
	obj = new FindPolygons();
	clock_t startTime = clock();
	answer = obj->minimumPolygon(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == answer && fabs(p1 - answer) <= 1e-9 * max(1.0, fabs(p1));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	int p0;
	double p1;
	
	// ----- test 0 -----
	disabled = false;
	p0 = 4;
	p1 = 0.0;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = 5;
	p1 = -1.0;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = 12;
	p1 = 2.0;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = 4984;
	p1 = 819.0;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// Alice is a high school student.
// One day, her teacher asked her to draw a simple polygon (see Notes for a definition).
// The polygon must satisfy two conditions:
// 
// First, each of its vertices must be at a grid point.
// (I.e., both coordinates of each vertex must be integers.)
// 
// Second, the perimeter of the polygon must be exactly equal to the integer L.
// 
// You are given the int L.
// If there is no such polygon, return -1.
// If there is at least one such polygon, find the one which has the least number of sides. If there are still more than one choice, find the one with the smallest possible difference between the lengths of its longest side and its shortest side. Return the difference between the lengths of its longest side and its shortest side.
// 
// DEFINITION
// Class:FindPolygons
// Method:minimumPolygon
// Parameters:int
// Returns:double
// Method signature:double minimumPolygon(int L)
// 
// 
// NOTES
// -A simple polygon is a polygon such that no two consecutive sides are parallel and no two non-consecutive sides share a common point.
// -Return values with absolute or relative error at most 1e-9 will be accepted as correct. 
// 
// 
// CONSTRAINTS
// -L will be between 1 and 5000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 4
// 
// Returns: 0.0
// 
// There is no triangle whose perimeter is 4, but there is a square.
// 
// 1)
// 5
// 
// Returns: -1.0
// 
// There is no simple polygon that matches all the constraints.
// 
// 2)
// 12
// 
// Returns: 2.0
// 
// There is a triangle whose sides are 3, 4, 5.
// 
// 3)
// 4984
// 
// Returns: 819.0
// 
// 
// 
// END KAWIGIEDIT TESTING

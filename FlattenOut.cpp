#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef string ST;
typedef stringstream SS;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef vector <string> vs;

#define Pf	printf
#define	Sf	scanf

#define	ep	1e-9
#define PI M_PI
#define E M_E

#define	CL(a, b)	memset(a, b, sizeof(a))
#define	mp	make_pair

#define	pb	push_back

#define	all(c)	(c).begin(), (c).end()
#define	tr(i, c)	for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())	//vector & list//

#define forn(i, n)	for(int i = 0, loop_ends_here = (int)n; i < loop_ends_here; i++)
#define forab(i, a, b)	for(int i = a, loop_ends_here = (int) b; i <= loop_ends_here; i++)
#define rep(i, a, b)	for(int i = a, loop_ends_here = (int)b; i>=loop_ends_here; i--)

#define read(n)		scanf("%d", &n)
#define write(n)	printf("%d ", n)
#define writeln(n)	printf("%d\n", n)

class FlattenOut
{
public:
	vector<long long> simulateIt(vector<long long> height, long long T);
};


vector<long long> FlattenOut::simulateIt (vector<long long> height, long long T) 
{
	vector<long long> ret;
	
	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector<long long> p0, long long p1, bool hasAnswer, vector<long long> p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	FlattenOut *obj;
	vector<long long> answer;
	obj = new FlattenOut();
	clock_t startTime = clock();
	answer = obj->simulateIt(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p2.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << p2[i];
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << answer[i];
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p2.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p2[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector<long long> p0;
	long long p1;
	vector<long long> p2;
	
	{
	// ----- test 0 -----
	long long t0[] = {1ll,3ll,-4ll,-4ll,2ll,0ll};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1ll;
	long long t2[] = {0ll,3ll,-3ll,-4ll,1ll,1ll};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	long long t0[] = {1ll,3ll,-4ll,-4ll,2ll,0ll};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2ll;
	long long t2[] = {1ll,2ll,-2ll,-4ll,0ll,1ll};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	long long t0[] = {9999999999999999ll,-9999999999999999ll,9999999999999999ll,-9999999999999999ll};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 9999999999999999ll;
	long long t2[] = {0ll,0ll,0ll,0ll};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	long long t0[] = {0ll,0ll,0ll};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4ll;
	long long t2[] = {0ll,0ll,0ll};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Circular Island is a small undeveloped island with a circular shape.
// The circle is divided into N sectors.
// The sectors are numbered 0 through N-1 in clockwise order.
// Each sector has some constant altitude.
// 
// The inhabitants of the island have some desired altitude.
// This altitude will be given in the input as 0.
// Negative altitudes are lower, positive ones are higher.
// 
// The people on the island decided to spend T days on flattening their island to the desired altitude.
// Each day looked as follows:
// The people formed N teams, one on each segment.
// If the altitude of the segment was negative, the team did nothing that day.
// If the altitude was positive, the team took shovels and removed enough dirt to decrease the altitude by 1.
// Also, that dirt was then moved into the next sector clockwise.
// In other words, if the altitude of sector i was positive, the team on sector i decreased the altitude of sector i by 1, and increased the altitude of sector ((i+1) modulo N) by 1.
// Note that all teams always worked at the same time, so it is possible that the altitude of some sectors was decreased and increased on the same day.
// 
// You are given a vector<long long> height containing N elements.
// The i-th element of height represents the altitude of sector i at the beginning.
// You are also given a long long T specifying the number of days of flattening.
// Return a vector<long long> containing exactly N elements.
// The i-th element of the return value should be the height of sector i after the entire flattening is done.
// 
// 
// DEFINITION
// Class:FlattenOut
// Method:simulateIt
// Parameters:vector<long long>, long long
// Returns:vector<long long>
// Method signature:vector<long long> simulateIt(vector<long long> height, long long T)
// 
// 
// CONSTRAINTS
// -height will contain between 2 and 50 elements, inclusive.
// -Each element of height will be between -10^16 and 10^16, inclusive.
// -T will be between 1 and 10^16, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {1, 3, -4, -4, 2, 0}
// 1
// 
// Returns: {0, 3, -3, -4, 1, 1 }
// 
// In this case there is only one day of flattening.
// The teams on sectors 2, 3, and 5 do nothing.
// The teams on sectors 0, 1, and 4 shovel dirt to the next sector (i.e., sectors 1, 2, and 5).
// The resulting sector altitudes are shown in the output above.
// 
// 1)
// {1, 3, -4, -4, 2, 0}
// 2
// 
// Returns: {1, 2, -2, -4, 0, 1 }
// 
// The initial altitudes are the same as in Example 0, but this time there are two days.
// We already know that the altitudes after the first day will be {0, 3, -3, -4, 1, 1}.
// On the second day, teams on sectors 1, 4, and 5 will be the ones working.
// 
// 2)
// {9999999999999999, -9999999999999999, 9999999999999999, -9999999999999999}
// 9999999999999999
// 
// Returns: {0, 0, 0, 0 }
// 
// Watch out for overflow, the input values may be huge.
// 
// 3)
// {0, 0, 0}
// 4
// 
// Returns: {0, 0, 0 }
// 
// 
// 
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef string ST;
typedef stringstream SS;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef vector <string> vs;

#define Pf	printf
#define	Sf	scanf

#define	ep	1e-9
#define PI M_PI
#define E M_E

#define	CL(a, b)	memset(a, b, sizeof(a))
#define	mp	make_pair

#define	pb	push_back

#define	all(c)	(c).begin(), (c).end()
#define	tr(i, c)	for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())	//vector & list//

#define forn(i, n)	for(int i = 0, loop_ends_here = (int)n; i < loop_ends_here; i++)
#define forab(i, a, b)	for(int i = a, loop_ends_here = (int) b; i <= loop_ends_here; i++)
#define rep(i, a, b)	for(int i = a, loop_ends_here = (int)b; i>=loop_ends_here; i--)

#define read(n)		scanf("%d", &n)
#define write(n)	printf("%d ", n)
#define writeln(n)	printf("%d\n", n)

class FlipGame
{
public:
	int minOperations(vector <string> board);
};


int FlipGame::minOperations (vector <string> board) 
{
	int ret;
	
	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	FlipGame *obj;
	int answer;
	obj = new FlipGame();
	clock_t startTime = clock();
	answer = obj->minOperations(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"1000","1110","1111"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"1111","1111","1111"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"00","00","00"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"00000000","00100000","01000000","00001000","00000000"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"000000000000001100000000000000","000000000000011110000000000000","000000000000111111000000000000","000000000001111111100000000000","000000000011111111110000000000","000000000111111111111000000000","000000001100111111001100000000","000000011000011110000110000000","000000111100111111001111000000","000001111111111111111111100000","000011111111111111111111110000","000111111111000000111111111000","001111111111100001111111111100","011111111111110011111111111110","111111111111111111111111111111"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 29;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Eel Takahashikun is playing a simple game on a rectangular board.
// 
// 
// The rectangular board is divided into H x W unit squares. Each unit square contains a 0 or a 1. In each operation, Takahashikun chooses a shortest path along edges of unit squares from the upper-left corner to the lower-right corner, and flips the numbers in all unit squares that are below the chosen path (i.e., changes all 0s into 1s and vice versa).
// 
// 
// For example, the following picture shows a valid operation. The squares below the chosen path are highlighted in green.
// 
// 
// 
// 
// 
// The operation in the following picture is invalid because the path is not shortest.
// 
// 
// 
// 
// 
// You are given the initial state of the board in vector <string> board. The j-th character of the i-th element is the number written in the unit square at row i, column j. Rows are numbered from top to bottom, and columns are numbered from left to right. Return the minimal number of iterations required to change all numbers to 0s.
// 
// 
// DEFINITION
// Class:FlipGame
// Method:minOperations
// Parameters:vector <string>
// Returns:int
// Method signature:int minOperations(vector <string> board)
// 
// 
// NOTES
// -It is always possible to change all numbers to 0s by a finite number of operations.
// 
// 
// CONSTRAINTS
// -board will contain between 1 and 50 elements, inclusive.
// -Each element of board will contain between 1 and 50 characters, inclusive.
// -Each element of board will contain the same number of characters.
// -Each character in board will be '0' or '1'.
// 
// 
// EXAMPLES
// 
// 0)
// {"1000",
//  "1110",
//  "1111"}
// 
// Returns: 1
// 
// Takahashikun can flip all 1s in one operation.
// 
// 
// 1)
// {"1111",
//  "1111",
//  "1111"}
// 
// Returns: 1
// 
// 
// 
// 2)
// {"00",
//  "00",
//  "00"}
// 
// Returns: 0
// 
// 
// 
// 3)
// {"00000000",
//  "00100000",
//  "01000000",
//  "00001000",
//  "00000000"}
// 
// Returns: 4
// 
// 
// 
// 4)
// {"000000000000001100000000000000",
//  "000000000000011110000000000000",
//  "000000000000111111000000000000",
//  "000000000001111111100000000000",
//  "000000000011111111110000000000",
//  "000000000111111111111000000000",
//  "000000001100111111001100000000",
//  "000000011000011110000110000000",
//  "000000111100111111001111000000",
//  "000001111111111111111111100000",
//  "000011111111111111111111110000",
//  "000111111111000000111111111000",
//  "001111111111100001111111111100",
//  "011111111111110011111111111110",
//  "111111111111111111111111111111"}
// 
// Returns: 29
// 
// 
// 
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

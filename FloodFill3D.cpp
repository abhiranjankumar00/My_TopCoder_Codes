#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef string ST;
typedef stringstream SS;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef vector <string> vs;

#define endl 		("\n")
#define DEBUG(x)	cout << #x << " = " << x << "\n"
#define Pf		printf
#define	Sf		scanf

#define	ep		1e-9
#define PI		M_PI
#define E 		M_E

#define	CL(a, b)	memset(a, b, sizeof(a))
#define	mp		make_pair
#define	pb		push_back

#define	all(c)		(c).begin(), (c).end()
#define	tr(i, c)	for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())		//vector & list//

#define forn(i, n)	for(int i = 0, loop_ends_here = (int)n; i < loop_ends_here ; i++)
#define forab(i, a, b)	for(int i = a, loop_ends_here = (int)b; i <= loop_ends_here; i++)
#define rep(i, a, b)	for(int i = a, loop_ends_here = (int)b; i >= loop_ends_here; i--)

#define read(n)		scanf("%d", &n)
#define write(n)	printf("%d ", n)
#define writeln(n)	printf("%d\n", n)

class FloodFill3D
{
public:
	long long countBlack(vector <string> SArray, vector <string> TArray, vector <string> UArray);
};


long long FloodFill3D::countBlack (vector <string> SArray, vector <string> TArray, vector <string> UArray) 
{
	long long ret;
	
	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <string> p1, vector <string> p2, bool hasAnswer, long long p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p2[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	FloodFill3D *obj;
	long long answer;
	obj = new FloodFill3D();
	clock_t startTime = clock();
	answer = obj->countBlack(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	vector <string> p1;
	vector <string> p2;
	long long p3;
	
	{
	// ----- test 0 -----
	string t0[] = {"oxo"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"oxo"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"oxo"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 19ll;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"ooo"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"oo"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"o"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 0ll;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"xxo","oox","o"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"x","o","x","o"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"ooo","xxxoo","oxx"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 242ll;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"xxxxxxxxxxxxxxxxxxxx","xxooooooooooooooooxx","xxooooooooooooooooxx","xxxxxxxxooooxxxxxxxx","xxxxxxxxooooxxxxxxxx","xxxxxxxxooooxxxxxxxx","xxxxxxxxooooxxxxxxxx","xxxxxxxxooooxxxxxxxx","xxxxxxxxooooxxxxxxxx","xxxxxxxxooooxxxxxxxx","xxxxxxxxooooxxxxxxxx","xxxxxxxxooooxxxxxxxx","xxxxxxxxooooxxxxxxxx","xxxxxxxxxxxxxxxxxxxx"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"xxxxxxxxxxxxxxxxxxxx","xxxxxxxoooooooxxxxxx","xxxxxoooooooooooxxxx","xxxxooooooooooooxxxx","xxxxooooxxxxxoooxxxx","xxxxoooxxxxxxxxxxxxx","xxxxoooxxxxxxxxxxxxx","xxxxoooxxxxxxxxxxxxx","xxxxooooxxxxoooxxxxx","xxxxoooooooooooxxxxx","xxxxxooooooooooxxxxx","xxxxxxoooooooxxxxxxx","xxxxxxxxxxxxxxxxxxxx"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"xxxxxxxxxxxxxxxxxxxx","xxxxxxxoooooxxxxxxxx","xxxxoooooooooooxxxxx","xxoooooooooooooooxxx","xxoooooxxxxxoooooxxx","xxooooxxxxxxxooooxxx","xxooooxxxxxxxooooxxx","xxooooxxxxxxxooooxxx","xxooooxxxxxxxooooxxx","xxoooooxxxxxoooooxxx","xxxxoooooooooooxxxxx","xxxxxxxoooooxxxxxxxx","xxxxxxxxxxxxxxxxxxxx"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 15027148ll;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// There is a 3-dimensional grid that consists of N*M*L cells.
// Each of the cells has three integer coordinates (i,j,k), where 0 <= i < N, 0 <= j < M, and 0 <= k < L.
// Initially, the cells are colorless.
// You are now going to color each of the cells either white or black.
// 
// You will be given three strings: S, T, and U.
// Each of these strings only contains the characters 'o' and 'x'.
// The lengths of these strings are N, M, and L, respectively.
// 
// The coloring of cells will consist of two steps.
// The first step looks as follows:
// For each i,j,k: you color the cell (i,j,k) white if the three characters S[i], T[j], and U[k] are all the same.
// Otherwise, you color the cell black.
// 
// Once the first step is done, the white cells will form some connected components.
// (Two cells belong to the same component if they share a common face. Belonging to the same component is transitive.)
// A white component is said to be on the boundary, if at least one of its cells has a face that is on the boundary of the grid.
// 
// In the second step, the white components that are on the boundary will remain white, and the color of all remaining white components is changed to black.
// 
// You are given three vector <string>s: SArray, TArray, and UArray.
// Concatenate all elements of SArray to get S. In the same way, TArray yields T and UArray yields U.
// Your method must return the number of black cells after the second step.
// 
// 
// DEFINITION
// Class:FloodFill3D
// Method:countBlack
// Parameters:vector <string>, vector <string>, vector <string>
// Returns:long long
// Method signature:long long countBlack(vector <string> SArray, vector <string> TArray, vector <string> UArray)
// 
// 
// CONSTRAINTS
// -SArray, TArray and UArray will each contain between 1 and 50 elements, inclusive.
// -Each element of SArray, TArray and UArray will contain between 1 and 50 elements, inclusive.
// -Each character of SArray, TArray and UArray will be either 'o' or 'x'.
// 
// 
// EXAMPLES
// 
// 0)
// {"oxo"}
// {"oxo"}
// {"oxo"}
// 
// Returns: 19
// 
// The figure below shows how the coloring is done.
// After the first step, 9 cells are white and the other 18 are black.
// In the second step, the cell (1,1,1) changes color to black.
// So there are 18+1 = 19 black cells after the second step.
// 
// 
// 
// 
// 1)
// {"ooo"}
// {"oo"}
// {"o"}
// 
// Returns: 0
// 
// There are 3*2*1=6 cells and all of those are colored in white in the first step.
// Since this connected component shares at least one face with the boundary of the cells, it is not recolored.
// Therefore, the resulting number of black cells are 0.
// 
// 
// 2)
// {"xxo", "oox", "o"}
// {"x", "o", "x", "o"}
// {"ooo", "xxxoo", "oxx"}
// 
// Returns: 242
// 
// Do not forget to concatenate all elements of the vector <string>s to get S, T, and U.
// 
// 3)
// {"xxxxxxxxxxxxxxxxxxxx"
// ,"xxooooooooooooooooxx"
// ,"xxooooooooooooooooxx"
// ,"xxxxxxxxooooxxxxxxxx"
// ,"xxxxxxxxooooxxxxxxxx"
// ,"xxxxxxxxooooxxxxxxxx"
// ,"xxxxxxxxooooxxxxxxxx"
// ,"xxxxxxxxooooxxxxxxxx"
// ,"xxxxxxxxooooxxxxxxxx"
// ,"xxxxxxxxooooxxxxxxxx"
// ,"xxxxxxxxooooxxxxxxxx"
// ,"xxxxxxxxooooxxxxxxxx"
// ,"xxxxxxxxooooxxxxxxxx"
// ,"xxxxxxxxxxxxxxxxxxxx"}
// 
// {"xxxxxxxxxxxxxxxxxxxx"
// ,"xxxxxxxoooooooxxxxxx"
// ,"xxxxxoooooooooooxxxx"
// ,"xxxxooooooooooooxxxx"
// ,"xxxxooooxxxxxoooxxxx"
// ,"xxxxoooxxxxxxxxxxxxx"
// ,"xxxxoooxxxxxxxxxxxxx"
// ,"xxxxoooxxxxxxxxxxxxx"
// ,"xxxxooooxxxxoooxxxxx"
// ,"xxxxoooooooooooxxxxx"
// ,"xxxxxooooooooooxxxxx"
// ,"xxxxxxoooooooxxxxxxx"
// ,"xxxxxxxxxxxxxxxxxxxx"}
// 
// {"xxxxxxxxxxxxxxxxxxxx"
// ,"xxxxxxxoooooxxxxxxxx"
// ,"xxxxoooooooooooxxxxx"
// ,"xxoooooooooooooooxxx"
// ,"xxoooooxxxxxoooooxxx"
// ,"xxooooxxxxxxxooooxxx"
// ,"xxooooxxxxxxxooooxxx"
// ,"xxooooxxxxxxxooooxxx"
// ,"xxooooxxxxxxxooooxxx"
// ,"xxoooooxxxxxoooooxxx"
// ,"xxxxoooooooooooxxxxx"
// ,"xxxxxxxoooooxxxxxxxx"
// ,"xxxxxxxxxxxxxxxxxxxx"}
// 
// 
// Returns: 15027148
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

#include <bits/stdc++.h>
using namespace std;

class FoxAndCity
{
public:
	int minimalCost(vector <string> linked, vector <int> want);
};

int FoxAndCity::minimalCost (vector <string> linked, vector <int> want) 
{
	int ret;
	
	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <int> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	FoxAndCity *obj;
	int answer;
	obj = new FoxAndCity();
	clock_t startTime = clock();
	answer = obj->minimalCost(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	vector <int> p1;
	int p2;
	
	{
	// ----- test 0 -----
	string t0[] = {"NYN","YNY","NYN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0,1,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 0;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"NYNN","YNYN","NYNY","NNYN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0,3,3,3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 5;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"NYNNNY","YNYNNN","NYNYNN","NNYNYN","NNNYNY","YNNNYN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0,2,2,2,2,2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 2;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"NYY","YNN","YNN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0,0,0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 2;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"NYNNNN","YNYNNN","NYNYYY","NNYNYY","NNYYNY","NNYYYN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0,1,2,3,0,3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 3;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {"NYNNNN","YNYNNN","NYNYYY","NNYNYY","NNYYNY","NNYYYN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0,1,2,4,0,4};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 6;
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	string t0[] = {"NYNYYYYYYYY","YNYNNYYNYYY","NYNNNYYNYYN","YNNNYYYYYYY","YNNYNYYYNYY","YYYYYNNYYNY","YYYYYNNNYYY","YNNYYYNNNYY","YYYYNYYNNNY","YYYYYNYYNNY","YYNYYYYYYYN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0,1,2,0,0,5,1,3,0,2,3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 28;
	all_right = KawigiEdit_RunTest(6, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// There is a country with n cities, numbered 0 through n-1.
// City 0 is the capital.
// The road network in the country forms an undirected connected graph.
// In other words:
// Some pairs of cities are connected by bidirectional roads.
// For every city there is at least one sequence of consecutive roads that leads from the city to the capital.
// (Whenever two roads need to cross outside of a city, the crossing is done using a bridge, so there are no intersections outside of the cities.)
// 
// 
// You are given a vector <string> linked that describes the road network.
// For each i and j, linked[i][j] is 'Y' if the cities i and j are already connected by a direct road, and it is 'N' otherwise.
// 
// 
// The distance between two cities is the smallest number of roads one needs to travel to get from one city to the other.
// The people living outside of the capital are usually unhappy about their distance from the capital.
// You are also given a vector <int> want with n elements.
// For each i, want[i] is the desired distance between city i and the capital (city 0).
// 
// 
// Fox Ciel is in charge of building new roads.
// Each new road must again be bidirectional and connect two cities.
// Once the new roads are built, the citizens will evaluate how unhappy they are with the resulting road network:
// For each i: Let real[i] be the new distance between city i and the capital.
// Then the people in city i increase the unhappiness of the country by (want[i] - real[i])^2.
// 
// 
// Return the minimal total unhappiness Ciel can achieve by building some (possibly zero) new roads.
// 
// DEFINITION
// Class:FoxAndCity
// Method:minimalCost
// Parameters:vector <string>, vector <int>
// Returns:int
// Method signature:int minimalCost(vector <string> linked, vector <int> want)
// 
// 
// CONSTRAINTS
// -n will be between 2 and 40, inclusive.
// -linked will contain exactly n elements.
// -Each element of linked will contain exactly n characters.
// -Each character in linked will be 'Y' or 'N'.
// -For each i and j, linked[i][j] = linked[j][i].
// -For each i, linked[i][i] = 'N'.
// -The graph described by linked will be connected.
// -want will contain exactly n elements.
// -Each element in want will be between 0 and n-1, inclusive.
// -want[0] will be 0.
// 
// 
// EXAMPLES
// 
// 0)
// {"NYN",
//  "YNY",
//  "NYN"}
// {0, 1, 1}
// 
// Returns: 0
// 
// Ciel can build a road between cities 0 and 2. Then real[1]=1, real[2]=1, and the total unhappiness is 0.
// 
// 1)
// {"NYNN",
//  "YNYN",
//  "NYNY",
//  "NNYN"}
// {0, 3, 3, 3}
// 
// Returns: 5
// 
// The optimal solution is not to build any new roads. Then the total unhappiness will be (3-1)^2 + (3-2)^2 + (3-3)^2 = 5.
// 
// 2)
// {"NYNNNY",
//  "YNYNNN",
//  "NYNYNN",
//  "NNYNYN",
//  "NNNYNY",
//  "YNNNYN"}
// {0, 2, 2, 2, 2, 2}
// 
// Returns: 2
// 
// One of the optimal solutions is to build a road between cities 1 and 3.
// 
// 3)
// {"NYY","YNN","YNN"}
// {0,0,0}
// 
// Returns: 2
// 
// 
// 
// 4)
// {"NYNNNN",
//  "YNYNNN",
//  "NYNYYY",
//  "NNYNYY",
//  "NNYYNY",
//  "NNYYYN"}
// 
// {0, 1, 2, 3, 0, 3}
// 
// Returns: 3
// 
// 
// 
// 5)
// {"NYNNNN",
//  "YNYNNN",
//  "NYNYYY",
//  "NNYNYY",
//  "NNYYNY",
//  "NNYYYN"}
// {0, 1, 2, 4, 0, 4}
// 
// Returns: 6
// 
// 
// 
// 6)
// {"NYNYYYYYYYY","YNYNNYYNYYY","NYNNNYYNYYN","YNNNYYYYYYY","YNNYNYYYNYY","YYYYYNNYYNY","YYYYYNNNYYY","YNNYYYNNNYY","YYYYNYYNNNY","YYYYYNYYNNY","YYNYYYYYYYN"}
// {0,1,2,0,0,5,1,3,0,2,3}
// 
// Returns: 28
// 
// 
// 
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef string ST;
typedef stringstream SS;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef vector <string> vs;

#define Pf	printf
#define	Sf	scanf

#define	ep	1e-9
#define PI M_PI
#define E M_E

#define	CL(a, b)	memset(a, b, sizeof(a))
#define	mp	make_pair

#define	pb	push_back

#define	all(c)	(c).begin(), (c).end()
#define	tr(i, c)	for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())	//vector & list//

#define forn(i, n)	for(int i = 0, loop_ends_here = (int)n; i < loop_ends_here; i++)
#define forab(i, a, b)	for(int i = a, loop_ends_here = (int) b; i <= loop_ends_here; i++)
#define rep(i, a, b)	for(int i = a, loop_ends_here = (int)b; i>=loop_ends_here; i--)

#define read(n)		scanf("%d", &n)
#define write(n)	printf("%d ", n)
#define writeln(n)	printf("%d\n", n)

int ret = 0, split;
vi tim;

int f(int idx = 0, int start =0) {
	
	if(idx + 1 == tim.size() -1) {
		int m = max(tim[idx], tim[idx+1]);
		return start + split + m;
	//	int ret = max(ret, start + split + m);
	//	return ret;
	}
	
	if(idx == tim.size() - 1) {
		return start + tim[idx];
//		int ret = max(ret, start + tim[idx]);
//		return ret; 
	}

	if(idx == tim.size())
		return 0;
		
	int cnt = 1;
	int t = start;
	
	while(cnt < tim.size() - idx) {
		cnt *= 2;
		t += split;
	}
	
	int mm = tim[idx];
	forab(i, idx+1, tim.size() - 1)
		mm = max(tim[i], mm);

	int ret1 = mm + t;
	
//	ret = max(ret, start + split + tim[idx]);
	int ret2 = max (f(idx+1, split + start), start + split + tim[idx]);
	
	return min(ret1, ret2);
}

class FoxAndDoraemon
{
public:
	int minTime(vector <int> workCost, int splitCost)
	{
		ret = 0;
		if(workCost.size() == 1)
			return workCost[0];
		
		if(workCost.size() == 2)
			return splitCost + max(workCost[0], workCost[1]);
				
		tim = workCost;
		split = splitCost;
		sort(all(tim));
		reverse(all(tim));
		return f();
		
		return ret;
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	FoxAndDoraemon *obj;
	int answer;
	obj = new FoxAndDoraemon();
	clock_t startTime = clock();
	answer = obj->minTime(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	int t0[] = {1,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1000;
	p2 = 1002;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {3,6,9,12};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1000;
	p2 = 2012;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {1000,100,10,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	p2 = 1001;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {1712,1911,1703,1610,1697,1612};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 100;
	p2 = 2012;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {3000,3000,3000,3000,3000,3000,3000,3000,3000,3000};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3000;
	p2 = 15000;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	int t0[] = {58};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3600;
	p2 = 58;
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Fox Ciel has lots of homework to do.
// The homework consists of some mutually independent tasks. Different tasks may take different amounts of time to complete.
// You are given a vector <int> workCost. For each i, the i-th task takes workCost[i] seconds to complete.
// She would like to attend a party and meet her friends, thus she wants to finish all tasks as quickly as possible.
// 
// 
// 
// The main problem is that all foxes, including Ciel, really hate doing homework.
// Each fox is only willing to do one of the tasks.
// Luckily, Doraemon, a robotic cat from the 22nd century, gave Fox Ciel a split hammer: 
// a magic gadget which can split any fox into two foxes.
// 
// 
// 
// You are given an int splitCost.
// Using the split hammer on a fox is instantaneous.
// Once a hammer is used on a fox, the fox starts to split.
// After splitCost seconds she will turn into two foxes -- the original fox and another completely new fox.
// While a fox is splitting, it is not allowed to use the hammer on her again.
// 
// 
// 
// The work on a task cannot be interrupted: once a fox starts working on a task, she must finish it.
// It is not allowed for multiple foxes to cooperate on the same task.
// A fox cannot work on a task while she is being split using the hammer.
// It is possible to split the same fox multiple times.
// It is possible to split a fox both before and after she solves one of the tasks.
// 
// 
// 
// Compute and return the smallest amount of time in which the foxes can solve all the tasks.
// 
// DEFINITION
// Class:FoxAndDoraemon
// Method:minTime
// Parameters:vector <int>, int
// Returns:int
// Method signature:int minTime(vector <int> workCost, int splitCost)
// 
// 
// CONSTRAINTS
// -workCost will contain between 1 and 50 elements, inclusive.
// -Each element in workCost will be between 1 and 3,600, inclusive.
// -splitCost will be between 1 and 3,600, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {1,2}
// 1000
// 
// Returns: 1002
// 
// Fox Ciel is only willing to do one task. She is given two tasks, therefore she must split once. 
// The optimal strategy is to use the split hammer immediately.
// After 1000 seconds we have two foxes. 
// Each of them will do one of the tasks in parallel.
// 
// 1)
// {3,6,9,12}
// 1000
// 
// Returns: 2012
// 
// 
// 
// 2)
// {1000,100,10,1}
// 1
// 
// Returns: 1001
// 
// One optimal solution:
// 
// We start with a single fox A.
// Immediatelly, we use the split hammer.
// In 1 second we will have foxes A and B.
// Fox A will start working on task 0.
// At the same time, fox B will start working on task 1.
// Fox B will be done 101 seconds from the start.
// As she already solved a task, we need more foxes to do tasks 2 and 3.
// Therefore we use the split hammer on B.
// At 102 seconds from the start we will get a new fox C and let her solve task 2.
// We use the split hammer on B again.
// At 103 seconds from the start we will get a new fox D and let her solve task 3.
// 
// 
// 3)
// {1712,1911,1703,1610,1697,1612}
// 100
// 
// Returns: 2012
// 
// 
// 
// 4)
// {3000,3000,3000,3000,3000,3000,3000,3000,3000,3000}
// 3000
// 
// Returns: 15000
// 
// 
// 
// 5)
// {58}
// 3600
// 
// Returns: 58
// 
// 
// 
// END KAWIGIEDIT TESTING




//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

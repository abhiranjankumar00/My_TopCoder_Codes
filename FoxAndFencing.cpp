#include <bits/stdc++.h>
using namespace std;

class FoxAndFencing
{
public:
	string WhoCanWin(int mov1, int mov2, int rng1, int rng2, int d);
};

string FoxAndFencing::WhoCanWin (int mov1, int mov2, int rng1, int rng2, int d) 
{
  string win = "Ceil", lose = "Liss", draw = "Draw";
  if(mov1 + rng1 >= d)
    return win;
  if(mov2 + rng2 >= d + mov1)
    return lose;
  if(mov1 == mov2)
    return draw;
	string ret;
	
	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, int p4, bool hasAnswer, string p5) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3 << "," << p4;
	cout << "]" << endl;
	FoxAndFencing *obj;
	string answer;
	obj = new FoxAndFencing();
	clock_t startTime = clock();
	answer = obj->WhoCanWin(p0, p1, p2, p3, p4);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p5 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p5;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	int p0;
	int p1;
	int p2;
	int p3;
	int p4;
	string p5;
	
	// ----- test 0 -----
	disabled = false;
	p0 = 1;
	p1 = 58;
	p2 = 1;
	p3 = 58;
	p4 = 2;
	p5 = "Ciel";
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = 2;
	p1 = 1;
	p2 = 1;
	p3 = 100;
	p4 = 50;
	p5 = "Liss";
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = 2;
	p1 = 1;
	p2 = 1;
	p3 = 100;
	p4 = 150;
	p5 = "Draw";
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = 100;
	p1 = 100;
	p2 = 100;
	p3 = 100;
	p4 = 100000000;
	p5 = "Draw";
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = 100;
	p1 = 1;
	p2 = 100;
	p3 = 1;
	p4 = 100000000;
	p5 = "Ciel";
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 5 -----
	disabled = false;
	p0 = 100;
	p1 = 1;
	p2 = 100;
	p3 = 250;
	p4 = 100000000;
	p5 = "Draw";
	all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 6 -----
	disabled = false;
	p0 = 100;
	p1 = 1;
	p2 = 100;
	p3 = 150;
	p4 = 100000000;
	p5 = "Ciel";
	all_right = (disabled || KawigiEdit_RunTest(6, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 7 -----
	disabled = false;
	p0 = 100;
	p1 = 50;
	p2 = 100;
	p3 = 1;
	p4 = 100000000;
	p5 = "Ciel";
	all_right = (disabled || KawigiEdit_RunTest(7, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 8 -----
	disabled = false;
	p0 = 100;
	p1 = 150;
	p2 = 100;
	p3 = 1;
	p4 = 100000000;
	p5 = "Draw";
	all_right = (disabled || KawigiEdit_RunTest(8, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Fox Ciel is playing a board game with her friend Squirrel Liss.
// The game is played on an infinite strip of paper.
// The strip of paper is divided into consecutive cells.
// Each cell has an integer coordinate.
// Formally, for each integer i, the left neighbor of cell i is cell (i-1) and the right neighbor of cell i is cell (i+1).
// 
// 
// 
// Each of the players has a single token called the fencer.
// At the beginning of the game, Ciel's fencer is in cell 0 and Liss's fencer is in cell d.
// Each of the fencers has two limits: its maximum move length and its hitting range.
// For Ciel's fencer the maximum move length is mov1 and the hitting range is rng1.
// Similarly, for Liss's fencer we have the parameters mov2 and rng2.
// Note that the parameters of Liss's fencer may differ from the ones of Ciel's fencer.
// 
// 
// 
// The players take alternating turns.
// Ciel goes first.
// In each turn the current player starts by moving her fencer.
// The distance between the original cell and the destination cell must be at most equal to the fencer's maximum move length.
// (It is also allowed to leave the fencer in the same cell.)
// Then, the current player checks whether the other fencer lies within the hitting range - that is, whether the current distance between the fencers is at most equal to the current fencer's hitting range.
// If that is the case, the game ends and the current player wins.
// 
// 
// 
// You are given the ints mov1, mov2, rng1, rng2, and d.
// Return "Ciel" (quotes for clarity) if Fox Ciel has a winning strategy, "Liss" if Squirrel Liss has a winning strategy, and "Draw" otherwise.
// 
// DEFINITION
// Class:FoxAndFencing
// Method:WhoCanWin
// Parameters:int, int, int, int, int
// Returns:string
// Method signature:string WhoCanWin(int mov1, int mov2, int rng1, int rng2, int d)
// 
// 
// CONSTRAINTS
// -mov1 will be between 1 and 100,000,000, inclusive.
// -mov2 will be between 1 and 100,000,000, inclusive.
// -rng1 will be between 1 and 100,000,000, inclusive.
// -rng2 will be between 1 and 100,000,000, inclusive.
// -d will be between 1 and 100,000,000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 1
// 58
// 1
// 58
// 2
// 
// Returns: "Ciel"
// 
// The attributes of Ciel's fencer are much smaller than the attributes of Liss's fencer.
// Luckily for Ciel, she can win the game in her first turn:
// she should move her fencer to cell 1 and from there she can hit the other fencer.
// 
// 1)
// 2
// 1
// 1
// 100
// 50
// 
// Returns: "Liss"
// 
// Ciel cannot score a hit in the first turn.
// After Ciel's turn, her fencer will be on one of the cells {-2,-1,0,1,2}.
// Regardless of its precise location, Liss can always move her fencer one cell to the left and then hit Ciel.
// 
// 2)
// 2
// 1
// 1
// 100
// 150
// 
// Returns: "Draw"
// 
// Clearly, Ciel has no chance of winning this game.
// However, this time the initial distance d is big enough for Ciel to escape.
// 
// 3)
// 100
// 100
// 100
// 100
// 100000000
// 
// Returns: "Draw"
// 
// 
// 
// 4)
// 100
// 1
// 100
// 1
// 100000000
// 
// Returns: "Ciel"
// 
// 
// 
// 5)
// 100
// 1
// 100
// 250
// 100000000
// 
// Returns: "Draw"
// 
// 
// 
// 6)
// 100
// 1
// 100
// 150
// 100000000
// 
// Returns: "Ciel"
// 
// 
// 
// 7)
// 100
// 50
// 100
// 1
// 100000000
// 
// Returns: "Ciel"
// 
// 
// 
// 8)
// 100
// 150
// 100
// 1
// 100000000
// 
// Returns: "Draw"
// 
// 
// 
// END KAWIGIEDIT TESTING

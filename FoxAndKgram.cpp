#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef string ST;
typedef stringstream SS;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef vector <string> vs;

#define Pf	printf
#define	Sf	scanf

#define	ep	1e-9
#define PI M_PI
#define E M_E

#define	CL(a, b)	memset(a, b, sizeof(a))
#define	mp	make_pair

#define	pb	push_back

#define	all(c)	(c).begin(), (c).end()
#define	tr(i, c)	for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())	//vector & list//

#define forn(i, n)	for(int i = 0, loop_ends_here = (int)n; i < loop_ends_here; i++)
#define forab(i, a, b)	for(int i = a, loop_ends_here = (int) b; i <= loop_ends_here; i++)
#define rep(i, a, b)	for(int i = a, loop_ends_here = (int)b; i>=loop_ends_here; i--)

#define read(n)		scanf("%d", &n)
#define write(n)	printf("%d ", n)
#define writeln(n)	printf("%d\n", n)


class FoxAndKgram
{
public:
	int maxK(vector <int> len)
	{
		int sz = len.size();
		int ret= 0;
		int cnt[55] = {0};
		
		tr(it, len)
			cnt[*it]++;
			
		forab(k, 1, 50) {
			int tmp = cnt[k];
			int kk = k-1;
			if(kk % 2 == 1)
				forab(i, 1, kk/2)
					tmp += min(cnt[i], cnt[kk-i]);
			else {
				forab(i, 1, kk/2 - 1)
					tmp += min(cnt[i], cnt[kk-i]);
				tmp += cnt[kk/2]/2;
			}
				
			if(tmp >= k)
				ret = k;
		}
/*
		forab(k, 1, 50) {
			int a = 0, b = 0;
			
			forn(i, len.size()) {
				if(len[i] == k)
					a++;
				forab(j, i+1, len.size() - 1)
					if(len[i] + len[j] == k-1)
						b++;
			}
			Pf("k = %d, a = %d, b = %d\n", k, a, b);
			if(min(a, b) >= k)
				ret = k;
		}
*/				
		return ret;
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	FoxAndKgram *obj;
	int answer;
	obj = new FoxAndKgram();
	clock_t startTime = clock();
	answer = obj->maxK(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	int p1;
	
	{
	// ----- test 0 -----
	int t0[] = {1,1,1,1,3};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {2,2,1,3,5,5,5};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 5;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {2,2,2,2,2,2,2,2,2,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 5;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {1,2,3,1,2,4,2,3,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	int t0[] = {2,3,5,7,11,13,17,19,23,29};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Fox Ciel has some pencils.
// Before she'll start writing her homework, she wants to place them into a mystic pattern for fun.
// Different pencils she has may have different lengths.
// You are given a vector <int> len. For each i, the length of i-th pencil is len[i]
// 
// 
// 
// The pattern she wants to create is called a k-gram.
// A k-gram is a pattern consisting of k rows, each of length k.
// There are only two types of valid rows:
// 
// Yang: A row containing a single pencil of length k.
// Yin: A row containing two pencils such that the sum of their lengths is (k-1). The pencils will be separated by a space of length 1.
// 
// 
// 
// 
// Compute and return the largest positive integer k such that Fox Ciel can use some of her pencils to form a k-gram.
// If she is unable to form any k-grams, return 0 instead.
// 
// DEFINITION
// Class:FoxAndKgram
// Method:maxK
// Parameters:vector <int>
// Returns:int
// Method signature:int maxK(vector <int> len)
// 
// 
// CONSTRAINTS
// -len will contain between 1 and 50 elements, inclusive.
// -Each element in len will be between 1 and 50, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {1,1,1,1,3}
// 
// Returns: 3
// 
// All pencils can be used to form a 3-gram. One valid 3-gram follows:
// 
// - -
// ---
// - -
// 
// 
// 1)
// {2,2,1,3,5,5,5}
// 
// Returns: 5
// 
// One of the valid 5-grams:
// 
// -----
// -- --
// - ---
// -----
// -----
// 
// 
// 2)
// {1}
// 
// Returns: 1
// 
// 
// 
// 3)
// {2,2,2,2,2,2,2,2,2,2}
// 
// Returns: 5
// 
// 
// 
// 4)
// {1,2,3,1,2,4,2,3,1}
// 
// Returns: 4
// 
// Note that it is not necessary to use all of the pencils.
// 
// 5)
// {2,3,5,7,11,13,17,19,23,29}
// 
// Returns: 0
// 
// 
// 
// END KAWIGIEDIT TESTING




//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

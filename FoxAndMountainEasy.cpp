#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
#include <iterator>
#include <fstream>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef string ST;
typedef stringstream SS;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef vector <string> vs;

#define DEBUG(x)	cout << #x << " = " << x << "\n"
#define endl 		("\n")

#define	ep		1e-9
#define PI		M_PI
#define E 		M_E

#define	CL(a, b)	memset(a, b, sizeof(a))
#define	mp		make_pair
#define	pb		push_back

#define	all(c)		(c).begin(), (c).end()
#define	tr(i, c)	for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())		//vector & list//

#define forn(i, n)	for(int i = 0, loop_ends_here = (int)n; i < loop_ends_here ; i++)
#define forab(i, a, b)	for(int i = a, loop_ends_here = (int)b; i <= loop_ends_here; i++)
#define rep(i, a, b)	for(int i = a, loop_ends_here = (int)b; i >= loop_ends_here; i--)

#define Pf		printf
#define	Sf		scanf

#define read(n)		scanf("%d", &n)
#define write(n)	printf("%d ", n)
#define writeln(n)	printf("%d\n", n)

/*
#ifdef DEBUG
	#undef DEBUG
#endif
#define DEBUG
*/

class FoxAndMountainEasy
{
public:
	string possible(int n, int h0, int hn, string history);
};

string FoxAndMountainEasy::possible (int n, int h0, int hn, string history) 
{
	string yes = "YES", no = "NO";
	int curHt = h0, mnHt = h0;
	tr(it, history) {
		if(*it == 'U')
			curHt++;
		else
			curHt--;
		mnHt = min(mnHt, curHt);
	}
	mnHt = max(0, -mnHt);
	DEBUG(mnHt);
	cout << endl;
	string ans;
	curHt = h0;
	int N = n;
	forn(i, mnHt) {
		curHt++;
		ans += 'U';
		N--;
	}
	DEBUG("#1");
	DEBUG(ans);
	DEBUG(N);
	tr(it, history) {
		ans += *it;
		N--;
		if(*it == 'U')
			curHt++;
		else
			curHt--;
	}
	DEBUG("#2");
	DEBUG(ans);
	DEBUG(N);
	if(N < 0)
		return no;

	while(N-- > 0) {
		if(hn > curHt) {
			ans+= 'U';
			curHt++;
		}
		else {
			ans += 'D';
			curHt--;
		}
	}
	DEBUG("#3");
	DEBUG(ans);
	DEBUG(N);
	return curHt == hn ? yes : no;
	
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, string p3, bool hasAnswer, string p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << "\"" << p3 << "\"";
	cout << "]" << endl;
	FoxAndMountainEasy *obj;
	string answer;
	obj = new FoxAndMountainEasy();
	clock_t startTime = clock();
	answer = obj->possible(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p4 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p4;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	string p3;
	string p4;
	
	{
	// ----- test 0 -----
	p0 = 4;
	p1 = 0;
	p2 = 4;
	p3 = "UU";
	p4 = "YES";
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 4;
	p1 = 0;
	p2 = 4;
	p3 = "D";
	p4 = "NO";
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 4;
	p1 = 100000;
	p2 = 100000;
	p3 = "DDU";
	p4 = "YES";
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 4;
	p1 = 0;
	p2 = 0;
	p3 = "DDU";
	p4 = "NO";
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 20;
	p1 = 20;
	p2 = 20;
	p3 = "UDUDUDUDUD";
	p4 = "YES";
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 20;
	p1 = 0;
	p2 = 0;
	p3 = "UUUUUUUUUU";
	p4 = "YES";
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	p0 = 20;
	p1 = 0;
	p2 = 0;
	p3 = "UUUUUUUUUUU";
	p4 = "NO";
	all_right = KawigiEdit_RunTest(6, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 7 -----
	p0 = 2;
	p1 = 0;
	p2 = 0;
	p3 = "DD";
	all_right = KawigiEdit_RunTest(7, p0, p1, p2, p3, false, p4) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Fox Ciel lives in a beautiful countryside.
// She loves climbing mountains.
// Yesterday, she went hiking in the mountains.
// 
// 
// 
// Her trip can be described as a sequence of (n+1) integers: h[0], h[1], ..., h[n]. 
// These values represent altitudes visited by Fox Ciel during the trip, in order.
// Fox Ciel does not remember the precise sequence, but she remembers the following:
// 
// for each i, h[i] >= 0
// h[0] = h0
// h[n] = hn
// for each i, abs(h[i+1]-h[i]) = 1
// 
// 
// 
// 
// The last condition means that in each step the altitude of Fox Ciel either increased by 1, or decreased by 1.
// We will call the two types of steps "steps up" and "steps down", respectively.
// Steps up will be denoted 'U' and steps down will be denoted 'D'.
// 
// 
// 
// You are given the ints n, h0, and hn: the length of the trip, the altitude at the beginning, and the altitude at the end.
// In addition to these, Fox Ciel remembers some contiguous segment of her trip.
// You are given this segment as a string history.
// Each character of history is either 'U' or 'D'.
// 
// 
// 
// Check whether there is a valid trip that matches everything Fox Ciel remembers.
// Return "YES" (quotes for clarity) if there is at least one such trip, or "NO" if there is none.
// 
// DEFINITION
// Class:FoxAndMountainEasy
// Method:possible
// Parameters:int, int, int, string
// Returns:string
// Method signature:string possible(int n, int h0, int hn, string history)
// 
// 
// CONSTRAINTS
// -n will be between 1 and 100,000, inclusive.
// -history will contain between 1 and min(50,n) characters, inclusive.
// -Each character in history will be either 'U' or 'D'.
// -h0 will be between 0 and 100,000, inclusive.
// -hn will be between 0 and 100,000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 4
// 0
// 4
// "UU"
// 
// Returns: "YES"
// 
// The only solution is: h[] = {0, 1, 2, 3, 4}, the history of the entire trip will be "UUUU".
// 
// 1)
// 4
// 0
// 4
// "D"
// 
// Returns: "NO"
// 
// Based on n, h0 and hn, the history of the entire trip must be "UUUU". There is no 'D' in this history.
// 
// 2)
// 4
// 100000
// 100000
// "DDU"
// 
// Returns: "YES"
// 
// We have the following solution: h[] = {100000, 100001, 100000, 99999, 100000}, the history of the entire trip is "UDDU".
// 
// 3)
// 4
// 0
// 0
// "DDU"
// 
// Returns: "NO"
// 
// 
// 
// 4)
// 20
// 20
// 20
// "UDUDUDUDUD"
// 
// Returns: "YES"
// 
// 
// 
// 5)
// 20
// 0
// 0
// "UUUUUUUUUU"
// 
// Returns: "YES"
// 
// 
// 
// 6)
// 20
// 0
// 0
// "UUUUUUUUUUU"
// 
// Returns: "NO"
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

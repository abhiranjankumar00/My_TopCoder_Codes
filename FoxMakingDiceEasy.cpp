#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef string ST;
typedef stringstream SS;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef vector <string> vs;

#define Pf	printf
#define	Sf	scanf

#define	ep	1e-9
#define PI M_PI
#define E M_E

#define	CL(a, b)	memset(a, b, sizeof(a))
#define	mp	make_pair

#define	pb	push_back
#define	SZ(a)	int((a).size())

#define	all(c)	(c).begin(), (c).end()
#define	tr(i, c)	for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())	//vector & list//

#define	forn(i, n)	for(int i = 0; i < n; i++)
#define	forab(i, a, b)	for(int i = a; i <= b; i++)
#define	rep(i, a, b)	for(int i = a; i>=b; i--)

int C[505][505];

void Preprocess() {
	forn(i, 105)
		C[i][0] = C[i][i] = 1;

	forab(i, 1, 104)
		forab(j, 1, i-1)
			C[i][j] = C[i-1][j] + C[i-1][j-1];

}

class FoxMakingDiceEasy
{
public:
	int theCount(int N, int K)
	{
		Preprocess();
		int ret = 0;

		map < int, int> m;

		forab(i, 1, N)
			forab(j, i+1, N)
				if(i+j >= K)
					m[i+j]++;

		tr(it, m)	if(it->second >= 3)
		{
			int x = it->second;
			ret += C[x][3]*2;
			cout << it->first << " - " << it->second << endl;
		}

		return ret;
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	FoxMakingDiceEasy *obj;
	int answer;
	obj = new FoxMakingDiceEasy();
	clock_t startTime = clock();
	answer = obj->theCount(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	p0 = 6;
	p1 = 7;
	p2 = 2;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 5;
	p1 = 7;
	p2 = 0;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 50;
	p1 = 1;
	p2 = 105800;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 31;
	p1 = 46;
	p2 = 504;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 10;
	p1 = 10;
	p2 = 48;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Fox Jiro likes dice. He wants to make his own dice. Each die he wants to make is a cube. Each of the 6 faces has an integer between 1 and N, inclusive. No two faces have same number. Also the following condition must be satisfied: for all faces, the sum of the numbers on opposite faces must be equal and the sum must be greater than or equal to K.
// 
// He realized that there are many ways to make such dice. He wants to know how many ways there are. Please help Jiro to make a program that is given two integers N and K and returns the number of different dice satisfying the condition mentioned above.
// 
// Two dice are considered the same if you can rotate one to form the other.
// 
// 
// DEFINITION
// Class:FoxMakingDiceEasy
// Method:theCount
// Parameters:int, int
// Returns:int
// Method signature:int theCount(int N, int K)
// 
// 
// NOTES
// -The answer will always fit in a signed 32-bit integer.
// 
// 
// CONSTRAINTS
// -N will be between 1 and 50, inclusive.
// -K will be between 1 and 100, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 6
// 7
// 
// Returns: 2
// 
// You can make normal dice. There are two ways to arrange the numbers.
// 
// 1)
// 5
// 7
// 
// Returns: 0
// 
// You cannot make 6 sided dice with 5 numbers.
// 
// 2)
// 50
// 1
// 
// Returns: 105800
// 
// 
// 
// 3)
// 31
// 46
// 
// Returns: 504
// 
// 
// 
// 4)
// 10
// 10
// 
// Returns: 48
// 
// 
// 
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

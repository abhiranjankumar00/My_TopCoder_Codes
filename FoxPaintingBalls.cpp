#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef string ST;
typedef stringstream SS;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef vector <string> vs;

#define endl 		("\n")
#define DEBUG(x)	cout << #x << " = " << x << "\n"
#define Pf		printf
#define	Sf		scanf

#define	ep		1e-9
#define PI		M_PI
#define E 		M_E

#define	CL(a, b)	memset(a, b, sizeof(a))
#define	mp		make_pair
#define	pb		push_back

#define	all(c)		(c).begin(), (c).end()
#define	tr(i, c)	for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())		//vector & list//

#define forn(i, n)	for(int i = 0, loop_ends_here = (int)n; i < loop_ends_here ; i++)
#define forab(i, a, b)	for(int i = a, loop_ends_here = (int)b; i <= loop_ends_here; i++)
#define rep(i, a, b)	for(int i = a, loop_ends_here = (int)b; i >= loop_ends_here; i--)

#define read(n)		scanf("%d", &n)
#define write(n)	printf("%d ", n)
#define writeln(n)	printf("%d\n", n)

class FoxPaintingBalls
{
public:
	long long theMax(long long R, long long G, long long B, int N);
};

int64 N;

long long FoxPaintingBalls::theMax (long long R, long long G, long long B, int _N) 
{
	N = _N;
	int64 r, b, g;

	r = b = g = (N/3 + 1) * (N/3) / 2 + (N/3);

	if(N % 3 != 0) {
		r += N/3 + 1;
		b += N/3;
		g += N/3;
	}
	if(N % 3 == 2) {
		r += N/3;
		b += N/3+1;
		g += N/3+1;
	}
	Pf("r = %lld, b = %lld, g = %lld\n", r, b, g);

	vector <int64> v;
	v.pb(R);	v.pb(B);	v.pb(G);
	sort(all(v), greater <int> ());

	if(g != 0)
		return min(v[0]/ r, v[2]/g);

	if(r == g) {
		return min(R/r, min(G/r, B/r));
	}

	return -1;

	long long ret;
	
	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, long long p0, long long p1, long long p2, int p3, bool hasAnswer, long long p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3;
	cout << "]" << endl;
	FoxPaintingBalls *obj;
	long long answer;
	obj = new FoxPaintingBalls();
	clock_t startTime = clock();
	answer = obj->theMax(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p4;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	long long p0;
	long long p1;
	long long p2;
	int p3;
	long long p4;
	
	{
	// ----- test 0 -----
	p0 = 2ll;
	p1 = 2ll;
	p2 = 2ll;
	p3 = 3;
	p4 = 1ll;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 1ll;
	p1 = 2ll;
	p2 = 3ll;
	p3 = 3;
	p4 = 0ll;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 8ll;
	p1 = 6ll;
	p2 = 6ll;
	p3 = 4;
	p4 = 2ll;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 7ll;
	p1 = 6ll;
	p2 = 7ll;
	p3 = 4;
	p4 = 2ll;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 100ll;
	p1 = 100ll;
	p2 = 100ll;
	p3 = 4;
	p4 = 30ll;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 19330428391852493ll;
	p1 = 48815737582834113ll;
	p2 = 11451481019198930ll;
	p3 = 3456;
	p4 = 5750952686ll;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	p0 = 1ll;
	p1 = 1ll;
	p2 = 1ll;
	p3 = 1;
	p4 = 3ll;
	all_right = KawigiEdit_RunTest(6, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// A Ball Triangle is a set of identical balls placed in a triangular shape. A Ball Triangle has N rows, numbered 1 to N from top to bottom. For all i, 1 <= i <= N, the i-th row contains i balls. For example, the following image shows a Ball Triangle with N=3.
// 
// 
// 
// 
// Fox Jiro has infinitely many Ball Triangles. He can paint a Ball Triangle according to the following conditions:
// 
// Each of the balls has to be painted either red, green, or blue.
// No two adjacent balls may share the same color.
// 
// The following image shows one valid coloring of a Ball Triangle for N=3.
// 
// 
// 
// 
// Jiro wants to paint as many Ball Triangles as he can.
// As long as he follows the rules above, he may color the Ball Triangles in any way he likes.
// Some of the colored Ball Triangles may look exactly the same, but they don't have to.
// The only other constraint is the total amount of paint available to Jiro:
// In all the triangles together, he can paint at most R balls red, G balls green, and B balls blue.
// 
// You are given the long longs R, G, and B.
// You are also given the int N.
// Return the maximum possible number of Ball Triangles Jiro can paint.
// 
// DEFINITION
// Class:FoxPaintingBalls
// Method:theMax
// Parameters:long long, long long, long long, int
// Returns:long long
// Method signature:long long theMax(long long R, long long G, long long B, int N)
// 
// 
// CONSTRAINTS
// -R, G and B will each be between 0 and 1,000,000,000,000,000,000 (10^18), inclusive.
// -N will be between 1 and 1,000,000,000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 2
// 2
// 2
// 3
// 
// Returns: 1
// 
// Jiro can paint one Ball Triangle in the same way as in the image in the statement.
// 
// 1)
// 1
// 2
// 3
// 3
// 
// Returns: 0
// 
// This time Jiro can paint no Ball Triangles.
// 
// 2)
// 8
// 6
// 6
// 4
// 
// Returns: 2
// 
// 
// 
// 3)
// 7
// 6
// 7
// 4
// 
// Returns: 2
// 
// 
// 
// 4)
// 100
// 100
// 100
// 4
// 
// Returns: 30
// 
// 
// 
// 5)
// 19330428391852493
// 48815737582834113
// 11451481019198930
// 3456
// 
// Returns: 5750952686
// 
// 
// 
// 6)
// 1
// 1
// 1
// 1
// 
// Returns: 3
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

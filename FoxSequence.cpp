#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef string ST;
typedef stringstream SS;

#define Pf	printf
#define	Sf	scanf

#define	ep	1e-9
#define	PI	3.141592653589793
#define	E	2.718281828459045

#define	CL(a, b)	memset(a, b, sizeof(a))
#define	mp	make_pair

#define	pb	push_back
#define	SZ(a)	int((a).size())

#define	all(c)	(c).begin(), (c).end()
#define	tr(i, c)	for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())	//vector & list//

#define	forn(i, n)	for(int i = 0; i < n; i++)
#define	forab(i, a, b)	for(int i = a; i <= b; i++)
#define	rep(i, a, b)	for(int i = a; i>=b; i--)

class FoxSequence
{
public:
	string isValid(vector <int> seq)
	{
		string yes = "YES", no = "NO";
		vi v;

		forab(i, 1, SZ(seq)-1)
			v.pb(seq[i] - seq[i-1]);

		v.resize(unique(all(v)) - v.begin());
		cout << SZ(v) << endl;

		if(SZ(v)==4)
			if(v[0] > 0 && v[1] < 0 && v[2] > 0 && v[3] < 0)	return yes;

		if(SZ(v) == 5)
			if(v[0] > 0 && v[1] < 0 && v[2] == 0 && v[3] > 0 && v[4] < 0)	return yes;
		
		return no;
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	FoxSequence *obj;
	string answer;
	obj = new FoxSequence();
	clock_t startTime = clock();
	answer = obj->isValid(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	string p1;
	
	{
	// ----- test 0 -----
	int t0[] = {1,3,5,7,5,3,1,1,1,3,5,7,5,3,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "YES";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {1,2,3,4,5,4,3,2,2,2,3,4,5,6,4};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "YES";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {3,6,9,1,9,5,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "YES";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {1,2,3,2,1,2,3,2,1,2,3,2,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "NO";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {1,3,4,3,1,1,1,1,3,4,3,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "NO";
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	int t0[] = {6,1,6};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "NO";
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Fox Ciel likes sequences.  One day, she invented a new type of sequence and named it the fox sequence.  A sequence seq containing N elements is called a fox sequence if and only if there exist four integers a, b, c and d such that 0 < a < b <= c < d < N-1 and the following five conditions are met:
// 
// seq[0], seq[1], ... , seq[a] forms an arithmetic progression with a positive common difference.  An arithmetic progression is a sequence where the difference between successive elements is equal.  The difference between successive elements is called the common difference.  Note that 0 is neither positive nor negative.
// seq[a], seq[a+1], ... , seq[b] forms an arithmetic progression with a negative common difference.
// seq[b], seq[b+1], ... , seq[c] are all equal.
// seq[c], seq[c+1], ... , seq[d] forms an arithmetic progression with a positive common difference.
// seq[d], seq[d+1], ... , seq[N-1] forms an arithmetic progression with a negative common difference.
// 
// 
// In the following image, the top 3 sequences are fox sequences, while the bottom 3 sequences are not:
// 
// 
// 
// You are given a sequence seq.  Return "YES" if it is a fox sequence, or "NO" if it is not (all quotes for clarity).
// 
// DEFINITION
// Class:FoxSequence
// Method:isValid
// Parameters:vector <int>
// Returns:string
// Method signature:string isValid(vector <int> seq)
// 
// 
// CONSTRAINTS
// -seq will contain between 1 and 50 elements, inclusive.
// -Each element of seq will be between 1 and 2,000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {1,3,5,7,5,3,1,1,1,3,5,7,5,3,1}
// 
// 
// Returns: "YES"
// 
// This is the top-left sequence of the image shown in the statement.  The next five examples are also from that image.
// 
// 1)
// {1,2,3,4,5,4,3,2,2,2,3,4,5,6,4}
// 
// 
// Returns: "YES"
// 
// 
// 
// 2)
// {3,6,9,1,9,5,1}
// 
// 
// Returns: "YES"
// 
// 
// 
// 3)
// {1,2,3,2,1,2,3,2,1,2,3,2,1}
// 
// 
// Returns: "NO"
// 
// 
// 
// 4)
// {1,3,4,3,1,1,1,1,3,4,3,1}
// 
// 
// Returns: "NO"
// 
// 
// 
// 5)
// {6,1,6}
// 
// 
// Returns: "NO"
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

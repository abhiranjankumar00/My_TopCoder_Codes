#include <iostream>
#include <ctime>
#include <vector>
#include <list>
#include <queue>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <cassert>
#include <utility>
#include <sstream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <climits>
#include <iterator>
#include <fstream>
using namespace std;

typedef long long 		int64;
typedef vector<int> 		vi;
typedef string 			ST;
typedef stringstream 		SS;
typedef vector< vector<int> > 	vvi;
typedef pair<int,int> 		ii;
typedef vector<string> 		vs;
/*
#if __cplusplus > 199711L	// for g++0x, value of __cplusplus must be greater thana 199711L.
	#define tr(i, c)	for(auto i = begin(c); i != end(c); i++)
#else
	#define tr(i, c)	for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#endif
*/
#define endl		("\n")
#define tr(i, c)	for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define PI		M_PI
#define E 		M_E
#define	eps		1e-9

#define	Sf		scanf
#define	Pf		printf

#define forn(i, n)	for(int i = 0, lets_stop_here = (int)n; i <  lets_stop_here; i++)
#define forab(i, a, b)	for(int i = a, lets_stop_here = (int)b; i <= lets_stop_here; i++)
#define rep(i, a, b)	for(int i = a, lets_stop_here = (int)b; i >= lets_stop_here; i--)

#define	all(c)		(c).begin(), (c).end()
#define	cl(a, b)	memset(a, b, sizeof(a))
#define mp		make_pair
#define pb		push_back

#define	present(x, c)	((c).find(x) != (c).end())	//map & set//
#define	cpresent(x, c)	(find( (c).begin(), (c).end(), x) != (c).end())	//vector & list//

#define read(n)		scanf("%d", &n)
#define write(n)	printf("%d ", n)
#define writeln(n)	printf("%d\n", n)

//#define debug(x)
#define debug(x)	cout << #x << " = " << x << "\n"

class GameInDarknessDiv2
{
public:
	string check(vector <string> field, vector <string> moves);
};

string GameInDarknessDiv2::check (vector <string> field, vector <string> moves) 
{
	string ret;
	
	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <string> p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	GameInDarknessDiv2 *obj;
	string answer;
	obj = new GameInDarknessDiv2();
	clock_t startTime = clock();
	answer = obj->check(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	vector <string> p1;
	string p2;
	
	{
	// ----- test 0 -----
	string t0[] = {"A.B..","##.##","##.##"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"RRDUR"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Alice wins";
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"A.B..","##.##","##..."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"RRRLD"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Bob wins";
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"###.#","###..","A..B#","###..","###.#"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"RR","R","UDD"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Alice wins";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"A.###",".B..."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"RDRRRLLLLUDUDRLURDLUD"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Bob wins";
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {".....",".#.#.","##.#.","A###.","B...."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"D"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Alice wins";
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {".#...#....#.......#....#......","...###.#.#..#.#.#..###...#.#.#",".#.#...#...#..#..#.....##.#...","#..#.##..##..#.#..###.#....#.#","..#..#..#...#...#....#..##.#..","#..##..#..##.#.#.####..#.#...#",".#....##.#.....#......##.#.#..",".###.#...#.#.#..#.#.##...##.#.",".....#.#.##..#.#..##...##...#.","#.#.#...#...#.#.#...#.#.#.##.#",".#..##.#..##..#.###...........","..##.....####.......##.#.#.##.","#....##.#.#...####.#...#.#.#..","#.#.#......##.#...#..#.#..#..#","..#..#.#.##...#.#..#..#..#..#.",".#..#...#...#..#..#.#..#..#A#.","..#..#.#.B##.##..#...#.#.##...","#.#.##..#......#.#.#.#.#...#.#","#.#...#.######...#.#.#.#.#.#..","..#.##.#.....#.##..#...#.#.#.#",".#..#..#.#.#.#.#..#.#####..#.#","..#.#.##.#.#.##.#......#..#...","#..#.....#.#.....#.#.##..##.#.","##..###.#..#.#.#.#..##..#...##","##.#...#..##.#.#..#.#..#.#.#..","#..#.#.####..#..#..#..#......#","..#..#.....####..#.##.#.###.#.",".#..#.####.#.#..#.....#...#...","..##.......#...#..####.##.#.#.","#....#.#.#..#.###....#....#..#"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"UURURUULLLLLLLLLLDLLLLUDLLUDDLRDDDULLDLLDDRRRRRDDU","RRUUURUULLD"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Alice wins";
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Alice and Bob are playing a game on a rectangular board.
// Rows and columns are both numbered starting from 0.
// We will use (i, j) to denote the cell in row i, column j.
// The cell (0, 0) is in the top left corner of the board.
// Some cells contain walls, others are empty.
// The game is played on empty cells only. 
// 
// The game is played as follows:
// Each player has one piece on the board.
// Initially, each piece occupies a different cell.
// The players take alternating turns, Alice starts.
// In each turn, the player moves his/her piece onto one of the adjacent empty cells.
// (Note that moving the piece is mandatory, it is not allowed to keep it in its current cell.) 
// 
// If at any moment the two tokens occupy the same cell, Alice wins.
// If Alice gives up (described below), Bob wins. 
// 
// You are given a vector <string> field that describes the game board.
// Character j of element i of field describes the initial content of the cell (i, j).
// The character '.' represents an empty cell, '#' represents a wall, 'A' is an empty cell where Alice's piece starts, and 'B' is an empty cell where Bob's piece starts. 
// 
// Here is the twist:
// The game board is completely in the dark.
// Alice and Bob each know the initial location of both pieces.
// During the game, Alice has no idea how Bob moves his piece.
// However, Bob knows exactly how Alice will play the game.
// (Note that this is actually possible: as Alice does not gain any information during the game, she may as well determine her entire strategy in advance.) 
// 
// You are given a vector <string> moves that represents Alice's strategy.
// Concatenate all elements of moves to obtain a string M.
// For each i, in her i-th turn, Alice will move her piece according to the character M[i-1].
// Assume that before Alice's i-th turn her piece was at (y, x).
// In the i-th turn she moves as follows:
// 
// If M[i-1] is 'U' (quotes for clarity): she moves to (y-1, x). 
// If M[i-1] is 'R' (quotes for clarity): she moves to (y, x+1). 
// If M[i-1] is 'L' (quotes for clarity): she moves to (y, x-1). 
// If M[i-1] is 'D' (quotes for clarity): she moves to (y+1, x). 
// 
// It is guaranteed that M will represent a valid sequence of moves that only uses empty cells and never leaves the board.
// If Alice gets to the situation where she has to make a move but has no more letters in M, she gives up and Bob wins the game. 
// 
// Bob can use his knowledge of M and his knowledge of the game board when planning his own moves.
// If it is possible for Bob to win the game, return "Bob wins" (quotes for clarity).
// Otherwise, return "Alice wins".
// 
// 
// DEFINITION
// Class:GameInDarknessDiv2
// Method:check
// Parameters:vector <string>, vector <string>
// Returns:string
// Method signature:string check(vector <string> field, vector <string> moves)
// 
// 
// NOTES
// -Note that the return value is case sensitive.
// 
// 
// CONSTRAINTS
// -field and moves will contain between 1 and 50 elements, inclusive.
// -Each element of field and moves will contain between 1 and 50 characters, inclusive.
// -Each element of field will contain the same number of characters.
// -Each character of each element of field will be either '.', '#', 'A' or 'B' (quotes for clarity).
// -field will contain exactly one 'A' and 'B' each.
// -Each character of moves will be either 'U', 'D', 'L' or 'R' (quotes for clarity).
// -The sequence of moves represented by moves will be a valid sequence of moves for Alice's piece.
// -In the starting position each player will have at least one possible move.
// 
// 
// EXAMPLES
// 
// 0)
// {"A.B..",
//  "##.##",
//  "##.##"}
// {"RRDUR"}
// 
// Returns: "Alice wins"
// 
// In this game, M="RRDUR".
// In this case Alice can always win regardless of how Bob moves.
// One possible game is as follows:
// 
// Alice moves her piece to (0, 1).
// Bob moves his piece to (0, 3).
// Alice moves to (0, 2).
// Bob moves to (0, 4).
// Alice moves to (1, 2).
// Bob moves to (0, 3).
// Alice moves to (0, 2).
// Bob moves to (0, 4).
// Alice moves to (0, 3).
// Bob moves to (0, 3). Alice and Bob are on the same cell, so Alice wins.
// 
// Note that Alice has used up all characters of M. Even so, Alice doesn't give up unless she needs to make her 6-th move.
// 
// 
// 1)
// {"A.B..",
//  "##.##",
//  "##..."}
// {"RRRLD"}
// 
// Returns: "Bob wins"
// 
// 
// 
// 2)
// {"###.#",
//  "###..",
//  "A..B#",
//  "###..",
//  "###.#"}
// {"RR", "R", "UDD"}
// 
// Returns: "Alice wins"
// 
// Make sure to concatenate the elements of moves.
// 
// 3)
// {"A.###",
//  ".B..."}
// {"RDRRRLLLLUDUDRLURDLUD"}
// 
// Returns: "Bob wins"
// 
// 
// 
// 4)
// {".....",
//  ".#.#.",
//  "##.#.",
//  "A###.",
//  "B...."}
// {"D"}
// 
// Returns: "Alice wins"
// 
// 
// 
// 5)
// {".#...#....#.......#....#......",
//  "...###.#.#..#.#.#..###...#.#.#",
//  ".#.#...#...#..#..#.....##.#...",
//  "#..#.##..##..#.#..###.#....#.#",
//  "..#..#..#...#...#....#..##.#..",
//  "#..##..#..##.#.#.####..#.#...#",
//  ".#....##.#.....#......##.#.#..",
//  ".###.#...#.#.#..#.#.##...##.#.",
//  ".....#.#.##..#.#..##...##...#.",
//  "#.#.#...#...#.#.#...#.#.#.##.#",
//  ".#..##.#..##..#.###...........",
//  "..##.....####.......##.#.#.##.",
//  "#....##.#.#...####.#...#.#.#..",
//  "#.#.#......##.#...#..#.#..#..#",
//  "..#..#.#.##...#.#..#..#..#..#.",
//  ".#..#...#...#..#..#.#..#..#A#.",
//  "..#..#.#.B##.##..#...#.#.##...",
//  "#.#.##..#......#.#.#.#.#...#.#",
//  "#.#...#.######...#.#.#.#.#.#..",
//  "..#.##.#.....#.##..#...#.#.#.#",
//  ".#..#..#.#.#.#.#..#.#####..#.#",
//  "..#.#.##.#.#.##.#......#..#...",
//  "#..#.....#.#.....#.#.##..##.#.",
//  "##..###.#..#.#.#.#..##..#...##",
//  "##.#...#..##.#.#..#.#..#.#.#..",
//  "#..#.#.####..#..#..#..#......#",
//  "..#..#.....####..#.##.#.###.#.",
//  ".#..#.####.#.#..#.....#...#...",
//  "..##.......#...#..####.##.#.#.",
//  "#....#.#.#..#.###....#....#..#"}
// {"UURURUULLLLLLLLLLDLLLLUDLLUDDLRDDDULLDLLDDRRRRRDDU","RRUUURUULLD"}
// 
// Returns: "Alice wins"
// 
// 
// 
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

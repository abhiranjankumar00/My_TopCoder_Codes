#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef string ST;
typedef stringstream SS;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef vector <string> vs;

#define Pf	printf
#define	Sf	scanf

#define	ep	1e-9
#define PI M_PI
#define E M_E

#define	CL(a, b)	memset(a, b, sizeof(a))
#define	mp	make_pair

#define	pb	push_back

#define	all(c)	(c).begin(), (c).end()
#define	tr(i, c)	for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())	//vector & list//

#define forn(i, n)	for(int i = 0, loop_ends_here = (int)n; i < loop_ends_here; i++)
#define forab(i, a, b)	for(int i = a, loop_ends_here = (int) b; i <= loop_ends_here; i++)
#define rep(i, a, b)	for(int i = a, loop_ends_here = (int)b; i>=loop_ends_here; i--)

class GogoXReimuHakurai
{
	vs G;
	vector <bool > vis;
	int ret;
	
	void dfs(int a = 0) {
		if(vis[a] == true)
			return;
		cout << a << " ";
		vis[a] = true;
		bool flag = true;
			
		forn(i, G[a].size())
			if(!vis[i] && G[a][i] == 'Y') {
				dfs(i);
				flag = false;
			}
//		if(flag)
			ret++;
	}
	
public:
	int solve(vector <string> choices)
	{
		G = choices;
		vis = vector <bool> (G.size(), false);
		ret =0;
		dfs();
		
		return ret-1;
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	GogoXReimuHakurai *obj;
	int answer;
	obj = new GogoXReimuHakurai();
	clock_t startTime = clock();
	answer = obj->solve(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"NYY","NNY","NNN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"NYNY","NNYY","NNNY","NNNN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"NNY","NNY","NNN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"NN","NN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Like all other software engineers, Gogo likes to "read" virtual novels. In particular, he's currently "reading" a novel titled Touhou, with Reimu Hakurai as its main protagonist. There are N stages in Touhou, numbered 0 through N-1. A playthrough of the novel always starts at the stage 0. The playthrough then may visit some other stages, based on the player's choices. The sequence of visited stages is always strictly ascending. A playthrough is successful if it terminates by reaching the stage N-1.
// 
// In each stage, Gogo can either finish the playthrough or choose one of the available options that advance Reimu to other stages. You are given a vector <string> choices. If there is a choice that advances Reimu from stage i to stage j, choices[i][j] will be 'Y', otherwise it will be 'N'. For each pair of stages i, j such that i < j the game contains at most one such choice.
// 
// Gogo wants to make as many successful playthroughs as possible, one after another. However, there is an additional constraint: Each playthrough must contain at least one choice Gogo never made in any of the previous playthroughs.
// 
// Return the maximum number of successful playthroughs that Gogo can play. If there are no such playthrough, return 0.
// 
// DEFINITION
// Class:GogoXReimuHakurai
// Method:solve
// Parameters:vector <string>
// Returns:int
// Method signature:int solve(vector <string> choices)
// 
// 
// CONSTRAINTS
// -choices will contain between 2 and 50 elements, inclusive.
// -Each element of choices will contain N characters, where N is the number of elements in choices.
// -Each character in choices will be either 'Y', or 'N'.
// -If i >= j then choices[i][j] will be 'N'.
// 
// 
// EXAMPLES
// 
// 0)
// {
// "NYY",
// "NNY",
// "NNN"}
// 
// Returns: 2
// 
// The two possible successful playthroughs:
// 0 -> 1 -> 2
// 0 -> 2
// Gogo may play them both, in any order.
// 
// 1)
// {
// "NYNY",
// "NNYY",
// "NNNY",
// "NNNN"}
// 
// Returns: 3
// 
// 
// 
// 2)
// {"NNY"
// ,"NNY"
// ,"NNN"}
// 
// Returns: 1
// 
// 
// 
// 3)
// {"NN"
// ,"NN"}
// 
// Returns: 0
// 
// 
// 
// END KAWIGIEDIT TESTING




//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

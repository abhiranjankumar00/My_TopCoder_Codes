#include <bits/stdc++.h>
using namespace std;

class GuitarConcert
{
public:
	vector <string> buyGuitars(vector <string> guitarNames, vector <string> guitarSongs);
};

void getStringVector(const vector <int> &id, const vector <string> &names, vector <string> &ret) {
	ret.clear();
	for(auto it = (id).begin(); it != (id).end(); ++it) {
		ret.push_back(names[*it]);
	}
	sort(ret.begin(), ret.end());
}

vector <string> GuitarConcert::buyGuitars (vector <string> guitarNames, vector <string> songs) 
{
	vector <string> ret, tmp;
	ret.empty();
	int N = guitarNames.size();
	int nSongs = songs[0].size();

	vector <int> idx;
	int mxSongs = 0;
	vector <bool> in(nSongs);

	for(int flag = 0; flag < (1<<N); ++flag) {
		idx.clear();
		for(int i = 0; i < N; ++i) if( (flag&(1<<i)) != 0) {
			idx.push_back(i);
		}
		fill(in.begin(), in.end(), false);

		for(auto it = (idx).begin(); it != (idx).end(); ++it) {
			for(int i = 0; i < (int)songs[*it].size(); ++i) {
				if(songs[*it][i] == 'Y') {
					in[i] = true;
				}
			}
		}
		int cnt = count(in.begin(), in.end(), true);
		if(cnt > mxSongs) {
			mxSongs = cnt;
			getStringVector(idx, guitarNames, tmp);
			/*
			printf("cnt = %d, ret.size() = %d\n", cnt, (int)ret.size());
			cout << cnt << ": ";
			for(auto it = (tmp).begin(); it != (tmp).end(); ++it) {
				cout << *it << ", ";
			}
			cout << "\n";
			*/
			ret = tmp;
		}
		else if(cnt == mxSongs) {
			getStringVector(idx, guitarNames, tmp);
			/*
			cout << cnt << ": ";
			for(auto it = (tmp).begin(); it != (tmp).end(); ++it) {
				cout << *it << ", ";
			}
			cout << endl;
			*/
			if(tmp.size() < ret.size())
				ret = tmp;
			else if(tmp.size() == ret.size() && tmp < ret)
				ret = tmp;
		}
	}
	
	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <string> p1, bool hasAnswer, vector <string> p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	GuitarConcert *obj;
	vector <string> answer;
	obj = new GuitarConcert();
	clock_t startTime = clock();
	answer = obj->buyGuitars(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p2.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << "\"" << p2[i] << "\"";
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << answer[i] << "\"";
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p2.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p2[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	vector <string> p1;
	vector <string> p2;
	
	{
	// ----- test 0 -----
	string t0[] = {"GIBSON","FENDER","TAYLOR"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"YNYYN","NNNYY","YYYYY"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"TAYLOR"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"GIBSON","CRAFTER","FENDER","TAYLOR"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"YYYNN","NNNYY","YYNNY","YNNNN"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"CRAFTER","GIBSON"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"AB","AA","BA"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"YN","YN","NN"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"AA"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"FENDER","GIBSON","CRAFTER","EPIPHONE","BCRICH"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"YYNNYNN","YYYNYNN","NNNNNYY","NNYNNNN","NNNYNNN"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"BCRICH","CRAFTER","GIBSON"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"GIBSON","FENDER"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"NNNNNNNNNNNNNNNNNNNNNNNNN","NNNNNNNNNNNNNNNNNNNNNNNNN"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2.clear() /*{}*/;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// You are a guitar player and you want to play a concert.  Unfortunately, you don't have any good guitars left, so you need to buy some new guitars.  You are given a vector <string> guitarNames, the i-th element of which is the name of the i-th guitar that is available for purchase.
// 
// You have a list of songs that you would like to play at the concert.  Certain songs cannot be played with certain guitars because they will sound weird, so you might not be able to play the entire concert with just one guitar.  You are given a vector <string> guitarSongs, where the j-th character of the i-th element is 'Y' if the j-th song can be played on the i-th guitar, and 'N' otherwise.
// 
// You want your concert to be as long as possible, so your main goal is to play as many of the songs as possible (you can only play each song at most once).  You also want to save your money, so you want to buy the least number of guitars required to play that maximum number of songs.  Return a vector <string> containing the names of the guitars you should buy in alphabetical order.  If there are multiple possible return values, return the one among them that comes first lexicographically.  A vector <string> s1 comes before vector <string> s2 lexicographically if s1[i] comes before s2[i] alphabetically, where i is the first position at which they differ.
// 
// 
// DEFINITION
// Class:GuitarConcert
// Method:buyGuitars
// Parameters:vector <string>, vector <string>
// Returns:vector <string>
// Method signature:vector <string> buyGuitars(vector <string> guitarNames, vector <string> guitarSongs)
// 
// 
// CONSTRAINTS
// -guitarNames will contain between 1 and 10 elements, inclusive.
// -guitarSongs will contain the same number of elements as guitarNames.
// -Each element of guitarSongs will contain between 1 and 50 characters, inclusive.
// -Each element of guitarSongs will contain the same number of characters.
// -Each element of guitarSongs will contain only the uppercase letters 'Y' or 'N'.
// -Each element of guitarNames will contain between 2 and 50 characters, inclusive.
// -Each element of guitarNames will contain only uppercase letters ('A' - 'Z').
// -All elements of guitarNames will be distinct.
// 
// 
// EXAMPLES
// 
// 0)
// {"GIBSON","FENDER", "TAYLOR"}
// {"YNYYN", "NNNYY", "YYYYY"}
// 
// Returns: {"TAYLOR" }
// 
// You can play all the songs on the TAYLOR guitar.
// 
// 1)
// {"GIBSON", "CRAFTER", "FENDER", "TAYLOR"}
// {"YYYNN", "NNNYY", "YYNNY", "YNNNN"}
// 
// Returns: {"CRAFTER", "GIBSON" }
// 
// You can play all the songs, but you need 2 guitars to do it.
// 
// 2)
// {"AB", "AA", "BA"}
// {"YN", "YN", "NN"}
// 
// Returns: {"AA" }
// 
// You can only play the first song, so you buy guitar AA because it comes before AB alphabetically.
// 
// 3)
// {"FENDER", "GIBSON", "CRAFTER", "EPIPHONE", "BCRICH"}
// {"YYNNYNN", "YYYNYNN", "NNNNNYY", "NNYNNNN", "NNNYNNN"}
// 
// Returns: {"BCRICH", "CRAFTER", "GIBSON" }
// 
// 
// 
// 4)
// {"GIBSON","FENDER"}
// {"NNNNNNNNNNNNNNNNNNNNNNNNN", "NNNNNNNNNNNNNNNNNNNNNNNNN"}
// 
// Returns: { }
// 
// 
// 
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

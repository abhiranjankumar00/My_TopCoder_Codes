#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef string ST;
typedef stringstream SS;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef vector <string> vs;

#define endl 		("\n")
#define DEBUG(x)	cout << #x << " = " << x << "\n"
#define Pf		printf
#define	Sf		scanf

#define	ep		1e-9
#define PI		M_PI
#define E 		M_E

#define	CL(a, b)	memset(a, b, sizeof(a))
#define	mp		make_pair
#define	pb		push_back

#define	all(c)		(c).begin(), (c).end()
#define	tr(i, c)	for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())		//vector & list//

#define forn(i, n)	for(int i = 0, loop_ends_here = (int)n; i < loop_ends_here ; i++)
#define forab(i, a, b)	for(int i = a, loop_ends_here = (int)b; i <= loop_ends_here; i++)
#define rep(i, a, b)	for(int i = a, loop_ends_here = (int)b; i >= loop_ends_here; i--)

#define read(n)		scanf("%d", &n)
#define write(n)	printf("%d ", n)
#define writeln(n)	printf("%d\n", n)

class InboxCleanup
{
public:
	int fewestClicks(string messages, int low, int high);
};

ST msg;

int count(int gpSize) {
	int ans = 0;

	for(int frame = 0; frame < msg.size(); frame += gpSize) {
		int cnt = 0, rem = 0;

		for(int idx = 0; idx < gpSize && frame + idx < msg.size(); idx++) {
			if(msg[frame+idx] == 'D')
				cnt++;
			else
				rem++;
		}
		if(cnt > 0)
			ans += min(cnt+1, 1+rem+1);
	}

	ans += msg.size() / gpSize + (msg.size() % gpSize == 0 ? -1 : 0);

	return ans;
}

int InboxCleanup::fewestClicks (string messages, int low, int high) 
{
	msg = messages;
	int ret = 1e9;

	forab(cur, low, high) {
		cout << cur << ": " << count(cur) << endl;
		ret = min(ret, count(cur));
	}
	
	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, int p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << p1 << "," << p2;
	cout << "]" << endl;
	InboxCleanup *obj;
	int answer;
	obj = new InboxCleanup();
	clock_t startTime = clock();
	answer = obj->fewestClicks(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	int p1;
	int p2;
	int p3;
	
	{
	// ----- test 0 -----
	p0 = "..........";
	p1 = 5;
	p2 = 10;
	p3 = 0;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = ".D.D.DD.D.";
	p1 = 5;
	p2 = 5;
	p3 = 8;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "...D..DDDDDD...D.DD..";
	p1 = 3;
	p2 = 10;
	p3 = 12;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "D.D..D..DD.DDDD.D.DDD.DDDD..";
	p1 = 3;
	p2 = 11;
	p3 = 17;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "DDD.........................";
	p1 = 1;
	p2 = 3;
	p3 = 11;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// When returning from vacation, you have to delete some unwanted email messages in your inbox, like spam or other unimportant messages.  Your inbox consists of several pages that each contain the same number of messages (except possibly the last page).  Each message has two corresponding buttons that allow you to:  
// - add the message to the current selection 
// - remove the message from the current selection  
// In addition, each page has three buttons with the following functions:  
// 
// - select all messages on the current page 
// - delete all selected messages on the current page 
// - advance to the next page of messages (unless you're already on the last page) 
// 
// Selections do not extend across pages, and advancing to the next page deselects everything that is currently selected.  Also, deleting messages will not cause later messages in the inbox to scroll up to the current page.  
// 
// For example if you have four email messages on one page and you would like to delete the second one, you could select it and then click on delete for a total of two clicks.  An alternative is to select all messages, then deselect all other messages except the second, and then click delete, for a total of five clicks.  
// 
// Naturally, you would like to clean up your inbox with as few clicks as possible. Furthermore, you are allowed to choose the number of emails to display per page.  If you decide to display K messages per page, the first K messages will be on the first page, the next K messages will be on the second one, and so on.  Obviously, the last page might contain less than K messages.  Note that you need to check all pages of messages, even if they do not contain any messages that must be deleted. 
// 
// You will be given a string messages containing a description of email messages in the order they appear in your inbox.  The 'D' character denotes a message that should be deleted, while a '.' character denotes an email that should be kept.  You will also be given two ints, low and high, denoting the inclusive lower and upper bounds of the number of messages on each page.  You should choose how many emails to display per page such that the number of clicks needed is minimal, and then return the number of clicks. 
// 
// 
// DEFINITION
// Class:InboxCleanup
// Method:fewestClicks
// Parameters:string, int, int
// Returns:int
// Method signature:int fewestClicks(string messages, int low, int high)
// 
// 
// CONSTRAINTS
// -messages will contain between 1 and 50 characters, inclusive.
// -Each character of messages will be either 'D' or '.'.
// -low will be between 1 and the number of characters in messages, inclusive.
// -high will be between low and the number of characters in messages, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// ".........."
// 5
// 10
// 
// Returns: 0
// 
// No messages to delete here. Since we can display all messages in one page, there is no need to click any button.
// 
// 1)
// ".D.D.DD.D."
// 5
// 5
// 
// Returns: 8
// 
// Your only choice here is to display 5 messages per page.  Select the two messages from the first page and then click delete for a total of three clicks.  One more click is needed for advancing to the next page.  For the second page, you have two options: first select all messages and then deselect the third and fifth ones, or select each of the three 'D' messages individually.  Both options require three clicks.  After the selection is made, click delete.
// 
// 2)
// "...D..DDDDDD...D.DD.."
// 3
// 10
// 
// Returns: 12
// 
// Display 6 messages per page.
// 
// 3)
// "D.D..D..DD.DDDD.D.DDD.DDDD.."
// 3
// 11
// 
// Returns: 17
// 
// 4)
// "DDD........................."
// 1
// 3
// 
// Returns: 11
// 
// Remember that you need to check all pages.
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

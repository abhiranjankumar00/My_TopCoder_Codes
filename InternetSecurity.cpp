#include <bits/stdc++.h>
using namespace std;

class InternetSecurity
{
public:
	vector <string> determineWebsite(vector <string> address, vector <string> keyword, vector <string> dangerous, int threshold);
};

int getBadCnt(const vector <string> &keyword, const set<string> &bad) {
  int ret =0;
  for(auto it = (keyword).begin(); it != (keyword).end(); ++it) {
    ret += bad.count(*it);
  }
  return ret;
}

vector <string> InternetSecurity::determineWebsite (vector <string> address, vector <string> _keyword, vector <string> dangerous, int threshold) 
{
  int N = address.size();
  bool in[N];
  memset(in, -1, sizeof(in));
  set <string> bad(dangerous.begin(), dangerous.end());
  vector <vector<string> > keyword(N);

  for(int i = 0; i < (int)N; ++i) {
    stringstream ss(_keyword[i]);
    string tmp;
    while(ss>>tmp) {
      keyword[i].push_back(tmp);
    }
  }
  vector <pair <int, string> > tmp;

  for(int k = 0; k < (int)N; ++k) {
    for(int i = 0; i < (int)N; ++i) if(in[i]) {
      if(getBadCnt(keyword[i], bad) >= threshold) {
        tmp.push_back(make_pair(i, address[i]));
        for(auto it = (keyword[i]).begin(); it != (keyword[i]).end(); ++it) {
          bad.insert(*it);
        }
        in[i] = false;
      }
    }
  }
  sort(tmp.begin(), tmp.end());

	vector <string> ret;
	
  for(auto it = (tmp).begin(); it != (tmp).end(); ++it) {
    ret.push_back(it->second);
  }


	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <string> p1, vector <string> p2, int p3, bool hasAnswer, vector <string> p4) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p2[i] << "\"";
	}
	cout << "}" << "," << p3;
	cout << "]" << endl;
	InternetSecurity *obj;
	vector <string> answer;
	obj = new InternetSecurity();
	clock_t startTime = clock();
	answer = obj->determineWebsite(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p4.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << "\"" << p4[i] << "\"";
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << answer[i] << "\"";
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p4.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p4[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	vector <string> p0;
	vector <string> p1;
	vector <string> p2;
	int p3;
	vector <string> p4;
	
	// ----- test 0 -----
	disabled = false;
	p0 = {"www.topcoder.com","www.sindicate_of_evil.com","www.happy_citizens.com"};
	p1 = {"hack encryption decryption internet algorithm","signal interference evil snake poison algorithm","flower baloon topcoder blue sky sea"};
	p2 = {"hack","encryption","decryption","interference","signal","internet"};
	p3 = 3;
	p4 = {"www.topcoder.com","www.sindicate_of_evil.com"};
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = {"brokenlink","flowerpower.net","purchasedomain.com"};
	p1 = {"broken","rose tulips","cheap free domain biggest greatest"};
	p2 = {"biggest","enemy","hideout"};
	p3 = 2;
	p4 = {};
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = {"a..a.ab.","...aa.b"};
	p1 = {"a bc def","def ghij klmno"};
	p2 = {"a","b","c","d","e"};
	p3 = 1;
	p4 = {"a..a.ab.","...aa.b"};
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = {"www.tsa.gov"};
	p1 = {"information assurance signal intelligence research"};
	p2 = {"signal","assurance","penguin"};
	p3 = 2;
	p4 = {"www.tsa.gov"};
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// TopCoder Security Agency (TSA, established today) is going to search for dangerous content in the internet.
// 
// 
// There are N candidate websites numbered 0 through N-1. Each website has an address given as address[i]. It also has one or more keywords associated with it. The i-th element of keyword is a string describing all keywords associated with the i-th website. It is formatted as a single space separated list of keywords without leading or trailing spaces, where each keyword consists only of lowercase letters.
// 
// 
// It is known to TSA that some keywords are dangerous. These keywords are given in vector <string> dangerous, where each element is a single dangerous keyword. For all other keywords it is not initially known whether they are dangerous or not.
// 
// 
// TSA uses the following algorithm to identify all dangerous websites:
// 
// 
//   Initially, all websites are considered to be safe.
// 
//   While there exists a website W such that it's considered safe and
//         at least threshold of its keywords are known to be dangerous
// 
//     Website W becomes dangerous
//     All keywords associated with W become dangerous   
// 
//   End While
// 
// 
// Return a vector <string> containing the addresses of all dangerous websites found by the algorithm described above sorted in increasing order of website numbers. Return an empty vector <string> if no dangerous website is found.
// 
// DEFINITION
// Class:InternetSecurity
// Method:determineWebsite
// Parameters:vector <string>, vector <string>, vector <string>, int
// Returns:vector <string>
// Method signature:vector <string> determineWebsite(vector <string> address, vector <string> keyword, vector <string> dangerous, int threshold)
// 
// 
// NOTES
// -The address of a website is just a string used to uniquely identify it. It doesn't necessarily adhere to any common format of naming websites.
// 
// 
// CONSTRAINTS
// -address will contain between 1 and 50 elements, inclusive.
// -Each element of address will contain between 1 and 50 characters, inclusive.
// -Each character in address will be a '.', '_' or a lowercase letter ('a'-'z').
// -All elements of address will be distinct.
// -keyword will contain the same number of elements as address.
// -Each element of keyword will contain between 1 and 50 characters, inclusive.
// -Each character in keyword will be a ' ' or a lowercase letter ('a'-'z').
// -Each element in keyword will be formatted as described in the statement above.
// -For each website, the keywords associated with it will be distinct.
// -dangerous will contain between 1 and 50 elements, inclusive.
// -Each element of dangerous will contain between 1 and 50 characters, inclusive.
// -Each character in dangerous will be a lowercase letter ('a'-'z').
// -All elements of dangerous will be distinct.
// -threshold will be between 1 and 25, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {"www.topcoder.com",
// "www.sindicate_of_evil.com",
// "www.happy_citizens.com"}
// {"hack encryption decryption internet algorithm",
// "signal interference evil snake poison algorithm",
// "flower baloon topcoder blue sky sea"}
// {"hack","encryption","decryption","interference","signal","internet"}
// 3
// 
// Returns: {"www.topcoder.com", "www.sindicate_of_evil.com" }
// 
// "www.topcoder.com" is detected as dangerous since it contains four dangerous keywords: "hack", "encryption", "decryption", and "internet". Hence, "algorithm" becomes a dangerous keyword. As a result, "www.sindicate_of_evil.com" is detected as dangerous since it contains three dangerous keywords: "interference", "signal", and "algorithm". Hence, the correct return value is {"www.topcoder.com","www.sindicate_of_evil.com"} since the answer must be sorted in increasing order of website numbers.
// 
// 1)
// {"brokenlink","flowerpower.net","purchasedomain.com"}
// {"broken","rose tulips","cheap free domain biggest greatest"}
// {"biggest","enemy","hideout"}
// 2
// 
// Returns: { }
// 
// No website is dangerous and an empty vector <string> should be returned.
// 
// 2)
// {"a..a.ab.","...aa.b"}
// {"a bc def","def ghij klmno"}
// {"a","b","c","d","e"}
// 1
// 
// Returns: {"a..a.ab.", "...aa.b" }
// 
// 
// 
// 3)
// {"www.tsa.gov"}
// {"information assurance signal intelligence research"}
// {"signal","assurance","penguin"}
// 2
// 
// Returns: {"www.tsa.gov" }
// 
// 
// 
// END KAWIGIEDIT TESTING

#include <bits/stdc++.h>
using namespace std;

class Islands
{
public:
	int beachLength(vector <string> kingdom);
};

bool isPair(char ch1, char ch2) {
  return (ch1 == '.' && ch2 == '#') || (ch1 == '#' && ch2 == '.');
}

int Islands::beachLength (vector <string> g) 
{
  int ret  = 0;
  for(auto it = (g).begin(); it != (g).end(); ++it) {
    cout << *it << "\n" ;
  }
  cout << "\n";
  for(int i = 0; i < (int)g.size(); ++i) {
    for(int j = 0; j < (int)g[i].size(); ++j) {
      if(j+1 < (int)g[i].size() && isPair(g[i][j], g[i][j+1])) {
        ret++;
      }

      if(i+1<(int)g.size()) {
        if(isPair(g[i][j], g[i+1][j]))
          ret++;
        if(i%2 == 0 && j > 0 && isPair(g[i][j], g[i+1][j-1]))
          ret++;
        if(i%2==1 && j+1 < (int)g[i+1].size() && isPair(g[i][j], g[i+1][j+1]))
          ret++;
      }
    }
  }
	
  return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	Islands *obj;
	int answer;
	obj = new Islands();
	clock_t startTime = clock();
	answer = obj->beachLength(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	vector <string> p0;
	int p1;
	
	// ----- test 0 -----
	disabled = false;
	p0 = {".#...#.."};
	p1 = 4;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = {"..#.##",".##.#.","#.#..."};
	p1 = 19;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = {"#...#.....","##..#...#."};
	p1 = 15;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = {"....#.",".#....","..#..#","####.."};
	p1 = 24;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// The king is trying to find new ways to generate revenue, and he is currently exploring tourism as one potential avenue. The kingdom is a group of islands, and the amount of revenue that can be generated depends on the combined total length of beaches on all the islands.
// 
// You are given a vector <string> kingdom consisting of '.' or '#' characters. '#' represents a land mass, whereas '.' represents water. kingdom[i][j] represents a regular-hexagon shaped area with each side of unit length. Since the cells are hexagonal in shape, the odd-numbered rows (0-based) are 'shifted' towards the right. A beach is a segment which has water on one side, and land on the other.
// An example vector <string> and the corresponding image are given below to illustrate. The beaches are marked in red.
// 
// {"..#.##",
//  ".##.#.",
//  "#.#..."}
// 
// 
// 
// Return the combined total length of beaches on all the islands.
// 
// DEFINITION
// Class:Islands
// Method:beachLength
// Parameters:vector <string>
// Returns:int
// Method signature:int beachLength(vector <string> kingdom)
// 
// 
// CONSTRAINTS
// -kingdom will contain between 1 and 50 elements, inclusive.
// -Each element of kingdom will contain between 1 and 50 characters, inclusive.
// -Each element of kingdom will contain the same number of characters.
// -Each character in kingdom will be either '.' or '#'.
// 
// 
// EXAMPLES
// 
// 0)
// {".#...#.."}
// 
// Returns: 4
// 
// There are two small islands with water on two sides of each island. 
// 
// 1)
// {"..#.##", 
//  ".##.#.", 
//  "#.#..."}
// 
// Returns: 19
// 
// The example in the problem statement. 
// 
// 2)
// {"#...#.....",
//  "##..#...#."}
// 
// Returns: 15
// 
// 
// 
// 3)
// {"....#.",
//  ".#....",
//  "..#..#",
//  "####.."}
// 
// Returns: 24
// 
// 
// 
// END KAWIGIEDIT TESTING

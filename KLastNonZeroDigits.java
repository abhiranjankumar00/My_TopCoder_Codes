import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class KLastNonZeroDigits
{
	public String getKDigits(int N, int K)
	{
		BigInteger ret = new BigInteger("1");
		BigInteger ten = new BigInteger("10");

		for(int i = 1; i <= N; i++) {
			ret = ret.multiply(new BigInteger(new Integer(i).toString()));
		}
		System.out.println(ret);
		
		while(ret.mod(ten).equals(BigInteger.ZERO))
			ret = ret.divide(ten);

		String ans = ret.toString();

		if(ans.length() > K) {
			ans = ans.substring(ans.length() - K, ans.length());
		}
		return ans;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1, boolean hasAnswer, String p2) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + p1);
		System.out.println("]");
		KLastNonZeroDigits obj;
		String answer;
		obj = new KLastNonZeroDigits();
		long startTime = System.currentTimeMillis();
		answer = obj.getKDigits(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + "\"" + p2 + "\"");
		}
		System.out.println("Your answer:");
		System.out.println("\t" + "\"" + answer + "\"");
		if (hasAnswer) {
			res = answer.equals(p2);
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		int p1;
		String p2;
		
		// ----- test 0 -----
		p0 = 10;
		p1 = 3;
		p2 = "288";
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 6;
		p1 = 1;
		p2 = "2";
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 6;
		p1 = 3;
		p2 = "72";
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 7;
		p1 = 2;
		p2 = "04";
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = 20;
		p1 = 9;
		p2 = "200817664";
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 5 -----
		p0 = 1;
		p1 = 1;
		p2 = "1";
		all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// 
	// You are given an int N.  The factorial of N is defined as N*(N-1)*(N-2)*...*1.  Compute the factorial of N and remove all of its rightmost zero digits.  If the result is more than K digits long, return the last K digits as a string.  Otherwise, return the entire result as a string.  
	// 
	// 
	// DEFINITION
	// Class:KLastNonZeroDigits
	// Method:getKDigits
	// Parameters:int, int
	// Returns:String
	// Method signature:String getKDigits(int N, int K)
	// 
	// 
	// CONSTRAINTS
	// -N will be between 1 and 20, inclusive.
	// -K will be between 1 and 9, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// 10
	// 3
	// 
	// Returns: "288"
	// 
	// You would first compute the factorial of 10, which is 10*9*8*7*6*5*4*3*2*1=3628800. You would then remove all rightmost zeros to get 36288. Finally, you would return the last 3 digits as a string: "288".
	// 
	// 1)
	// 6
	// 1
	// 
	// Returns: "2"
	// 
	// The factorial of 6 is 720.
	// 
	// 2)
	// 6
	// 3
	// 
	// Returns: "72"
	// 
	// 
	// 
	// 3)
	// 7
	// 2
	// 
	// Returns: "04"
	// 
	// The factorial of 7 is 5040. We remove the last zero to get "504". The last 2 digits of "504" are "04".
	// 
	// 4)
	// 20
	// 9
	// 
	// Returns: "200817664"
	// 
	// 
	// 
	// 5)
	// 1
	// 1
	// 
	// Returns: "1"
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

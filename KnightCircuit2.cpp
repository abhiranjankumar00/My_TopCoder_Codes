#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
#include <iterator>
#include <fstream>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef string ST;
typedef stringstream SS;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef vector <string> vs;

#define DEBUG(x)	cout << #x << " = " << x << "\n"
#define endl 		("\n")

#define	ep		1e-9
#define PI		M_PI
#define E 		M_E

#define	CL(a, b)	memset(a, b, sizeof(a))
#define	mp		make_pair
#define	pb		push_back

#define	all(c)		(c).begin(), (c).end()
#define	tr(i, c)	for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())		//vector & list//

#define forn(i, n)	for(int i = 0, loop_ends_here = (int)n; i < loop_ends_here ; i++)
#define forab(i, a, b)	for(int i = a, loop_ends_here = (int)b; i <= loop_ends_here; i++)
#define rep(i, a, b)	for(int i = a, loop_ends_here = (int)b; i >= loop_ends_here; i--)

#define Pf		printf
#define	Sf		scanf

#define read(n)		scanf("%d", &n)
#define write(n)	printf("%d ", n)
#define writeln(n)	printf("%d\n", n)

/*
#ifdef DEBUG
	#undef DEBUG
#endif
#define DEBUG
*/

class KnightCircuit2
{
public:
	int maxSize(int w, int h);
};
int H, W;

int X[] = {2, 2, -2, -2, 1, 1, -1, -1};
int Y[] = {1, -1, 1, -1, 2, -2, 2, -2};

int KnightCircuit2::maxSize (int w, int h) 
{
	H = h, W = w;
	if(w > 10 && h > 10)
		return w*h;
	vector < vector <bool> > vis(H, vector <bool> (W, false));

	int ret = 0;
	forn(i, H) forn(j, W)	if(vis[i][j] == false) {
		queue < ii > q;
		int tmp = 0;
		q.push(mp(i, j));

		while(!q.empty()) {
			int x = q.front().first;
			int y = q.front().second;
			q.pop();
			if(vis[x][y] == true)
				continue;
			vis[x][y] = true;
			tmp++;

			forn(i, 8)	if(x + X[i] >= 0 && x + X[i] < H && y + Y[i] >= 0 && y + Y[i] < W) {
				if(vis[x+X[i]][y + Y[i]] == false)
					q.push(mp(x+X[i], y + Y[i]));
			}
		}
		ret = max(ret, tmp);
	}
	
	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	KnightCircuit2 *obj;
	int answer;
	obj = new KnightCircuit2();
	clock_t startTime = clock();
	answer = obj->maxSize(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	p0 = 1;
	p1 = 1;
	p2 = 1;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 15;
	p1 = 2;
	p2 = 8;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 100;
	p1 = 100;
	p2 = 10000;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 10;
	p1 = 45000;
	all_right = KawigiEdit_RunTest(3, p0, p1, false, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// The knight is a chess piece that moves by jumping: two cells in one direction, one in the other.
// Formally, a knight standing on the cell (x,y) can move to any of the following eight cells:
// (x+2,y+1), (x+2,y-1), (x-2,y+1), (x-2,y-1), (x+1,y+2), (x+1,y-2), (x-1,y+2), and (x-1,y-2).
// Of course, if the knight is close to the edge of the board, some of these cells might not be on the board.
// It is not allowed to jump to a cell that is not on the board.
// 
// A knight circuit is a sequence of cells on a chessboard that starts and ends with the same cell.
// Each consecutive pair of cells in the knight circuit must correspond to a single jump of the knight.
// The knight circuit may visit each cell arbitrarily many times.
// The size of a knight circuit is the number of different cells visited by the circuit.
// 
// You are given the ints w and h: the width (in columns) and the height (in rows) of a rectangular chessboard. Return the maximum knight circuit size that can be obtained on the given board.
// You are free to choose any cell as the start of your circuit.
// 
// DEFINITION
// Class:KnightCircuit2
// Method:maxSize
// Parameters:int, int
// Returns:int
// Method signature:int maxSize(int w, int h)
// 
// 
// CONSTRAINTS
// -w and h will each be between 1 and 45000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 1
// 1
// 
// Returns: 1
// 
// Note that a sequence that consists of a single cell is considered to be a valid knight circuit.
// 
// 1)
// 15
// 2
// 
// Returns: 8
// 
// If you start at any corner of the board, it is possible to move the knight to visit 8 cells, and then do the same moves in reverse in order to return to the starting cell. One possibility for the first eight cells of an optimal knight circuit is shown below:
// 
// 
// 1...3...5...7..
// ..2...4...6...8
// 
// 
// 2)
// 100
// 100
// 
// Returns: 10000
// 
// It is possible to make a Knight circuit that contains all the cells on the board.
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

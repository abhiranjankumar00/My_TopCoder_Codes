#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef string ST;
typedef stringstream SS;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef vector <string> vs;

#define Pf	printf
#define	Sf	scanf

#define	ep	1e-9
#define PI M_PI
#define E M_E

#define	CL(a, b)	memset(a, b, sizeof(a))
#define	mp	make_pair

#define	pb	push_back

#define	all(c)	(c).begin(), (c).end()
#define	tr(i, c)	for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())	//vector & list//

#define forn(i, n)	for(int i = 0, loop_ends_here = (int)n; i < loop_ends_here; i++)
#define forab(i, a, b)	for(int i = a, loop_ends_here = (int) b; i <= loop_ends_here; i++)
#define rep(i, a, b)	for(int i = a, loop_ends_here = (int)b; i>=loop_ends_here; i--)

const int mx = 1000000001;
vi pfsq;
int cnt;

class MagicCandy
{
public:
	int f(int n) {
		int t = sqrt(n);
		return n == 1 ? 1 : t + f(n-t) - (t*t == n ? 1 : 0);
	}

	int whichOne(int n)
	{
		return f(n);
/*
		pfsq.clear();
		for(int64 i = 1; ;i++) {
			int64 t = ceil((i*i + 3)/4.0);

			if(t > mx)	break;
			pfsq.pb(t);
		}
//		cout << pfsq.size() << endl;
//		Pf("%s\n", "1,2,3,5,7,10,13,17,21,26,31,37,43,50,57,65,73,82,91,101,111,122,133,145,157,170,183,197");
// / *
		forn(i, 100)
			cout << pfsq[i] << ",";
		cout << endl;
		
		forn(i, 10)
			cout << pfsq[pfsq.size() - 1 -i] << ", ";
			cout << endl;
// * /		
		vi :: iterator it =  lower_bound(all(pfsq), n);
		cout << *it << endl;


		if(n < 3)	return n;
		else if(*it == n)
			return n;
		else
			return *(--it);
*/
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << p0;
	cout << "]" << endl;
	MagicCandy *obj;
	int answer;
	obj = new MagicCandy();
	clock_t startTime = clock();
	answer = obj->whichOne(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	
	{
	// ----- test 0 -----
	p0 = 5;
	p1 = 5;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 9;
	p1 = 7;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 20;
	p1 = 17;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 5265;
	p1 = 5257;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 20111223;
	p1 = 20110741;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 1;
	p1 = 1;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	p0 = 100000000;
	all_right = KawigiEdit_RunTest(6, p0, false, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Today is the Christmas Eve. People around the world celebrate this 
// holiday. The following story takes place in the land of reindeer, where Santa Claus resides.
// 
// 
// 
// The reindeer love candies. They have n pieces of candy. The pieces of candy are numbered 1 through n. Dasher is one of the reindeer. He wants to eat one of the candies. To pick the one he will eat, Dasher uses the following method:
// 
// While there is more than one piece of candy:
// Discard all candies that are numbered by perfect squares (i.e., candies 1, 4, 9, 16, 25, etc.).
// Relabel the remaining k candies 1 through k, keeping the numbers in the same order.
// Once only one piece of candy remains, Dasher will eat it.
// 
// 
// 
// 
// You are given an int n. Your method must compute and return the number initially assigned to the piece of candy eaten by Dasher.
// 
// DEFINITION
// Class:MagicCandy
// Method:whichOne
// Parameters:int
// Returns:int
// Method signature:int whichOne(int n)
// 
// 
// NOTES
// -It can be proved that Dasher's method will always lead to a situation in which only one piece of candy remains.
// 
// 
// CONSTRAINTS
// -n will be between 1 and 1,000,000,000 inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 5
// 
// Returns: 5
// 
// We start with 5 candies. Let's call them A, B, C, D, and E. Initially, they are numbered 1 through 5, in this order.
// 
// In the first round, we discard candies with numbers 1 (which is A) and 4 (which is D).
// This leaves us with candies B, C, and E.
// These candies now get new numbers: B becomes 1, C becomes 2, and E becomes 3.
// In the second round, we discard candy number 1 (which is now B).
// This leaves us with candies C and E.
// Again, the candies now get new numbers: C becomes 1 and E becomes 2.
// In the third round, we discard candy number 1 (which is now C).
// 
// The only remaining candy is E. Its number in the beginning was 5, therefore our method should return 5.
// 
// 1)
// 9
// 
// Returns: 7
// 
// This time we start with 9 pieces of candy. If we label them A through I, the process will look as follows:
// 
// start: ABCDEFGHI
// throw away candies 1, 4, 9 (A, D, I)
// after the first round: BCEFGH
// throw away candies 1, 4 (B, F)
// after the second round: CEGH
// throw away candies 1, 4 (C, H)
// after the third round: EG
// throw away candy 1 (E)
// at the end: G
// 
// 
// 2)
// 20
// 
// Returns: 17
// 
// 
// 
// 3)
// 5265
// 
// Returns: 5257
// 
// 
// 
// 4)
// 20111223
// 
// Returns: 20110741
// 
// 
// 
// 5)
// 1
// 
// Returns: 1
// 
// 
// 
// END KAWIGIEDIT TESTING




//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

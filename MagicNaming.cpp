#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef string ST;
typedef stringstream SS;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef vector <string> vs;

#define Pf	printf
#define	Sf	scanf

#define	ep	1e-9
#define PI M_PI
#define E M_E

#define	CL(a, b)	memset(a, b, sizeof(a))
#define	mp	make_pair

#define	pb	push_back

#define	all(c)	(c).begin(), (c).end()
#define	tr(i, c)	for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())	//vector & list//

#define forn(i, n)	for(int i = 0, loop_ends_here = (int)n; i < loop_ends_here; i++)
#define forab(i, a, b)	for(int i = a, loop_ends_here = (int) b; i <= loop_ends_here; i++)
#define rep(i, a, b)	for(int i = a, loop_ends_here = (int)b; i>=loop_ends_here; i--)

class MagicNaming
{
public:
	int maxReindeers(string magicName)
	{
		int ret;
		
		return ret;
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	MagicNaming *obj;
	int answer;
	obj = new MagicNaming();
	clock_t startTime = clock();
	answer = obj->maxReindeers(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	int p1;
	
	{
	// ----- test 0 -----
	p0 = "aba";
	p1 = 2;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "babbaba";
	p1 = 2;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "philosophersstone";
	p1 = 5;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "knuthmorrispratt";
	p1 = 7;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "acrushpetrtourist";
	p1 = 7;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = "zzzzz";
	p1 = 5;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Today is the Christmas Eve. People around the world celebrate this 
// holiday. The following story takes place in the land of reindeer, where Santa Claus resides.
// 
// 
// 
// The reindeer have invented a new magic spell. To pick a name for the spell, they decided to concatenate their own names.
// 
// 
// 
// Of course, this can be done in multiple ways. For example, if there are two reindeer called "bob" and "bobby", they could call the spell either "bobbobby" or "bobbybob". To resolve this ambiguity, the reindeer picked the lexicographically smallest possibility. (In this case, that would be "bobbobby".)
// 
// 
// 
// You are given a string magicName. This is the name of the spell. You do not know how many reindeer invented the spell and what their names were. Your method must compute and return the largest possible number of reindeer that could have invented the spell.
// 
// DEFINITION
// Class:MagicNaming
// Method:maxReindeers
// Parameters:string
// Returns:int
// Method signature:int maxReindeers(string magicName)
// 
// 
// NOTES
// -Given two distinct strings of equal length, the lexicographically smaller one is the one with a smaller character in the first position where they differ
// -The name of each reindeer is a nonempty string of lowercase letters.
// -It is always possible that the spell was created by a single reindeer, so the return value is always defined.
// -Note that multiple reindeer may share the same name. See Example #5 for clarification.
// 
// 
// CONSTRAINTS
// -The length of magicName will be between 1 and 50, inclusive.
// -Each character in magicName will be between 'a' and 'z', inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// "aba"
// 
// Returns: 2
// 
// The magic spell called "aba" could have been invented by two reindeer called "a" and "ba".
// 
// Note that this spell could not have been invented by three reindeer. Their names would have to be "a", "b", and "a". However, reindeer with these names would choose the name "aab" for their spell.
// 
// 1)
// "babbaba"
// 
// Returns: 2
// 
// In this case there might have been two reindeer called "ba" and "bbaba". More than two reindeer would never pick this name for their spell.
// 
// 2)
// "philosophersstone"
// 
// Returns: 5
// 
// 
// 
// 3)
// "knuthmorrispratt"
// 
// Returns: 7
// 
// 
// 
// 4)
// "acrushpetrtourist"
// 
// Returns: 7
// 
// 
// 
// 5)
// "zzzzz"
// 
// Returns: 5
// 
// Note that multiple reindeer may share the same name.
// 
// END KAWIGIEDIT TESTING




//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

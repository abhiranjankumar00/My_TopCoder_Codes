#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef string ST;
typedef stringstream SS;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef vector <string> vs;

#define Pf	printf
#define	Sf	scanf

#define	ep	1e-9
#define PI M_PI
#define E M_E

#define	CL(a, b)	memset(a, b, sizeof(a))
#define	mp	make_pair

#define	pb	push_back

#define	all(c)	(c).begin(), (c).end()
#define	tr(i, c)	for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())	//vector & list//

#define forn(i, n)	for(int i = 0, loop_ends_here = (int)n; i < loop_ends_here; i++)
#define forab(i, a, b)	for(int i = a, loop_ends_here = (int) b; i <= loop_ends_here; i++)
#define rep(i, a, b)	for(int i = a, loop_ends_here = (int)b; i>=loop_ends_here; i--)

class MagicStonesStore
{
public:
	string ableToDivide(int n)
	{
		return n ^ 1 ? "YES" : "NO";
	/*
		string ret;
		const int sz = 3000;
		bool pr[sz];
		CL(pr, -1);
		pr[0] = pr[1] = false;
		
		for(int i = 2; i*i < sz; i++)
			if(pr[i])
				for(int j = i+i; j<sz; j+= i)
					pr[j] = false;
					
		forab(i, 2, 2*n)
			if(pr[i] && pr[2*n-i]) {
				Pf("%d, %d\n", i, 2*n-i);
				return "YES";
			}
		return "NO";
		
		return ret;
	*/
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << p0;
	cout << "]" << endl;
	MagicStonesStore *obj;
	string answer;
	obj = new MagicStonesStore();
	clock_t startTime = clock();
	answer = obj->ableToDivide(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	string p1;
	
	{
	// ----- test 0 -----
	p0 = 1;
	p1 = "NO";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 2;
	p1 = "YES";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 3;
	p1 = "YES";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 5;
	p1 = "YES";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 15;
	all_right = KawigiEdit_RunTest(4, p0, false, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 16;
	all_right = KawigiEdit_RunTest(5, p0, false, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	p0 = 13;
	all_right = KawigiEdit_RunTest(6, p0, false, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 7 -----
	p0 = 1000;
	all_right = KawigiEdit_RunTest(7, p0, false, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Today is the Christmas Eve. People around the world celebrate this 
// holiday. The following story takes place in the land of reindeer, where Santa Claus resides.
// 
// 
// 
// The currency in the land of reindeer are magic stones. Santa's reindeer have 2n magic stones (i.e., an even number of them). They want to divide the stones into two piggy banks. Santa's reindeer are very fond of primes, therefore they want each piggy bank to contain a prime number of magic stones.
// 
// 
// 
// You are given an int n. If it is possible to divide 2n magic stones into two piggy banks, each containing a prime number of stones, return "YES", otherwise return "NO" (quotes for clarity).
// 
// DEFINITION
// Class:MagicStonesStore
// Method:ableToDivide
// Parameters:int
// Returns:string
// Method signature:string ableToDivide(int n)
// 
// 
// NOTES
// -A positive integer is prime if and only if it has exactly two positive integer divisors. The first few prime numbers are 2, 3, 5, 7, 11, ...
// -The number zero is not a prime number, hence you are not allowed to leave any piggy bank empty.
// 
// 
// CONSTRAINTS
// -n will be between 1 and 1,000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 1
// 
// Returns: "NO"
// 
// As n=1, we are dividing 2 magic stones into two piggy banks. In this case is impossible to have a prime number of stones in each piggy bank.
// 
// 1)
// 2
// 
// Returns: "YES"
// 
// The only valid way of dividing the stones in this case is to put 2 magic stones into each of the piggy banks.
// 
// 2)
// 3
// 
// Returns: "YES"
// 
// Now the only way is to put 3 magic stones into each of the piggy banks.
// 
// 3)
// 5
// 
// Returns: "YES"
// 
// For 2n=10 stones we have two valid ways of dividing them: either as 5 + 5 or as 7 + 3.
// 
// END KAWIGIEDIT TESTING




//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef string ST;
typedef stringstream SS;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef vector <string> vs;

#define Pf	printf
#define	Sf	scanf

#define	ep	1e-9
#define PI M_PI
#define E M_E

#define	CL(a, b)	memset(a, b, sizeof(a))
#define	mp	make_pair

#define	pb	push_back
#define	SZ(a)	int((a).size())

#define	all(c)	(c).begin(), (c).end()
#define	tr(i, c)	for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())	//vector & list//

#define	forn(i, n)	for(int i = 0; i < n; i++)
#define	forab(i, a, b)	for(int i = a; i <= b; i++)
#define	rep(i, a, b)	for(int i = a; i>=b; i--)

bool vis[1001][1001];

struct Node {
	int x, y;
	Node(int _x, int _y) {
		x = _x,		y = _y;
	}
};

#define range 501
inline bool isValid(int x, int y) {
	return (x > -1*range && x < range && y > -1*range && y < range);
}

class MagicalGirlLevelTwoDivTwo
{
public:
	string isReachable(vector <int> jmp, int x, int y)
	{
		CL(vis, false);
		int n = jmp.size();

		vvi X(n, vi(8)), Y(n, vi(8));
		
		forn(i, n)
		{
			X[i][0] = X[i][1] = Y[i][5] = Y[i][4] = jmp[i];
			X[i][2] = X[i][3] = Y[i][6] = Y[i][7] = -jmp[i];
			X[i][4] = X[i][6] = Y[i][0] = Y[i][2] = 1;
			X[i][5] = X[i][7] = Y[i][1] = Y[i][3] = -1;
		}
/*
		forn(i, n)
		{
			forn(j, 8)
				printf("(%d, %d) ", X[i][j], Y[i][j]);
			cout << endl;
		}
*/
		queue <Node> q;
		vis[500][500] = true;
		q.push(Node(0,0));
		int xx, yy;

//		cout << "label 0\n";
		while(!q.empty()) {
			Node nd = q.front();
//			cout << "label 1\n";

//			printf("(%d, %d)  ", nd.x, nd.y);

//			cout << "label 2\n";
			if(nd.x == x && nd.y == y)
				return "YES";

//			cout << "label 3\n";
//			printf("n = %d\n",n);	

			forn(i, n)
			{
//				printf("i = %d", i);
				forn(j, 8)
				{
					xx = nd.x + X[i][j],  yy = nd.y + Y[i][j];
//					printf("(%d %d) ", xx, yy);
					if(isValid(xx, yy) && !vis[500+xx][500+yy])
						vis[500+xx][500+yy] = true, q.push(Node(xx,yy));
				}
			}
//			cout << "label 4\n";
			q.pop();
		}

		return "NO";
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, int p2, bool hasAnswer, string p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << p1 << "," << p2;
	cout << "]" << endl;
	MagicalGirlLevelTwoDivTwo *obj;
	string answer;
	obj = new MagicalGirlLevelTwoDivTwo();
	clock_t startTime = clock();
	answer = obj->isReachable(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p3 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	int p1;
	int p2;
	string p3;
	
	{
	// ----- test 0 -----
	int t0[] = {2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 5;
	p2 = 4;
	p3 = "YES";
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {3};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 5;
	p2 = 4;
	p3 = "NO";
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {1,2,3,4,5,6,7,8,9,10};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = -30;
	p2 = 27;
	p3 = "YES";
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {29};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 29;
	p2 = 0;
	p3 = "NO";
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {1,3,5,7,9,11,13,15,17,19};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 29;
	p2 = 30;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, false, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Magical Girls are girls who have magical powers. They fight against evil witches to protect the Earth.
// 
// You, one of the Magical Girls, are at point (0, 0) of the plane. You find another Magical Girl at (x, y) and she seems to be injured. So you decide to go to point (x, y) to help her.
// 
// You can move only by n-knight jump. For a positive integer n, the n-knight jump is 8 types of moves. You can go from (0, 0) to (n, 1), (n, -1), (-n, 1), (-n, -1), (1, n), (-1, n), (1, -n) or (-1, -n) by using n-knight jump once.
// 
// You are given a vector <int> jumpTypes containing the valid n-knight jumps you can perform. You can only use an n-knight jump if jumpTypes contains n. Return "YES" if you can reach (x, y) with the n-knight jumps of given numbers. Otherwise return "NO" (all quotes for clarity). You can use each n-knight jump as many times as you want.
// 
// 
// DEFINITION
// Class:MagicalGirlLevelTwoDivTwo
// Method:isReachable
// Parameters:vector <int>, int, int
// Returns:string
// Method signature:string isReachable(vector <int> jumpTypes, int x, int y)
// 
// 
// CONSTRAINTS
// -jumpTypes will contain between 1 and 10 elements, inclusive.
// -Each element of jumpTypes will be between 1 and 30, inclusive.
// -All elements of jumpTypes will be distinct.
// -x and y will each be between -30 and 30, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {2}
// 5
// 4
// 
// Returns: "YES"
// 
// (0, 0) -> (2, 1) -> (4, 2) -> (5, 4).
// 
// 1)
// {3}
// 5
// 4
// 
// Returns: "NO"
// 
// 
// 
// 2)
// {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
// -30
// 27
// 
// Returns: "YES"
// 
// 
// 
// 3)
// {29}
// 29
// 0
// 
// Returns: "NO"
// 
// 
// 
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

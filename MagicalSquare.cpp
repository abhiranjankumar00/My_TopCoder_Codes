#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef string ST;
typedef stringstream SS;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef vector <string> vs;

#define Pf	printf
#define	Sf	scanf

#define	ep	1e-9
#define PI M_PI
#define E M_E

#define	CL(a, b)	memset(a, b, sizeof(a))
#define	mp	make_pair

#define	pb	push_back

#define	all(c)	(c).begin(), (c).end()
#define	tr(i, c)	for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())	//vector & list//

#define forn(i, n)	for(int i = 0, loop_ends_here = (int)n; i < loop_ends_here; i++)
#define forab(i, a, b)	for(int i = a, loop_ends_here = (int) b; i <= loop_ends_here; i++)
#define rep(i, a, b)	for(int i = a, loop_ends_here = (int)b; i>=loop_ends_here; i--)

class MagicalSquare
{
public:
	long long getCount(vector <string> rowStrings, vector <string> columnStrings)
	{
		long long ret;
		
		return ret;
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <string> p1, bool hasAnswer, long long p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	MagicalSquare *obj;
	long long answer;
	obj = new MagicalSquare();
	clock_t startTime = clock();
	answer = obj->getCount(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	vector <string> p1;
	long long p2;
	
	{
	// ----- test 0 -----
	string t0[] = {"f","o","x"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"f","o","x"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 1ll;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"x","x","x"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"x","","xx"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 3ll;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"cd","cd","cd"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"dvd","dvd","dvd"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 0ll;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"abab","ab","abab"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"abab","ab","abab"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 11ll;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"qwer","asdf","zxcv"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"qaz","wsx","erdfcv"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 1ll;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// You are going to fill 9 strings into the cells of a 3x3 square. Rows of the square are numbered 0 to 2 from top to bottom, and columns of the square are numbered 0 to 2 from left to right. Let S[i][j] be the string you'll enter into the cell in row i, column j. The strings S[i][j] do not have to be distinct. It is also allowed to use empty strings.
// 
// You are given two vector <string>s rowStrings and columnStrings. For each i, the concatenation of strings in row i must be equal to rowStrings[i]. The same must hold for columns and columnStrings. Formally, the strings in the cells must satisfy the following conditions:
// 
// For all 0<=i<=2, S[i][0]+S[i][1]+S[i][2] = rowStrings[i].
// For all 0<=j<=2, S[0][j]+S[1][j]+S[2][j] = columnStrings[j].
// 
// Here, '+' represents a string concatenation.
// 
// Return the number of ways in which the strings S[i][j] can be chosen so that all conditions are satisfied.
// 
// DEFINITION
// Class:MagicalSquare
// Method:getCount
// Parameters:vector <string>, vector <string>
// Returns:long long
// Method signature:long long getCount(vector <string> rowStrings, vector <string> columnStrings)
// 
// 
// CONSTRAINTS
// -rowStrings and columnStrings will each contain exactly 3 elements.
// -Each element of rowStrings will contain between 0 and 50 characters, inclusive.
// -Each element of columnStrings will contain between 0 and 50 characters, inclusive.
// -rowStrings and columnStrings will contain only lowercase letters ('a'-'z').
// 
// 
// EXAMPLES
// 
// 0)
// {"f", "o", "x"}
// 
// {"f", "o", "x"}
// 
// 
// Returns: 1
// 
// The only valid way to choose the strings:
// 
//  --- --- ---
// | f |   |   |
//  --- --- ---
// |   | o |   |
//  --- --- ---
// |   |   | x |
//  --- --- ---
// 
// That is, S[0][0]="f", S[1][1]="o", S[2][2]="x", and all other S[i][j] are empty.
// 
// 1)
// {"x", "x", "x"}
// {"x", "", "xx"}
// 
// Returns: 3
// 
// These are the three valid possibilities:
// 
//  --- --- ---    --- --- ---    --- --- ---
// | x |   |   |  |   |   | x |  |   |   | x |
//  --- --- ---    --- --- ---    --- --- ---
// |   |   | x |  | x |   |   |  |   |   | x |
//  --- --- ---    --- --- ---    --- --- ---
// |   |   | x |  |   |   | x |  | x |   |   |
//  --- --- ---    --- --- ---    --- --- ---
// 
// 
// 2)
// {"cd", "cd", "cd"}
// {"dvd", "dvd", "dvd"}
// 
// Returns: 0
// 
// In this case there is no way to satisfy all conditions.
// 
// 3)
// {"abab", "ab", "abab"}
// {"abab", "ab", "abab"}
// 
// Returns: 11
// 
// 
// 
// 4)
// {"qwer", "asdf", "zxcv"}
// {"qaz", "wsx", "erdfcv"}
// 
// Returns: 1
// 
// 
// 
// END KAWIGIEDIT TESTING




//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

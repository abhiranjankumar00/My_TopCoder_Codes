#include <bits/stdc++.h>
using namespace std;

class MagicalStringDiv1
{
public:
	int getLongest(string S);
};

int MagicalStringDiv1::getLongest (string S)
{
	int ret = (int)0;
    int N = S.size();
    for(int i = -1; i <= (int)N; ++i) {
        int lt = 0, rt = 0;
        for(int j = 0; j < (int)N; ++j) {
            if(j <= i && S[j] == '>')
                lt++;
            if(j > i  && S[j] == '<')
                rt++;
        }
        printf("[0-%d: %d], [%d-%d: %d]\n", i, lt, i+1, N-1, rt);
        int mn = min(lt, rt);
        ret = max(ret, 2*mn);
    }
	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	MagicalStringDiv1 *obj;
	int answer;
	obj = new MagicalStringDiv1();
	clock_t startTime = clock();
	answer = obj->getLongest(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	string p0;
	int p1;
	
	// ----- test 0 -----
	disabled = false;
	p0 = "<><><<>";
	p1 = 4;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = ">>><<<";
	p1 = 6;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = "<<<>>>";
	p1 = 0;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = "<<<<><>>><>>><>><>><>>><<<<>><>>>>><<>>>>><><<<<>>";
	p1 = 24;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = ">>>>><";
	p1 = 2;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Magical Girl Illy uses "magical strings" to cast spells.
// For her, a string X is magical if and only if there exists a non-negative integer k such that X is composed of k consecutive '>' characters followed by k consecutive '<' characters.
// Note that the empty string is also magical (for k=0).
// 
// Once Illy picked up a string S.
// Each character of S was either '<' or '>'.
// Illy can change S by removing some of its characters.
// (The characters she does not remove will remain in their original order.)
// Illy wants to change S into a magical string by removing as few of its characters as possible.
// 
// You are given the string S.
// Compute and return the length of the magical string Illy will obtain from S.
// 
// DEFINITION
// Class:MagicalStringDiv1
// Method:getLongest
// Parameters:string
// Returns:int
// Method signature:int getLongest(string S)
// 
// 
// CONSTRAINTS
// -S will contain between 1 and 50 characters, inclusive.
// -Each character of S will be '<' or '>'.
// 
// 
// EXAMPLES
// 
// 0)
// "<><><<>"
// 
// Returns: 4
// 
// The longest magical string Illy can produce is ">><<".
// Its length is 4.
// To change S into ">><<", Illy must remove the characters at 0-based indices 0, 2, and 6.
// 
// 1)
// ">>><<<"
// 
// Returns: 6
// 
// S is already a magical string. Therefore Illy doesn't have to remove any character.
// 
// 
// 2)
// "<<<>>>"
// 
// Returns: 0
// 
// Illy has to remove all characters of S.
// 
// 3)
// "<<<<><>>><>>><>><>><>>><<<<>><>>>>><<>>>>><><<<<>>"
// 
// Returns: 24
// 
// 
// 
// END KAWIGIEDIT TESTING

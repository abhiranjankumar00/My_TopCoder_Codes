#include <iostream>
#include <ctime>
#include <vector>
#include <list>
#include <queue>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <cassert>
#include <utility>
#include <sstream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <climits>
#include <iterator>
#include <fstream>
using namespace std;

typedef long long 		int64;
typedef vector<int> 		vi;
typedef string 			ST;
typedef stringstream 		SS;
typedef vector< vector<int> > 	vvi;
typedef pair<int,int> 		ii;
typedef vector<string> 		vs;
/*
#if __cplusplus > 199711L	// for g++0x, value of __cplusplus must be greater thana 199711L.
	#define tr(i, c)	for(auto i = begin(c); i != end(c); i++)
#else
	#define tr(i, c)	for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#endif
*/
#define endl		("\n")
#define tr(i, c)	for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define PI		M_PI
#define E 		M_E
#define	eps		1e-9

#define	Sf		scanf
#define	Pf		printf

#define forn(i, n)	for(int i = 0, lets_stop_here = (int)n; i <  lets_stop_here; i++)
#define forab(i, a, b)	for(int i = a, lets_stop_here = (int)b; i <= lets_stop_here; i++)
#define rep(i, a, b)	for(int i = a, lets_stop_here = (int)b; i >= lets_stop_here; i--)

#define	all(c)		(c).begin(), (c).end()
#define	cl(a, b)	memset(a, b, sizeof(a))
#define mp		make_pair
#define pb		push_back

#define	present(x, c)	((c).find(x) != (c).end())	//map & set//
#define	cpresent(x, c)	(find( (c).begin(), (c).end(), x) != (c).end())	//vector & list//

#define read(n)		scanf("%d", &n)
#define write(n)	printf("%d ", n)
#define writeln(n)	printf("%d\n", n)

#if (0)
	#define debug 
#else 
	#define debug(x)	cout << #x << " = " << x << "\n"
#endif

class MarblePositioning
{
public:
	double totalWidth(vector <int> radius);
};

double solve(vector <int> &r) {
	double dist = 0;
	for(int i = 1; i <= r.size()-1; i++) {
		dist += 2.0*sqrt(r[i]*1.0*r[i-1]);
	}
	return dist;
}

double MarblePositioning::totalWidth (vector <int> radius) 
{
	int N = radius.size();
	sort(radius.begin(), radius.end() );
	double ret = 1e30;

	do{
		ret = min(ret, solve(radius));
	}while(next_permutation(radius.begin(), radius.end() ));
	
	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, double p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	MarblePositioning *obj;
	double answer;
	obj = new MarblePositioning();
	clock_t startTime = clock();
	answer = obj->totalWidth(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == answer && fabs(p1 - answer) <= 1e-9 * max(1.0, fabs(p1));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	double p1;
	
	{
	// ----- test 0 -----
	int t0[] = {1,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2.8284271247461903;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {10,20,30};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 62.92528739883945;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// NOTE: This problem statement contains images that may not display properly if viewed outside of the applet.
// 
// 
// Everybody loves geometry, so here is a geometry problem.
// You have a few marbles of possibly different sizes.
// You are given a vector <int> radius that describes the marbles: each element of radius is the radius of one of your marbles.
// 
// You want to place all marbles onto a straight line that is drawn on the table.
// Clearly, this makes the problem two-dimensional: we can just view the marbles as circles that will all be touching the line from above.
// Of course, the marbles cannot overlap, so in our problem no two circles are allowed to overlap.
// Note that you may place the marbles onto the line in any order, you do not have to preserve the order in which they are given in radius.
// 
// Additionally, you want to pack the bottoms of the marbles as close together as possible.
// More precisely:
// For each marble consider the point where it touches the line.
// Compute and return the smallest possible distance between the farthest two of those points.
// (That is, if you imagine the line as going from the left to the right, your task is to minimize the distance between the leftmost and the rightmost of the points where the circles touch the line.)
// 
// DEFINITION
// Class:MarblePositioning
// Method:totalWidth
// Parameters:vector <int>
// Returns:double
// Method signature:double totalWidth(vector <int> radius)
// 
// 
// NOTES
// -The returned values must have an absolute or relative error less than 1e-9.
// 
// 
// CONSTRAINTS
// -radius will contain between 2 and 8 elements, inclusive.
// -Each element of radius will be between 1 and 1000000000 (10^9), inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {1, 2}
// 
// Returns: 2.8284271247461903
// 
// One of the best ways to place the marbles is the following one:
// 
// 
// 
// 
// 1)
// {7,7,7}
// 
// Returns: 28.0
// 
// 
// 
// 2)
// {10, 20, 30}
// 
// Returns: 62.92528739883945
// 
// 
// 
// 
// 
// 3)
// {100, 100,11,11,25}
// 
// Returns: 200.0
// 
// 
// 
// 4)
// {1,999950884,1}
// 
// Returns: 63246.0
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

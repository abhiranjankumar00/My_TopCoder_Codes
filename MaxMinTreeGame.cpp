#include <bits/stdc++.h>
using namespace std;

class MaxMinTreeGame
{
public:
	int findend(vector <int> edges, vector <int> costs);
};

int MaxMinTreeGame::findend (vector <int> edges, vector <int> costs)
{
    int N = costs.size();
    if(N == 2)
        return max(costs[0], costs[1]);
	int ret=0;
    vector <int> childs(N, 0);
    for(int i = 0; i < (int)edges.size(); ++i) {
        childs[edges[i]]++;
    }
    if(childs[0] == 1)
        ret = costs[0];
    for(int i = 0; i < (int)N; ++i) {
        if(childs[i]==0)
            ret = max(ret, costs[i]);
    }
	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	MaxMinTreeGame *obj;
	int answer;
	obj = new MaxMinTreeGame();
	clock_t startTime = clock();
	answer = obj->findend(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	vector <int> p0;
	vector <int> p1;
	int p2;
	
	// ----- test 0 -----
	disabled = false;
	p0 = {0};
	p1 = {4,6};
	p2 = 6;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = {0,1};
	p1 = {4,6,5};
	p2 = 5;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = {0,1,2,3};
	p1 = {0,1,0,1,0};
	p2 = 0;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = {0,0,0};
	p1 = {5,1,2,3};
	p2 = 3;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = {0,0};
	p1 = {3,2,5};
	p2 = 5;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// MaxMinTreeGame is a game for two players.
// The game is played on a tree.
// The tree has N nodes, labeled 0 through N-1.
// Each node of the tree also has an integer cost.
// 
// The players take alternating turns.
// In her turn, the current player starts by choosing one edge of the tree and erasing it.
// This necessarily divides the tree into two components.
// The current player then decides which of the components to keep, and erases the other component completely.
// 
// The game ends when there is only one node left.
// The cost of that node is the result of the game.
// The first player (i.e., the one that starts the game) wants to maximize the result.
// Naturally, the second player's goal is to minimize the result.
// 
// You are given a vector <int> edges that describes the structure of the tree.
// For each i between 0 and N-2, inclusive, the tree contains an edge between the vertices i+1 and edges[i].
// You are also given a vector <int> costs.
// For each i between 0 and N-1, inclusive, the cost of vertex i is costs[i].
// 
// Return the result of the game, assuming that both players play optimally.
// 
// DEFINITION
// Class:MaxMinTreeGame
// Method:findend
// Parameters:vector <int>, vector <int>
// Returns:int
// Method signature:int findend(vector <int> edges, vector <int> costs)
// 
// 
// CONSTRAINTS
// -The number of nodes in the tree N will be between 2 and 50, inclusive.
// -edges will contain exactly N-1 elements.
// -For each i, edges[i] will be between 0 and i, inclusive.
// -costs will contain exactly N elements.
// -Each element of costs will be between 0 and 1,000,000,000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {0}
// {4,6}
// 
// Returns: 6
// 
// There is only one edge in this tree and the first player will choose it. After that she will keep the component containing the node with cost 6.
// 
// 
// 1)
// {0,1}
// {4,6,5}
// 
// Returns: 5
// 
// One of the optimal moves for the first player is to remove the edge between nodes 0 and 1 and to keep the component containing nodes 1 and 2. The second player will then remove the remaining edge and keep the node with cost 5.
// 
// 
// 2)
// {0,1,2,3}
// {0,1,0,1,0}
// 
// Returns: 0
// 
// 
// 
// 3)
// {0,0,0}
// {5,1,2,3}
// 
// Returns: 3
// 
// 
// 
// 4)
// {0,0}
// {3,2,5}
// 
// Returns: 5
// 
// 
// 
// END KAWIGIEDIT TESTING

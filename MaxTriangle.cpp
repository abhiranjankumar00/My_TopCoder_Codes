#include <bits/stdc++.h>
using namespace std;

class MaxTriangle
{
	public:
		double calculateArea(int A, int B);
};

long long find(long long l, long long r, long long t) {
	if(l == r)
		return l;
	long long mid = (l+r)/2;
	if(mid*mid < t)
		return find(mid+1, r, t);
	else
		return find(l, mid, t);
}

double MaxTriangle::calculateArea (int A, int B) 
{
	long long a = A, b = B;
	double ret=-1;
	vector <pair <long long, long long > > p1, p2;

	for(long long x1 = 0; x1*x1 <= a; x1++)  {
		long long y1 = find(0, 2e10, a-x1*x1);
		if(x1*x1+y1*y1==a)
			p1.push_back(make_pair(x1, y1));
	}
	for(long long x2 = 0; x2*x2 <= b; x2++)  {
		long long y2 = find(0, 2e10, b-x2*x2);
		if(x2*x2+y2*y2==b)
			p2.push_back(make_pair(x2, y2));
	}
/*
	printf("p1: ");
	for(auto it = (p1).begin(); it != (p1).end(); ++it) {
		printf("(%lld, %lld), ", it->first, it->second);
	}
	cout << "\n";
	printf("p2: ");
	for(auto it = (p2).begin(); it != (p2).end(); ++it) {
		printf("(%lld, %lld), ", it->first, it->second);
	}
	cout << "\n";
*/
	for(auto it = (p1).begin(); it != (p1).end(); ++it) {
		for(auto jt = (p2).begin(); jt != (p2).end(); ++jt) {
			double area = (it->first*jt->second + it->second*jt->first)/2.0;
			area = (area);
			ret = max(area,ret);
		}
	}

	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, double p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	MaxTriangle *obj;
	double answer;
	obj = new MaxTriangle();
	clock_t startTime = clock();
	answer = obj->calculateArea(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == answer && fabs(p2 - answer) <= 1e-9 * max(1.0, fabs(p2));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	double p2;
	
	{
	// ----- test 0 -----
	p0 = 1;
	p1 = 1;
	p2 = 0.5;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 3;
	p1 = 7;
	p2 = -1.0;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 41;
	p1 = 85;
	p2 = 29.5;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 2000000000;
	p1 = 1999967842;
	p2 = 9.9459736E8;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// A triangle with positive area has been positioned on the plane in such a way that all of its vertices are located at integer coordinates. The lengths of two sides of this triangle are equal to sqrt(A) and sqrt(B), where sqrt(X) denotes the square root of X. Return the maximum area this triangle can have. If there is no such triangle, return -1 instead.
// 
// DEFINITION
// Class:MaxTriangle
// Method:calculateArea
// Parameters:int, int
// Returns:double
// Method signature:double calculateArea(int A, int B)
// 
// 
// NOTES
// -The returned value must be accurate to within a relative or absolute value of 1E-9.
// 
// 
// CONSTRAINTS
// -A and B will each be between 1 and 2000000000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 1
// 1
// 
// Returns: 0.5
// 
// 1)
// 3
// 7
// 
// Returns: -1.0
// 
// 2)
// 41
// 85
// 
// Returns: 29.5
// 
// One possible triangle has vertices at (-1, 1), (6, -5) and (10, 0).
// 
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

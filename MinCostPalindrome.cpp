#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef string ST;
typedef stringstream SS;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef vector <string> vs;

#define Pf	printf
#define	Sf	scanf

#define	ep	1e-9
#define PI M_PI
#define E M_E

#define	CL(a, b)	memset(a, b, sizeof(a))
#define	mp	make_pair

#define	pb	push_back

#define	all(c)	(c).begin(), (c).end()
#define	tr(i, c)	for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())	//vector & list//

#define forn(i, n)	for(int i = 0, loop_ends_here = (int)n; i < loop_ends_here; i++)
#define forab(i, a, b)	for(int i = a, loop_ends_here = (int) b; i <= loop_ends_here; i++)
#define rep(i, a, b)	for(int i = a, loop_ends_here = (int)b; i>=loop_ends_here; i--)

class MinCostPalindrome
{
public:
	int getMinimum(string s, int oCost, int xCost)
	{
		int ret = 0, len = s.size();
		
		forn(i, len/2) {
			if(s[i] != '?' && s[len-1-i] != '?' && s[i] != s[len-1-i])
				return -1;
			else if(s[i] == s[len-1-i] && s[i] == '?')
				ret += 2*min(oCost, xCost);
			else if(s[i] == '?' || s[len-1-i] == '?')
				ret += (s[i] == 'x' || s[len-1-i] == 'x') ? xCost : oCost;
		}
		
		return ret;
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, int p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << p1 << "," << p2;
	cout << "]" << endl;
	MinCostPalindrome *obj;
	int answer;
	obj = new MinCostPalindrome();
	clock_t startTime = clock();
	answer = obj->getMinimum(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	int p1;
	int p2;
	int p3;
	
	{
	// ----- test 0 -----
	p0 = "oxo?xox?";
	p1 = 3;
	p2 = 5;
	p3 = 8;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "x?" "?x";
	p1 = 9;
	p2 = 4;
	p3 = 8;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "ooooxxxx";
	p1 = 12;
	p2 = 34;
	p3 = -1;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "oxoxooxxxxooxoxo";
	p1 = 7;
	p2 = 4;
	p3 = 0;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "?o";
	p1 = 6;
	p2 = 2;
	p3 = 6;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?";
	p1 = 50;
	p2 = 49;
	p3 = 980;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	p0 = "o?" "?oxxo?xoox?ox?" "?x?" "?";
	p1 = 3;
	p2 = 10;
	p3 = 38;
	all_right = KawigiEdit_RunTest(6, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// A palindrome is a string that reads the same from left to right as it does from right to left.
// 
// You are given a string s. The length of s is even. Each character of s is either 'o', 'x', or '?'
// Your task in this problem is to replace each occurrence of '?' in s with either 'o' or 'x' so that s becomes a palindrome.
// You are also given ints oCost and xCost.
// Replacing '?' with 'o' costs oCost, and replacing '?' with 'x' costs xCost.
// 
// Return the minimum cost of replacing '?'s by 'x's and 'o's that turns s into a palindrome. If it is impossible to obtain a palindrome, return -1 instead.
// 
// DEFINITION
// Class:MinCostPalindrome
// Method:getMinimum
// Parameters:string, int, int
// Returns:int
// Method signature:int getMinimum(string s, int oCost, int xCost)
// 
// 
// NOTES
// -You are not allowed to change an 'x' into an 'o' or vice versa.
// 
// 
// CONSTRAINTS
// -s will contain between 2 and 20 characters, inclusive.
// -The length of s will be even.
// -Each character of s will be either 'o' or 'x' or '?'.
// -oCost will be between 1 and 50, inclusive.
// -xCost will be between 1 and 50, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// "oxo?xox?"
// 3
// 5
// 
// Returns: 8
// 
// The only way to produce a palindrome is to replace s[3] with 'x' and s[7] with 'o'. The first replacement costs 5, the second costs 3, so the total cost is 3+5=8.
// 
// 1)
// "x??x"
// 9
// 4
// 
// Returns: 8
// 
// There are two ways to produce a palindrome here. The cheaper one is to change both '?'s to 'x's. This costs 4+4=8. Note that you are required to replace all '?'s.
// 
// 2)
// "ooooxxxx"
// 12
// 34
// 
// Returns: -1
// 
// There is no '?' character, and s is not a palindrome. We have no way to change it into a palindrome.
// 
// 3)
// "oxoxooxxxxooxoxo"
// 7
// 4
// 
// Returns: 0
// 
// There is no '?' character, and s is already a palindrome. Making no replacements does not cost anything.
// 
// 4)
// "?o"
// 6
// 2
// 
// Returns: 6
// 
// 
// 
// 5)
// "????????????????????"
// 50
// 49
// 
// Returns: 980
// 
// 
// 
// 6)
// "o??oxxo?xoox?ox??x??" 
// 3
// 10
// 
// Returns: 38
// 
// 
// 
// END KAWIGIEDIT TESTING




//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

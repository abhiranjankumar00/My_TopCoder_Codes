#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <cstring>
using namespace std;

typedef string ST;
typedef stringstream SS;
#define forn(i, n)	for(int i = 0; i < n; i++)
#define Valid(x, y)	(x > -1 && y > -1 && x < 9 && y < 9)

class MineField
{
public:
	vector <string> getMineField(string mine)
	{
		int X[8] = {0,  0, 1, -1, 1,  1, -1, -1};
		int Y[8] = {1, -1, 0,  0, 1, -1,  1, -1};
		vector <string> ret(9, string(9, '-'))
		int x, y;
		char ch;
		SS ss(mine);

		while(ss >> ch >> x >> ch >> y >> ch)	ret[x][y] = 'M';

		forn(i, 9)	forn(j, 9)
		{
			if(ret[i][j] == 'M')	continue;
			int cnt = 0;
			forn(k, 8)	if(Valid(i + X[k], j+Y[k]))	if(ret[i + X[k] ] [j + Y[k]] == 'M' )	++cnt;
			ret[i][j] = cnt+'0';
		}
		
		return ret;
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, vector <string> p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	MineField *obj;
	vector <string> answer;
	obj = new MineField();
	clock_t startTime = clock();
	answer = obj->getMineField(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p1.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << "\"" << p1[i] << "\"";
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << answer[i] << "\"";
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p1.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p1[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	vector <string> p1;
	
	{
	// ----- test 0 -----
	p0 = "(0,0)(1,0)(2,0)(3,0)(4,0)";
	string t1[] = {"M20000000","M30000000","M30000000","M30000000","M20000000","110000000","000000000","000000000","000000000"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "(0,0)(0,8)(8,0)(8,8)";
	string t1[] = {"M1000001M","110000011","000000000","000000000","000000000","000000000","000000000","110000011","M1000001M"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "(3,2)(3,3)(3,4)(4,2)(4,4)(5,2)(5,3)(5,4)(7,4)(6,7)";
	string t1[] = {"000000000","000000000","012321000","02MMM2000","03M8M3000","02MMM2111","0124321M1","0001M1111","000111000"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "";
	string t1[] = {"000000000","000000000","000000000","000000000","000000000","000000000","000000000","000000000","000000000"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Bob wants to program a game where a player tries to reveal all the squares on a minefield that do not contain mines.  He has created an algorithm to generate random locations for mines.  He wants to take these locations and use them to create a 9x9 board. The board needs to indicate the locations of the mines, as well as indicate how many mines border the spaces without mines.  A mine borders a space if it is horizontally, vertically, or diagonally adjacent to that space.
// 
// Write a class MineField, which contains a method getMineField. getMineField takes a string mineLocations representing the locations of mines in the 9x9 field. getMineField returns a vector <string> representing the entire board.  The ith element of the returned vector <string> corresponds to row i of the board.  Each element of the returned vector <string> should be 9 characters in length, where each character is either 'M' (symbolizing a mine) or a digit, d, between '0' and '8' inclusive (symbolizing an empty space bordering d mines.)
// 
// The String passed to the method will be in the following format (quotes added for clarity):
// "(r0,c0)(r1,c1)...(rN,cN)"
// 
// Each pair of parentheses holds the coordinates of a mine in (row, column) format.  Counting begins at 0, not 1.  Therefore, (0,0) represents the upper-left corner, and (8,8) represents the bottom-right corner.  For example, suppose Bob randomly generated the following locations:
// "(0,0)(1,0)(2,0)(3,0)(4,0)"
// 
// The board he would want to return would look like:
// 
// { "M20000000",
//   "M30000000",
//   "M30000000",
//   "M30000000",
//   "M20000000",
//   "110000000",
//   "000000000",
//   "000000000",
//   "000000000" }
// 
// 
// There are 5 mines (symbolized by "M") located straight down the first column.  Two spots on the board border 1 mine; two spots border 2 mines; and three spots border 3 mines.  All other spots on the board border no mines.
// 
// DEFINITION
// Class:MineField
// Method:getMineField
// Parameters:string
// Returns:vector <string>
// Method signature:vector <string> getMineField(string mineLocations)
// 
// 
// CONSTRAINTS
// -mineLocations will contain between 0 and 50 characters, inclusive
// -mineLocations will contain between 0 and 10 mines, inclusive
// -mineLocations will be in the format "(r0,c0)(r1,c1)...(rN,cN)" where each r# and c# is a digit between '0' and '8', inclusive
// -mineLocations will not contain duplicate locations
// 
// 
// EXAMPLES
// 
// 0)
// "(0,0)(1,0)(2,0)(3,0)(4,0)"
// 
// Returns: { "M20000000",  "M30000000",  "M30000000",  "M30000000",  "M20000000",  "110000000",  "000000000",  "000000000",  "000000000" }
// 
// This is the example from above.
// 
// 1)
// "(0,0)(0,8)(8,0)(8,8)"
// 
// Returns: { "M1000001M",  "110000011",  "000000000",  "000000000",  "000000000",  "000000000",  "000000000",  "110000011",  "M1000001M" }
// 
// There is a mine in each corner of the board.  There are twelve spots that border exactly 1 mine.  All other spots border no mines.
// 
// 2)
// "(3,2)(3,3)(3,4)(4,2)(4,4)(5,2)(5,3)(5,4)(7,4)(6,7)"
// 
// Returns: { "000000000",  "000000000",  "012321000",  "02MMM2000",  "03M8M3000",  "02MMM2111",  "0124321M1",  "0001M1111",  "000111000" }
// 
// 3)
// ""
// 
// Returns: { "000000000",  "000000000",  "000000000",  "000000000",  "000000000",  "000000000",  "000000000",  "000000000",  "000000000" }
// 
// Don't forget the empty case.
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

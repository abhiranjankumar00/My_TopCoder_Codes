#include <bits/stdc++.h>
using namespace std;

class MinimumSquare
{
public:
	long long minArea(vector <int> x, vector <int> y, int K);
};

vector <long long> x, y;
int K, N;

bool in(long long r, long long mnR, long long mxR) {
    return r > mnR && r < mxR;
}

int getMaxCover(long long side) {
    int ret = 0;
    for(int i = 0; i < (int)N; ++i) for(int j = 0; j < (int)N; ++j) {
        long long minX = x[i]-1, maxX = x[i]+side-1;
        long long minY = y[j]-1, maxY = y[j]+side-1;
        int cur = 0;
        for(int k = 0; k < (int)N; ++k) {
            if(in(x[k], minX, maxX) && in(y[k], minY, maxY)) {
                cur++;
            }
        }
        ret = max(ret, cur);
    }
    return ret;
}

long long binarySearch(long long l, long long r) {
    if(l == r)
        return l;
    long long mid = (l+r)/2;
    int cover = getMaxCover(mid);
    //printf("side = %lld, cover = %d\n", mid, cover);
    if(cover >= K)
        return binarySearch(l, mid);
    else
        return binarySearch(mid+1, r);
}

long long MinimumSquare::minArea (vector <int> _x, vector <int> _y, int _K)
{
    x.clear(); y.clear();
    N = _x.size();
    K = _K;
    for(int i = 0; i < (int)N; ++i) {
        x.push_back(_x[i]*1ll);
        y.push_back(_y[i]*1ll);
    }
	long long ret = binarySearch(1, 1e12);
	return ret*ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, int p2, bool hasAnswer, long long p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << p2;
	cout << "]" << endl;
	MinimumSquare *obj;
	long long answer;
	obj = new MinimumSquare();
	clock_t startTime = clock();
	answer = obj->minArea(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	vector <int> p0;
	vector <int> p1;
	int p2;
	long long p3;
	
	// ----- test 0 -----
	disabled = false;
	p0 = {0,3};
	p1 = {0,7};
	p2 = 2;
	p3 = 81ll;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = {-4,3,1};
	p1 = {3,-1,-2};
	p2 = 2;
	p3 = 16ll;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = {0,0,1,1,2,2};
	p1 = {0,1,0,1,0,1};
	p2 = 4;
	p3 = 9ll;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = {1000000000,1000000000,1000000000,-1000000000,-1000000000,-1000000000};
	p1 = {1000000000,0,-1000000000,1000000000,0,-1000000000};
	p2 = 3;
	p3 = 4000000008000000004ll;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = {-47881,28623,1769,-38328,-16737,16653,-23181,37360,41429,26282,254,728,8299,-41080,-29498,17488,-23937,-11,33319,25232};
	p1 = {-46462,48985,-43820,-19587,-33593,-28337,13667,-48131,-5568,-2332,-41918,-31370,-3695,42599,-37788,-40096,39049,25045,-2122,3874};
	p2 = 8;
	p3 = 1695545329ll;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// There are N points in the plane. You are given their description as two vector <int>s, x and y, with N elements each. The N points have coordinates (x[0],y[0]), (x[1],y[1]), ..., (x[N-1],y[N-1]).
// 
// You want to draw a single square onto the plane. The vertices of the square must have integer coordinates, and the sides of the square must be parallel to the coordinate axes. There is one additional constraint: at least K of the N given points must lie strictly inside the square (i.e., not on its boundary).
// 
// You are given x, y, and the int K. Return the smallest possible area of a square that satisfies the constraints above.
// 
// DEFINITION
// Class:MinimumSquare
// Method:minArea
// Parameters:vector <int>, vector <int>, int
// Returns:long long
// Method signature:long long minArea(vector <int> x, vector <int> y, int K)
// 
// 
// CONSTRAINTS
// -x will contain between 2 and 100 elements, inclusive.
// -y will contain the same number of elements as x.
// -K will be between 1 and the number of elements in x, inclusive.
// -All points will be pairwise distinct.
// -Each element of x will be between -1,000,000,000 and 1,000,000,000, inclusive.
// -Each element of y will be between -1,000,000,000 and 1,000,000,000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {0, 3}
// {0, 7}
// 2
// 
// Returns: 81
// 
// The square we seek must contain both given points. One optimal solution is the square with opposite corners at (-1,-1) and (8,8).
// 
// 1)
// {-4, 3, 1}
// {3 , -1, -2}
// 2
// 
// Returns: 16
// 
// 
// 
// 2)
// {0, 0, 1, 1, 2, 2}
// {0, 1, 0, 1, 0, 1}
// 4
// 
// Returns: 9
// 
// 
// 
// 3)
// {1000000000, 1000000000, 1000000000, -1000000000, -1000000000, -1000000000}
// {1000000000, 0, -1000000000, 1000000000, 0, -1000000000}
// 3
// 
// Returns: 4000000008000000004
// 
// In this case one of the optimal solutions is a square that contains all six points.
// 
// 4)
// {-47881, 28623, 1769, -38328, -16737, 16653, -23181, 37360, 41429, 26282, 254, 728, 8299, -41080, -29498, 17488, -23937, -11, 33319, 25232}
// {-46462, 48985, -43820, -19587, -33593, -28337, 13667, -48131, -5568, -2332, -41918, -31370, -3695, 42599, -37788, -40096, 39049, 25045, -2122, 3874}
// 8
// 
// Returns: 1695545329
// 
// 
// 
// END KAWIGIEDIT TESTING

#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef string ST;
typedef stringstream SS;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef vector <string> vs;

#define Pf	printf
#define	Sf	scanf

#define	ep	1e-9
#define PI M_PI
#define E M_E

#define	CL(a, b)	memset(a, b, sizeof(a))
#define	mp	make_pair

#define	pb	push_back

#define	all(c)	(c).begin(), (c).end()
#define	tr(i, c)	for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())	//vector & list//

#define forn(i, n)	for(int i = 0, loop_ends_here = (int)n; i < loop_ends_here; i++)
#define forab(i, a, b)	for(int i = a, loop_ends_here = (int) b; i <= loop_ends_here; i++)
#define rep(i, a, b)	for(int i = a, loop_ends_here = (int)b; i>=loop_ends_here; i--)

class MissingParentheses
{
public:
	int countCorrections(string par)
	{
		int ret = 0;
		stack <char> st;

		forn(i, par.length()) {
			if(par[i] == '(')
				st.push('(');
			else {
				if(st.empty())
					++ret;
				else
					st.pop();
			}
		}
		
		return ret + st.size();
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	MissingParentheses *obj;
	int answer;
	obj = new MissingParentheses();
	clock_t startTime = clock();
	answer = obj->countCorrections(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	int p1;
	
	{
	// ----- test 0 -----
	p0 = "(()(()";
	p1 = 2;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "()()(()";
	p1 = 1;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "(())(()())";
	p1 = 0;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "())(())((()))))()((())))()())())())()()()";
	p1 = 7;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// Given a string of parentheses, you must turn it into a well formed string by inserting as few parentheses as possible, at any position (you cannot delete or change any of the existing parentheses).
// 
// A well formed string of parentheses is defined by the following rules:
// 
//     The empty string is well formed.
//     If s is a well formed string, (s) is a well formed string.
//     If s and t are well formed strings, their concatenation st is a well formed string.
// 
// As examples, "(()())", "" and "(())()" are well formed strings and "())(", "()(" and ")" are malformed strings.
// 
// Given a string par of parentheses, return the minimum number of parentheses that need to be inserted to make it into a well formed string.
// 
// 
// DEFINITION
// Class:MissingParentheses
// Method:countCorrections
// Parameters:string
// Returns:int
// Method signature:int countCorrections(string par)
// 
// 
// CONSTRAINTS
// -par will contain between 1 and 50 characters, inclusive.
// -Each character of par will be an opening or closing parenthesis, i.e., '(' or ')'.
// 
// 
// EXAMPLES
// 
// 0)
// "(()(()"
// 
// Returns: 2
// 
// The string below is a possible well formed string you can get to by inserting the two closing parentheses marked.
// 
// (())(())
//    ^   ^
// 
// 
// 1)
// "()()(()"
// 
// Returns: 1
// 
// You can fix the string by inserting a single closing parenthesis at the end.
// 
// 2)
// "(())(()())"
// 
// Returns: 0
// 
// The input string is well formed, so no insertion is needed.
// 
// 3)
// "())(())((()))))()((())))()())())())()()()"
// 
// Returns: 7
// 
// 
// 
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

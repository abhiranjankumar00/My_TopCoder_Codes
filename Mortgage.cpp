#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef string ST;
typedef stringstream SS;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef vector <string> vs;

#define Pf	printf
#define	Sf	scanf

#define	ep	1e-9
#define PI M_PI
#define E M_E

#define	CL(a, b)	memset(a, b, sizeof(a))
#define	mp	make_pair

#define	pb	push_back

#define	all(c)	(c).begin(), (c).end()
#define	tr(i, c)	for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())	//vector & list//

#define forn(i, n)	for(int i = 0, loop_ends_here = (int)n; i < loop_ends_here; i++)
#define forab(i, a, b)	for(int i = a, loop_ends_here = (int) b; i <= loop_ends_here; i++)
#define rep(i, a, b)	for(int i = a, loop_ends_here = (int)b; i>=loop_ends_here; i--)

class Mortgage
{
	bool predicate(int64 loan, int64 period, double I, int64 payment) {
//		cout << "loan = ";
		int64 lst;
		forn(i, period) {
//			Pf("%lld -> ", loan);
			if(loan <= payment)
				return true;
			loan -= payment;
			if(loan <= 0)
				return true;
			loan = ceil(loan + loan*I);

			if(i != 0 && loan >= lst)
				return false;

			lst = loan;
		}
		return false;
	}
public:
	int monthlyPayment(int _loan, int interest, int term)
	{
		int64 loan = _loan, period = term*12;
		double I = interest / 12000.0;

		int64 low = 1, high = INT_MAX, mid;
		
//		cout << "interest = " << I << endl << endl;

		while(low < high) {
			mid = (low + high) / 2;
			
	//		Pf("\nlow = %lld, high = %lld, payment = %lld\n", low, high, mid);
			bool ans = predicate(loan, period, I, mid);
	//		Pf("\nans = %d\n", ans);
	//		cout << endl;
			if(ans)
				high = mid;
			else
				low = mid+1;
		}
		return low;
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2;
	cout << "]" << endl;
	Mortgage *obj;
	int answer;
	obj = new Mortgage();
	clock_t startTime = clock();
	answer = obj->monthlyPayment(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	int p3;
	
	{
	// ----- test 0 -----
	p0 = 1000;
	p1 = 50;
	p2 = 1;
	p3 = 86;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 2000000000;
	p1 = 6000;
	p2 = 1;
	p3 = 671844808;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 1000000;
	p1 = 1000000;
	p2 = 1000;
	p3 = 988143;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 1000000;
	p1 = 129;
	p2 = 30;
	p3 = 10868;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 1999999999;
	p1 = 1000000;
	p2 = 1;
	p3 = 1976284585;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// When purchasing a new home, the purchasers often take out a loan to pay for it.  In this problem, we will be considering loans with the following terms:
// At the beginning of each month, the purchasers pay a fixed amount towards settling the loan, which decreases the amount they owe.
// At the end of the month, the amount the purchasers owe increases due to interest.  Each month, 1/12 of the annual interest rate is added to the amount owed.  Hence, if the annual interest rate is 12%, then the debt increases by 1% each month.  You may assume that the amount owed after adding interest is always rounded up to the nearest dollar greater than or equal to the actual value.
// Your task is, given the annual interest rate in tenths of a percent, the original amount of the loan, and the period over which the loan is to be repaid, calculate the minimum integral monthly payment so that the loan is repaid in term years or less.  All monetary units are in dollars.
// 
// For example, if loan = 1000, interest = 50, and term = 1, then the loan is for $1000, to be paid back in one year, at an annual interest rate of 5%, or (5/12)% per month.  If the purchasers pay back $86 every month, then the total amount owed will be as follows after each month:
// 
// month | after making payment | after interest accrues
// ------+----------------------+------------------------------------
//  1    | 1000 - 86 = 914      | ceiling(914 * (1 + 5/12/100)) = 918
//  2    | 918 - 86  = 832      | ceiling(832 * (1 + 5/12/100)) = 836
//  3    | 836 - 86  = 750      | 754
//  4    | 754 - 86  = 668      | 671
//  5    | 671 - 86  = 585      | 588
//  6    | 588 - 86  = 502      | 505
//  7    | 505 - 86  = 419      | 421
//  8    | 421 - 86  = 335      | 337
//  9    | 337 - 86  = 251      | 253
//  10   | 253 - 86  = 167      | 168
//  11   | 168 - 86  = 82       | 83
//  12   | 86 is more than enough to pay off the rest 
// 
// Clearly, 85 a month wouldn't be enough, since we just barely paid off the loan at 86.
// 
// DEFINITION
// Class:Mortgage
// Method:monthlyPayment
// Parameters:int, int, int
// Returns:int
// Method signature:int monthlyPayment(int loan, int interest, int term)
// 
// 
// CONSTRAINTS
// -loan will be between 100 and 2,000,000,000, inclusive.
// -interest will be between 1 and 1,000,000, inclusive.
// -term will be between 1 and 1000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 1000
// 50
// 1
// 
// Returns: 86
// 
// From the problem statement.
// 
// 1)
// 2000000000
// 6000
// 1
// 
// Returns: 671844808
// 
// interest = 6000 means that the monthly interest is a whopping 50%!
// 
// 2)
// 1000000
// 1000000
// 1000
// 
// Returns: 988143
// 
// The interest is so high that even if we had 1000 years to pay back the loan, we'd still have to pay almost a million dollars a month.
// 
// 3)
// 1000000
// 129
// 30
// 
// Returns: 10868
// 
// 4)
// 1999999999
// 1000000
// 1
// 
// Returns: 1976284585
// 
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

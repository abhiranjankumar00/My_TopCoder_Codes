#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef string ST;
typedef stringstream SS;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef vector <string> vs;

#define Pf	printf
#define	Sf	scanf

#define	ep	1e-9
#define PI M_PI
#define E M_E

#define	CL(a, b)	memset(a, b, sizeof(a))
#define	mp	make_pair

#define	pb	push_back
#define	SZ(a)	int((a).size())

#define	all(c)	(c).begin(), (c).end()
#define	tr(i, c)	for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())	//vector & list//

#define	forn(i, n)	for(int i = 0; i < n; i++)
#define	forab(i, a, b)	for(int i = a; i <= b; i++)
#define	rep(i, a, b)	for(int i = a; i>=b; i--)

class NetworkXMessageRecovery
{
	string ret;
	map<char, set<char> > m;
	map<char, bool> vis;

	bool f() {
		char ch = 127;

		tr(it, m)
			if(it->second.empty() && !vis[it->first])
				ch = min(ch, it->first);
		vis[ch] = true;
		if(ch == 127)
			return false;

		ret += ch;
		tr(it, m)
			it->second.erase(ch);

		return true;
	}

public:
	string recover(vector <string> msg)
	{
		ret ="";
		vis.clear();
		m.clear();

		forn(i, msg.size())
			forn(j, msg[i].length())
				m[msg[i][j]].clear();

		forn(i, msg.size())
			forab(j, 1, msg[i].length()-1)
				m[msg[i][j]].insert(msg[i][j-1]) ;
/*
		tr(it, m) {
			cout << it->first << " : ";
			tr(jt, it->second)
				cout << *jt << " ";
			cout << endl;
		}
*/
		while(f());
		
		return ret;
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	NetworkXMessageRecovery *obj;
	string answer;
	obj = new NetworkXMessageRecovery();
	clock_t startTime = clock();
	answer = obj->recover(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	string p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"acd","bce"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "abcde";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"ed","dc","cb","ba"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "edcba";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"Fox","Ciel","FoxCiel"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "FoxCiel";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"a","A"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "Aa";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Networks are infamous for being unreliable. Data sent over the network may be lost midway or received out of order. For the purpose of this problem, however, we will assume that the data will be received in the correct order but some parts of it may be missing.
// 
// The original message is a string consisting of distinct letters (lowercase and uppercase letters are considered distinct). This message is sent multiple times, and the received messages are given in the vector <string> messages. Each element of messages will be a subsequence (not necessarily contiguous) of the original message that retains the relative ordering between letters.
// 
// 
// Your job is to return the shortest possible original message. The constraints will guarantee that at least one such message exists. If there are multiple such messages, return the lexicographically first one.
// 
// DEFINITION
// Class:NetworkXMessageRecovery
// Method:recover
// Parameters:vector <string>
// Returns:string
// Method signature:string recover(vector <string> messages)
// 
// 
// NOTES
// -The length of the answer for some cases may exceed 50 characters.
// -If two Strings A and B have the same length, then A comes before B lexicographically if it has a smaller character at the first position where the Strings differ. When comparing the characters, refer to the following list of characters in ascending order: 'A', 'B', ..., 'Z', 'a', 'b', ..., 'z'.
// 
// 
// CONSTRAINTS
// -messages will contain between 1 and 50 elements, inclusive.
// -Each element of messages will contain between 1 and 50 characters, inclusive.
// -messages will contain only the characters 'a'-'z' and 'A'-'Z'.
// -For each i, all characters in messages[i] will be distinct.
// -There will exist at least one string such that each element of messages is a subsequence of this string.
// 
// 
// EXAMPLES
// 
// 0)
// {"acd", "bce"}
// 
// Returns: "abcde"
// 
// The only possible original strings of length 5 are:
// 
// "abcde"
// "abced"
// "bacde"
// "baced"
// 
// The lexicographically smallest of them is "abcde".
// 
// 1)
// {"ed", "dc", "cb", "ba"}
// 
// Returns: "edcba"
// 
// 
// 
// 2)
// {"Fox", "Ciel", "FoxCiel"}
// 
// Returns: "FoxCiel"
// 
// 
// 
// 3)
// {"a", "A"}
// 
// Returns: "Aa"
// 
// 
// 
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

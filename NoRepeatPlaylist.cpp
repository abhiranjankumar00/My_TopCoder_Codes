#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef string ST;
typedef stringstream SS;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef vector <string> vs;

#define Pf	printf
#define	Sf	scanf

#define	ep	1e-9
#define PI M_PI
#define E M_E

#define	CL(a, b)	memset(a, b, sizeof(a))
#define	mp	make_pair

#define	pb	push_back

#define	all(c)	(c).begin(), (c).end()
#define	tr(i, c)	for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())	//vector & list//

#define forn(i, n)	for(int i = 0, loop_ends_here = (int)n; i < loop_ends_here; i++)
#define forab(i, a, b)	for(int i = a, loop_ends_here = (int) b; i <= loop_ends_here; i++)
#define rep(i, a, b)	for(int i = a, loop_ends_here = (int)b; i>=loop_ends_here; i--)

const int64 mod = 1000000007;
int64 F[111];

class NoRepeatPlaylist
{
	int M, P;

	int64 f(int N) {
		F[0] = N;
		forab(i, 1, P-1) {
			//F[i] = N - min(N - M, N - i);
			F[i] = max(N - M, N - i);
			Pf("F[%d] = %lld, N-M=%d, N-i=%d \t  ", i, F[i], N-M, N-i);
			F[i] = max(F[i], 0LL);
		}
		cout << endl;
		int64 ans = 1;
		forn(i, P)
			ans = (ans * F[i]) % mod;
		Pf("For N = %d, ans = %lld\n\n",N, ans);
		return ans;

	}

public:
	int numPlaylists(int N, int _M, int _P)
	{
		M = _M, P = _P;
		int64 ans = f(N);
		if(ans == 0)
			return 0;
		int64 t = f(N-1);
		t = (t*N)%mod;
		ans = ((ans - t + mod) % mod + mod ) %mod;
		return ans;
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2;
	cout << "]" << endl;
	NoRepeatPlaylist *obj;
	int answer;
	obj = new NoRepeatPlaylist();
	clock_t startTime = clock();
	answer = obj->numPlaylists(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	int p3;
	
	{
	// ----- test 0 -----
	p0 = 1;
	p1 = 0;
	p2 = 3;
	p3 = 1;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 1;
	p1 = 1;
	p2 = 3;
	p3 = 0;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 2;
	p1 = 0;
	p2 = 3;
	p3 = 6;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 4;
	p1 = 0;
	p2 = 4;
	p3 = 24;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 2;
	p1 = 1;
	p2 = 4;
	p3 = 2;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 50;
	p1 = 5;
	p2 = 100;
	p3 = 222288991;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Michael loves listening to music from his cell phone while travelling by train. He currently has N songs in his cell phone. During one trip he has the time to listen to P songs. So his cell phone creates a playlist of P (not necessarily different) songs according to the following rules:
// 
// Each song has to be played at least once.
// At least M songs have to be played between any two occurrences of the same song. (This ensures that the playlist is not playing the same song too often.)
// 
// Michael wonders how many different playlists his cell phone can create. You are given the ints N, M, and P. Let X be the number of valid playlists. Since X can be too large, your method must compute and return the value (X modulo 1,000,000,007).
// 
// DEFINITION
// Class:NoRepeatPlaylist
// Method:numPlaylists
// Parameters:int, int, int
// Returns:int
// Method signature:int numPlaylists(int N, int M, int P)
// 
// 
// NOTES
// -Two playlists A and B are different if for some i between 1 and P, inclusive, the i-th song in A is different from the i-th song in B.
// 
// 
// CONSTRAINTS
// -N will be between 1 and 100, inclusive.
// -M will be between 0 and N, inclusive.
// -P will be between N and 100, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 1
// 0
// 3
// 
// Returns: 1
// 
// You have only 1 song which can be played as often as you want. 
// So the only valid playlist is: {song1, song1, song1}.
// 
// 1)
// 1
// 1
// 3
// 
// Returns: 0
// 
// Now is the same scenario as in Example 0, but the song cannot be played 2 times in a row. 
// Thus there is no valid playlist.
// 
// 2)
// 2
// 0
// 3
// 
// Returns: 6
// 
// Now you have 2 songs and you can play them as often as you want. 
// Just remember that playlists {song1, song1, song1} and {song2, song2, song2} are not valid, because each song must be played at least once.
// 
// 3)
// 4
// 0
// 4
// 
// Returns: 24
// 
// You have time to play each song exactly once. So there are 4! possible playlists.
// 
// 4)
// 2
// 1
// 4
// 
// Returns: 2
// 
// The only two possibilities are {song1, song2, song1, song2} and {song2, song1, song2, song1}.
// 
// 5)
// 50
// 5
// 100
// 
// Returns: 222288991
// 
// 
// 
// END KAWIGIEDIT TESTING




//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

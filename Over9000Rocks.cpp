#include <iostream>
#include <ctime>
#include <vector>
#include <list>
#include <queue>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <cassert>
#include <utility>
#include <sstream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <climits>
#include <iterator>
#include <fstream>
using namespace std;

typedef long long 		int64;
typedef vector<int> 		vi;
typedef string 			ST;
typedef stringstream 		SS;
typedef vector< vector<int> > 	vvi;
typedef pair<int,int> 		ii;
typedef vector<string> 		vs;
/*
#if __cplusplus > 199711L	// for g++0x, value of __cplusplus must be greater thana 199711L.
	#define tr(i, c)	for(auto i = begin(c); i != end(c); i++)
#else
	#define tr(i, c)	for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#endif
*/
#define endl		("\n")
#define tr(i, c)	for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define PI		M_PI
#define E 		M_E
#define	eps		1e-9

#define	Sf		scanf
#define	Pf		printf

#define forn(i, n)	for(int i = 0, lets_stop_here = (int)n; i <  lets_stop_here; i++)
#define forab(i, a, b)	for(int i = a, lets_stop_here = (int)b; i <= lets_stop_here; i++)
#define rep(i, a, b)	for(int i = a, lets_stop_here = (int)b; i >= lets_stop_here; i--)

#define	all(c)		(c).begin(), (c).end()
#define	CL(a, b)	memset(a, b, sizeof(a))
#define mp		make_pair
#define pb		push_back

#define	present(x, c)	((c).find(x) != (c).end())	//map & set//
#define	cpresent(x, c)	(find( (c).begin(), (c).end(), x) != (c).end())	//vector & list//

#define read(n)		scanf("%d", &n)
#define write(n)	printf("%d ", n)
#define writeln(n)	printf("%d\n", n)

#if (0 or defined ONLINE_JUDGE)
	#define DEBUG
#else 
	#define DEBUG(x)	cout << #x << " = " << x << "\n"
#endif

class Over9000Rocks
{
public:
	int countPossibilities(vector <int> lowerBound, vector <int> upperBound);
};

int Over9000Rocks::countPossibilities (vector <int> lowerBound, vector <int> upperBound) 
{
	int N = lowerBound.size();
	vector < pair <int, int> > v;
	bool in[N];

	for(int st = 0; st < (1<<N); st++) {
		CL(in, 0);
		int l = 0, h = 0;
		for(int i = 0; i < N; i++) if( (st & (1<<i)) != 0) {
			l += lowerBound[i], h += upperBound[i];
		}
		if(h > 9000)
			l = max(9001, l);
		if(l > 9000)
			v.pb(mp(l, h));
	}
	sort(all(v));
	tr(it, v)
		Pf("[%d, %d], ", it->first, it->second);
	cout << endl;

	vector < pair <int, int> > ans;
	tr(it, v) {
		if(ans.empty())
			ans.pb(*it);
		else if(it->first <= ans.back().second)
			ans.back().second = max(ans.back().second, it->second);
		else
			ans.pb(*it);
	}
	tr(it, ans)
		Pf("[%d, %d], ", it->first, it->second);
	cout << endl;

	int ret = 0;

	tr(it, ans)
		ret += it->second - it->first + 1;
	

	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	Over9000Rocks *obj;
	int answer;
	obj = new Over9000Rocks();
	clock_t startTime = clock();
	answer = obj->countPossibilities(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <int> p1;
	int p2;
	
	{
	// ----- test 0 -----
	int t0[] = {9000};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {9001};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 1;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {9000,1,10};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {9000,2,20};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 15;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {1001,2001,3001,3001};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1003,2003,3003,3003};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 9;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {9000,90000,1,10};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {9000,90000,3,15};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 38;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {1,1,1,1,1,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {3,4,5,6,7,8};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 0;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	int t0[] = {9001,9004};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {9010,9006};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(5, p0, p1, false, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// You used to have only 30 rocks, but now you have plenty of them. In fact, we will assume that you have a potentially infinite supply of rocks. You would like to show that you own over 9000 rocks.
// You have a set of boxes. You will choose a subset of those boxes and fill them with rocks so that the total number of rocks will be over 9000. Each box has a lower and an upper bound on the number of rocks it may contain.
// 
// You are given the vector <int>s lowerBound and upperBound. For each i, the values lowerBound[i] and upperBound[i] have the following meaning: If you decide to use box i, the number of rocks you may put inside the box must be between lowerBound[i] and upperBound[i], inclusive.
// 
// X is a positive integer that has two properties:
// 
// X is over 9000.
// It is possible to select some of the boxes and fill them with appropriate numbers of rocks in such a way that the total number of rocks used is exactly X.
// 
// Compute and return the number of possible values of X.
// 
// DEFINITION
// Class:Over9000Rocks
// Method:countPossibilities
// Parameters:vector <int>, vector <int>
// Returns:int
// Method signature:int countPossibilities(vector <int> lowerBound, vector <int> upperBound)
// 
// 
// CONSTRAINTS
// -lowerBound will contain between 1 and 15, elements, inclusive.
// -upperBound will contain the same number of elements as lowerBound.
// -Each element of lowerBound will be between 1 and 1,000,000 (10^6), inclusive.
// -Each element i of upperBound will be between lowerBound[i] and 1,000,000 (10^6), inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {9000}
// {9001}
// 
// Returns: 1
// 
// You can place 9000 or 9001 rocks in the single box. Of the allowed values, only 9001 is over 9000.
// 
// 1)
// {9000, 1, 10}
// {9000, 2, 20}
// 
// Returns: 15
// 
// You have to choose box 0 and at least one other box, otherwise you have no chance of placing over 9000 rocks.
// If you only choose boxes 0 and 1, you can place 9001 or 9002 rocks.
// If you only choose boxes 0 and 2, you can place between 9010 and 9020 rocks, inclusive.
// If you choose all three boxes, you can place between 9011 and 9022 rocks, inclusive.
// Hence all possible values of X are 9001, 9002, and everything from 9010 to 9022, inclusive.
// 
// 2)
// {1001, 2001, 3001, 3001}
// {1003, 2003, 3003, 3003}
// 
// Returns: 9
// 
// 
// 
// 3)
// {9000,90000,1,10}
// {9000,90000,3,15}
// 
// Returns: 38
// 
// 
// 
// 4)
// {1,1,1,1,1,1}
// {3,4,5,6,7,8}
// 
// Returns: 0
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

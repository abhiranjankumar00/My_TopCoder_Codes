#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef string ST;
typedef stringstream SS;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef vector <string> vs;

#define Pf	printf
#define	Sf	scanf

#define	ep	1e-9
#define PI M_PI
#define E M_E

#define	CL(a, b)	memset(a, b, sizeof(a))
#define	mp	make_pair

#define	pb	push_back

#define	all(c)	(c).begin(), (c).end()
#define	tr(i, c)	for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())	//vector & list//

#define forn(i, n)	for(int i = 0, loop_ends_here = (int)n; i < loop_ends_here; i++)
#define forab(i, a, b)	for(int i = a, loop_ends_here = (int) b; i <= loop_ends_here; i++)
#define rep(i, a, b)	for(int i = a, loop_ends_here = (int)b; i>=loop_ends_here; i--)

class Over9000Rocks
{
public:
	int countPossibilities(vector <int> lo, vector <int> hi)
	{
		vector <ii> p;

		forab(i, 1, (1<<lo.size())-1) {
			int mn = 0, mx = 0;
			forab(j, 0, lo.size() - 1) {
				if( (i & (1 << j)) != 0) {
					mn += lo[j];
					mx += hi[j];
				}
			}

			if(mn > 9000)
				p.pb(mp(mn, mx));
			else if(mx > 9000)
				p.pb(mp(9001, mx));
//			cout << mn << endl << mx << endl << endl;
		}

		if(p.size() == 0)
			return 0;

		sort(all(p));

		tr(it, p)
			cout << it->first << " " << it->second << endl;
		cout << endl;

		vector <ii> pp;
		pp.pb(p[0]);

		forab(i, 1, p.size() - 1) {
			if(pp[pp.size() - 1].second >= p[i].first) {
				pp[pp.size() - 1].second = max(p[i].second, pp[pp.size() - 1].second);
			}
			else
				pp.pb(p[i]);
		}

		tr(it, pp)
			cout << it->first << " " << it->second << endl;

		int ret = 0;

		tr(it, pp)
			ret += it->second - it->first + 1;
		
		return ret;
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	Over9000Rocks *obj;
	int answer;
	obj = new Over9000Rocks();
	clock_t startTime = clock();
	answer = obj->countPossibilities(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <int> p1;
	int p2;
	
	{
	// ----- test 0 -----
	int t0[] = {9000};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {9001};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 1;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {9000,1,10};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {9000,2,20};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 15;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {1001,2001,3001,3001};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1003,2003,3003,3003};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 9;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {9000,90000,1,10};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {9000,90000,3,15};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 38;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {1,1,1,1,1,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {3,4,5,6,7,8};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 0;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	int t0[] = {9001,9004};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {9010,9006};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(5, p0, p1, false, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// You used to have only 30 rocks, but now you have plenty of them. In fact, we will assume that you have a potentially infinite supply of rocks. You would like to show that you own over 9000 rocks.
// You have a set of boxes. You will choose a subset of those boxes and fill them with rocks so that the total number of rocks will be over 9000. Each box has a lower and an upper bound on the number of rocks it may contain.
// 
// You are given the vector <int>s lowerBound and upperBound. For each i, the values lowerBound[i] and upperBound[i] have the following meaning: If you decide to use box i, the number of rocks you may put inside the box must be between lowerBound[i] and upperBound[i], inclusive.
// 
// X is a positive integer that has two properties:
// 
// X is over 9000.
// It is possible to select some of the boxes and fill them with appropriate numbers of rocks in such a way that the total number of rocks used is exactly X.
// 
// Compute and return the number of possible values of X.
// 
// DEFINITION
// Class:Over9000Rocks
// Method:countPossibilities
// Parameters:vector <int>, vector <int>
// Returns:int
// Method signature:int countPossibilities(vector <int> lowerBound, vector <int> upperBound)
// 
// 
// CONSTRAINTS
// -lowerBound will contain between 1 and 15, elements, inclusive.
// -upperBound will contain the same number of elements as lowerBound.
// -Each element of lowerBound will be between 1 and 1,000,000 (10^6), inclusive.
// -Each element i of upperBound will be between lowerBound[i] and 1,000,000 (10^6), inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {9000}
// {9001}
// 
// Returns: 1
// 
// You can place 9000 or 9001 rocks in the single box. Of the allowed values, only 9001 is over 9000.
// 
// 1)
// {9000, 1, 10}
// {9000, 2, 20}
// 
// Returns: 15
// 
// You have to choose box 0 and at least one other box, otherwise you have no chance of placing over 9000 rocks.
// If you only choose boxes 0 and 1, you can place 9001 or 9002 rocks.
// If you only choose boxes 0 and 2, you can place between 9010 and 9020 rocks, inclusive.
// If you choose all three boxes, you can place between 9011 and 9022 rocks, inclusive.
// Hence all possible values of X are 9001, 9002, and everything from 9010 to 9022, inclusive.
// 
// 2)
// {1001, 2001, 3001, 3001}
// {1003, 2003, 3003, 3003}
// 
// Returns: 9
// 
// 
// 
// 3)
// {9000,90000,1,10}
// {9000,90000,3,15}
// 
// Returns: 38
// 
// 
// 
// 4)
// {1,1,1,1,1,1}
// {3,4,5,6,7,8}
// 
// Returns: 0
// 
// 
// 
// END KAWIGIEDIT TESTING




//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

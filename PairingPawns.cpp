#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef string ST;
typedef stringstream SS;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef vector <string> vs;

#define Pf	printf
#define	Sf	scanf

#define	ep	1e-9
#define PI M_PI
#define E M_E

#define	CL(a, b)	memset(a, b, sizeof(a))
#define	mp	make_pair

#define	pb	push_back

#define	all(c)	(c).begin(), (c).end()
#define	tr(i, c)	for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())	//vector & list//

#define forn(i, n)	for(int i = 0, loop_ends_here = (int)n; i < loop_ends_here; i++)
#define forab(i, a, b)	for(int i = a, loop_ends_here = (int) b; i <= loop_ends_here; i++)
#define rep(i, a, b)	for(int i = a, loop_ends_here = (int)b; i>=loop_ends_here; i--)

class PairingPawns
{
public:
	int savedPawnCount(vector <int> start)
	{
		rep(i, start.size() - 1, 1)
			start[i-1] += start[i]/2;
		
		return start[0];
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	PairingPawns *obj;
	int answer;
	obj = new PairingPawns();
	clock_t startTime = clock();
	answer = obj->savedPawnCount(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	int p1;
	
	{
	// ----- test 0 -----
	int t0[] = {0,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {10,3};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 11;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {0,0,0,8};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {0,1,1,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123456};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	int t0[] = {1000,2000,3000,4000,5000,6000,7000,8000};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3921;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// "Pairing pawns" is a game played on a strip of paper, divided into N cells. The cells are labeled 0 through N-1. Each cell may contain an arbitrary number of pawns.
// 
// 
// You are given a vector <int> start with N elements. For each i, element i of start is the initial number of pawns on cell i.
// 
// 
// The goal of the game is to bring as many pawns as possible to cell 0.
// 
// 
// The only valid move looks as follows:
// 
// 
// Find a pair of pawns that share the same cell X (other than cell 0).
// Remove the pair of pawns from cell X.
// Add a single new pawn into the cell X-1.
// 
// 
// You may make as many moves as you wish, in any order.
// 
// 
// Return the maximum number of pawns that can be in cell 0 at the end of the game.
// 
// 
// DEFINITION
// Class:PairingPawns
// Method:savedPawnCount
// Parameters:vector <int>
// Returns:int
// Method signature:int savedPawnCount(vector <int> start)
// 
// 
// NOTES
// -You may assume that the answer will always fit into an int.
// -Note that you are only given the vector <int> start. The number of cells N can be determined as the length of start.
// 
// 
// CONSTRAINTS
// -start will contain between 1 and 20 elements, inclusive.
// -Each element of start will be between 0 and 1,000,000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {0,2}
// 
// Returns: 1
// 
// There are two pawns on cell 1. You can remove them both and place a pawn onto cell 0.
// 
// 1)
// {10,3}
// 
// Returns: 11
// 
// There are 10 pawns already on cell 0. You can add another one by removing two pawns from cell 1. Note that at the end of the game cell 1 will still contain one pawn that cannot be used anymore.
// 
// 2)
// {0,0,0,8}
// 
// Returns: 1
// 
// After 7 moves you can get a single pawn to cell 0. The rest of the board will be empty.
// 
// 3)
// {0,1,1,2}
// 
// Returns: 1
// 
// Again, a single pawn can reach the leftmost cell.
// 
// 4)
// {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123456}
// 
// Returns: 0
// 
// That's a lot of pawns! But they are too far away. In this case it is impossible for a pawn to reach cell 0.
// 
// 5)
// {1000,2000,3000,4000,5000,6000,7000,8000}
// 
// Returns: 3921
// 
// 
// 
// END KAWIGIEDIT TESTING




//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

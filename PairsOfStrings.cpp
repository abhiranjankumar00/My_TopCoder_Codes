#include <bits/stdc++.h>
using namespace std;

class PairsOfStrings
{
public:
	int getNumber(int n, int k);
};

int PairsOfStrings::getNumber (int n, int k)
{
	int ret;
	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	PairsOfStrings *obj;
	int answer;
	obj = new PairsOfStrings();
	clock_t startTime = clock();
	answer = obj->getNumber(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	int p0;
	int p1;
	int p2;
	
	// ----- test 0 -----
	disabled = false;
	p0 = 2;
	p1 = 2;
	p2 = 6;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = 3;
	p1 = 2;
	p2 = 20;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = 3;
	p1 = 4;
	p2 = 184;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = 6;
	p1 = 2;
	p2 = 348;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = 100;
	p1 = 26;
	p2 = 46519912;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// We are interested in pairs of strings (A, B) that satisfy the following conditions: 
// 
// A and B consist of exactly n characters each. 
// Each character in A and B is one of the first k lowercase letters of the English alphabet. 
// There exists a string C such that A + C = C + B. Here, + denotes string concatenation. 
// 
// For example, if n = 3 and k = 4 then one valid pair of strings is ("aad", "daa"): 
// both strings have length 3, only the first 4 letters are used in each of them, and C = "aa" shows that the third condition is satisfied as well. 
// 
// You are given the ints n and k. 
// Find the number of such pairs of strings, and return the number modulo 1,000,000,007. 
// 
// 
// DEFINITION
// Class:PairsOfStrings
// Method:getNumber
// Parameters:int, int
// Returns:int
// Method signature:int getNumber(int n, int k)
// 
// 
// CONSTRAINTS
// -n will be between 1 and 1,000,000,000, inclusive. 
// -k will be between 1 and 26, inclusive. 
// 
// 
// EXAMPLES
// 
// 0)
// 2
// 2
// 
// Returns: 6
// 
// The following 6 pairs satisfy the conditions: 
// ("aa", "aa"), ("ab", "ab"), ("ab", "ba"), ("ba", "ab"), ("ba", "ba"), ("bb", "bb"). 
// 
// 1)
// 3
// 2
// 
// Returns: 20
// 
// 
// 
// 2)
// 3
// 4
// 
// Returns: 184
// 
// 
// 
// 3)
// 6
// 2
// 
// Returns: 348
// 
// 
// 
// 4)
// 100
// 26
// 
// Returns: 46519912
// 
// 
// 
// END KAWIGIEDIT TESTING

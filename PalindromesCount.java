import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class PalindromesCount
{
	public int count(String A, String B)
	{
		int ans = 0;
		String t , tt;

		for(int i = 0; i<=A.length(); i++)
		{
			t = A.substring(0, i) + B + A.substring(i, A.length());	
			tt = new StringBuffer(t).reverse().toString();
			if(t.equals(tt))
				ans++;
		}

		return ans;
		
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String p0, String p1, boolean hasAnswer, int p2) {
		System.out.print("Test " + testNum + ": [" + "\"" + p0 + "\"" + "," + "\"" + p1 + "\"");
		System.out.println("]");
		PalindromesCount obj;
		int answer;
		obj = new PalindromesCount();
		long startTime = System.currentTimeMillis();
		answer = obj.count(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p2);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p2;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String p0;
		String p1;
		int p2;
		
		// ----- test 0 -----
		p0 = "aba";
		p1 = "b";
		p2 = 2;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = "aa";
		p1 = "a";
		p2 = 3;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = "aca";
		p1 = "bb";
		p2 = 0;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = "abba";
		p1 = "abba";
		p2 = 3;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = "topcoder";
		p1 = "coder";
		p2 = 0;
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// A palindrome is a string that is the same whether it is read from left to right or from right to left. Little Dazdraperma likes 
	// palindromes a lot. As a birthday gift she received two strings A and B. Now she is curious if there is a 
	// way to insert string B into string A so that the resulting string is a palindrome. You agreed to help her and 
	// even tell how many different variants of such insertions exist. Two variants are considered different if 
	// string B is inserted in different places. Return the number of possible insertion variants.
	// 
	// 
	// For example, let A="aba" and  B="b". You can insert B in 4 different places:
	// Before the first letter of A. The result is "baba" and it is not a palindrome.
	// After the first letter 'a'. The result is "abba" and it is a palindrome.
	// After the letter 'b'. The result is "abba" and it is also a palindrome.
	// After the second letter 'a'. The result is "abab" and it is not a palindrome.
	// 
	// So, the answer for this example is 2.
	// 
	// DEFINITION
	// Class:PalindromesCount
	// Method:count
	// Parameters:String, String
	// Returns:int
	// Method signature:int count(String A, String B)
	// 
	// 
	// CONSTRAINTS
	// -A and B will each contain between 1 and 50 characters, inclusive.
	// -Each character of A and B will be a lowercase letter ('a'-'z').
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// "aba"
	// "b"
	// 
	// Returns: 2
	// 
	// The example from the problem statement.
	// 
	// 1)
	// "aa"
	// "a"
	// 
	// Returns: 3
	// 
	// Here every possible insertion point gives you a palindrome.
	// 
	// 2)
	// "aca"
	// "bb"
	// 
	// Returns: 0
	// 
	// No possible solutions.
	// 
	// 3)
	// "abba"
	// "abba"
	// 
	// Returns: 3
	// 
	// 4)
	// "topcoder"
	// "coder"
	// 
	// Returns: 0
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

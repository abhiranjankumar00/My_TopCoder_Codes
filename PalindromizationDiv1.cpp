#include <iostream>
#include <ctime>
#include <vector>
#include <list>
#include <queue>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <cassert>
#include <utility>
#include <sstream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <climits>
#include <iterator>
#include <fstream>
using namespace std;

typedef long long 		int64;
typedef vector<int> 		vi;
typedef string 			ST;
typedef stringstream 		SS;
typedef vector< vector<int> > 	vvi;
typedef pair<int,int> 		ii;
typedef vector<string> 		vs;
/*
#if __cplusplus > 199711L	// for g++0x, value of __cplusplus must be greater thana 199711L.
	#define tr(i, c)	for(auto i = begin(c); i != end(c); i++)
#else
	#define tr(i, c)	for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#endif
*/
#define endl		("\n")
#define tr(i, c)	for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define PI		M_PI
#define E 		M_E
#define	eps		1e-9

#define	Sf		scanf
#define	Pf		printf

#define forn(i, n)	for(int i = 0, lets_stop_here = (int)n; i <  lets_stop_here; i++)
#define forab(i, a, b)	for(int i = a, lets_stop_here = (int)b; i <= lets_stop_here; i++)
#define rep(i, a, b)	for(int i = a, lets_stop_here = (int)b; i >= lets_stop_here; i--)

#define	all(c)		(c).begin(), (c).end()
#define	CL(a, b)	memset(a, b, sizeof(a))
#define mp		make_pair
#define pb		push_back

#define	present(x, c)	((c).find(x) != (c).end())	//map & set//
#define	cpresent(x, c)	(find( (c).begin(), (c).end(), x) != (c).end())	//vector & list//

#define read(n)		scanf("%d", &n)
#define write(n)	printf("%d ", n)
#define writeln(n)	printf("%d\n", n)

#if (0 or defined ONLINE_JUDGE)
	#define DEBUG
#else 
	#define DEBUG(x)	cout << #x << " = " << x << "\n"
#endif

class PalindromizationDiv1
{
public:
	int getMinimumCost(string word, vector <string> operations);
};

int64 add[30], del[30], repl[30][30];
int64 Ans[55][55];

string word;
int64 solve(int l, int r) {
	if(l == r)
		return 0;
	if(l > r)
		return 0;
//		return 1e12;

	int64 &ret = Ans[l][r];
	if(ret != -1)
		return ret;

	int cl = word[l] - 'a', cr = word[r] - 'a';

	ret = 1e12;
	ret = min(ret, del[cl] + solve(l+1, r));
	ret = min(ret, solve(l, r-1) + del[cr]);

	forn(c, 30) {
		ret = min(ret, repl[cl][c] + solve(l+1, r-1) + repl[cr][c]);
		ret = min(ret, add[c] + solve(l, r-1) + repl[cr][c]);
		ret = min(ret, repl[cl][c] + solve(l+1, r) + add[c]);
	}
	return ret;
}

int PalindromizationDiv1::getMinimumCost (string _word, vector <string> operations) 
{
	word = _word;
	forn(i, 30) {
		forn(j, 30)
			repl[i][j] = 1e12;
		add[i] = del[i] = 1e12;
	}
	forn(i, 55)	forn(j, 55)
		Ans[i][j] = -1;

	tr(it, operations) {
		SS ss(*it);
		string op;
		ss >> op;
		if(op == "add") {
			int x ;
			char ch;
			ss >> ch >> x;
			add[ch-'a'] = x;
		}
		else if(op == "erase") {
			int x;
			char ch;
			ss >> ch >> x;
			del[ch-'a'] = x;
		}
		else if(op == "change") {
			int x;
			char c1, c2;
			ss >> c1 >> c2 >> x;
			repl[c1-'a'][c2-'a'] = x;
		}
		else
			assert(0);
	}

	forn(i, 30)
		repl[i][i] = 0;
	forn(k, 30)	forn(i, 30)	forn(j, 30)
		repl[i][j] = min(repl[i][j], repl[i][k] + repl[k][j]);

	forn(i, 30)	forn(j, 30) {
		add[i] = min(add[i], add[j] + repl[j][i]);
		del[i] = min(del[i], repl[i][j] + del[j]);
	}

	int64 ret = solve(0, word.size()-1);

	if(ret > 1e11)
		ret = -1;
	
	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, vector <string> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	PalindromizationDiv1 *obj;
	int answer;
	obj = new PalindromizationDiv1();
	clock_t startTime = clock();
	answer = obj->getMinimumCost(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	vector <string> p1;
	int p2;
	
	{
	// ----- test 0 -----
	p0 = "racecar";
	p1.clear() /*{}*/;
	p2 = 0;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "topcoder";
	string t1[] = {"erase t 1","erase o 1","erase p 1","erase c 1","erase d 1","erase e 1","erase r 1"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 5;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "topcoder";
	string t1[] = {"erase t 10","erase o 1","erase p 1","erase c 1","erase d 1","erase e 1","erase r 1"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 7;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "caaaaaab";
	string t1[] = {"change b a 100000","change c a 100000","change c d 50000","change b e 50000","erase d 50000","erase e 49999"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 199999;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "moon";
	string t1[] = {"erase o 5","add u 7","change d p 3","change m s 12","change n d 6","change s l 1"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = -1;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Little Arthur loves palindromes. A palindrome is a word that reads the same both forwards and backwards. For example, the words "racecar", "noon", and "w" are palindromes, but the words "computer", "moon", and "oh" are not.
// 
// Arthur is given a word word and he would like to transform it into a palindrome. There are three types of operations he can perform:
// 
// 
// add a letter at any position in the word (possibly at the beginning or end);
// erase a letter;
// change one letter to another.
// 
// 
// However, each operation can be performed only with certain letters. For example, Arthur could be allowed to erase 'a', add 'b', and change 'c' to 'd'; no other operation would be allowed. Furthermore, nothing in this world is for free and operations with letters is not an exception - each operation Arthur can perform has a certain cost.
// 
// The descriptions of the allowed operations and their costs are given as vector <string> operations. Each element of operations is in one of the following forms (all quotes for clarity):
// 
// "add c x" where c is a letter and x is a positive integer meaning that it is allowed to add a letter c and it costs x dollars;
// "erase c x" where c is a letter and x is a positive integer meaning that it is allowed to erase letter c and it costs x dollars;
// "change c1 c2 x" where c1 and c2 are letters and x is a positive integer meaning that it is allowed to change letter c1 to c2 and it costs x dollars.
// 
// Note that "change c1 c2 x" does not allow to change letter c2 to c1.
// 
// Little Arthur would like to transform word into a palindrome spending the least amount of money. Given word and operations return the minimum number of dollars Arthur needs to create a palindrome. Return -1 if it is impossible.
// 
// DEFINITION
// Class:PalindromizationDiv1
// Method:getMinimumCost
// Parameters:string, vector <string>
// Returns:int
// Method signature:int getMinimumCost(string word, vector <string> operations)
// 
// 
// CONSTRAINTS
// -word will contain between 1 and 50 characters, inclusive.
// -Each character in word will be a lowercase letter 'a'-'z'.
// -operations will contain between 0 and 50 elements, inclusive.
// -Each element of operations will be exactly in the form "add c x", "erase c x", or "change c1 c2 x" (quotes for clarity) where c, c1, c2 are single lowercase letters 'a'-'z' and x is an integer between 1 and 100000, inclusive, with no leading zeros.
// -In each operation in form "change c1 c2 x", c1 and c2 will be different. 
// -All elements of operations will represent different operations, i.e., all elements of operations without the cost part ("add c", "erase c", or "change c1 c2") will be distinct.
// 
// 
// EXAMPLES
// 
// 0)
// "racecar"
// {}
// 
// Returns: 0
// 
// No operations are allowed but the given word is already a palindrome.
// 
// 1)
// "topcoder"
// {"erase t 1", "erase o 1", "erase p 1", "erase c 1", "erase d 1", "erase e 1", "erase r 1"}
// 
// Returns: 5
// 
// Here it is allowed to erase any letter present in word and the cost of each such operation is 1 dollar. Thus, Arthur would like to obtain the longest possible palindrome. Two possible variants to erase only 5 letters result in palindromes "opo" and "oco".
// 
// 2)
// "topcoder"
// {"erase t 10", "erase o 1", "erase p 1", "erase c 1", "erase d 1", "erase e 1", "erase r 1"}
// 
// Returns: 7
// 
// The same situation as previously except erasing letter 't' now costs 10. Because of that it is no longer optimal to obtain the longest possible palindrome.
// 
// 3)
// "caaaaaab"
// {"change b a 100000", "change c a 100000", "change c d 50000", "change b e 50000", "erase d 50000", "erase e 49999"}
// 
// Returns: 199999
// 
// One way to palindromize "caaaaaab" is to change letters 'c' and 'b' to 'a's right away obtaining "aaaaaaaa". This would cost 200000.
// 
// However, a slightly cheaper way is to perform the following sequence of operations:
// 
// 
// "caaaaaab" - change 'c' to 'd' (costs 50000)
// "daaaaaab" - change 'b' to 'e' (costs 50000)
// "daaaaaae" - erase 'd' (costs 50000)
// "aaaaaae" - erase 'e' (costs 49999)
// "aaaaaa"
// 
// This palindromization will cost 199999 in total. 
// 
// 4)
// "moon"
// {"erase o 5", "add u 7", "change d p 3", "change m s 12", "change n d 6", "change s l 1"}
// 
// Returns: -1
// 
// Many words can be constructed here (e.g., "moon", "mood", "mud", "soon", "sun", "loop"), however, no palindrome is obtainable.
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

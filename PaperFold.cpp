#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
using namespace std;

#define ep 1e-9

class PaperFold
{
	double bw, bh;

	int Fold(double pw, double ph, int d = 0)
	{
		if(d > 8)	return 10;

		if( (pw - bw <= ep && ph - bh <= ep) || (ph - bw <= ep && pw - bh <= ep) )	return d;

		return min(Fold(pw/2.0, ph, d+1), Fold(pw, ph/2.0,d+1) );
	}
public:
	int numFolds(vector <int> paper, vector <int> box)
	{
		double pw = paper[0], ph = paper[1];
		bw = box[0], bh = box[1];

		int ret = Fold(pw, ph, 0);

		if(ret == 10)	return -1;
		
		return ret;
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	PaperFold *obj;
	int answer;
	obj = new PaperFold();
	clock_t startTime = clock();
	answer = obj->numFolds(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <int> p1;
	int p2;
	
	{
	// ----- test 0 -----
	int t0[] = {8,11};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {6,10};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 1;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {11,17};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {6,4};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 4;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {11,17};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {5,4};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 4;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {1000,1000};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {62,63};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = -1;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {100,30};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {60,110};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 0;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	int t0[] = {1895,6416};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {401,1000};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 5;
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// You have a piece of paper that you need to fold to fit into a box with a given width and length.  Each time you fold the paper, you can fold it in half across either its width or length, but you can only fold the paper 8 times (after 8 times, the paper is too dense to fold again).
// 
// 
// 
// You will be given a vector <int> paper, which contains the width and length of the paper in inches, and a vector <int> box, which contains the width and length of the box in inches.  In both cases, the first element is the width and the second element is the length.  Your method should return the fewest number of folds which would allow you to fit the paper into the box.  You can rotate the paper 90 degrees if it will fit with fewer folds, but the paper must lie completely flat inside the box.  If the paper cannot be fit into the box with 8 folds or fewer, return -1.
// 
// 
// DEFINITION
// Class:PaperFold
// Method:numFolds
// Parameters:vector <int>, vector <int>
// Returns:int
// Method signature:int numFolds(vector <int> paper, vector <int> box)
// 
// 
// NOTES
// -After the paper is folded, it is possible that it has fractional dimensions.
// -The paper will fit into the box even if one or both of the dimensions are exactly the same as the corresponding box dimensions.
// 
// 
// CONSTRAINTS
// -paper will contain exactly two elements.
// -box will contain exactly two elements.
// -Each element of paper and box will be between 1 and 10000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {8, 11}
// {6, 10}
// 
// Returns: 1
// 
// By folding the paper so that the length is reduced from 11 to 5.5 inches, it will fit inside the box if you rotate it 90 degrees.
// 
// 1)
// {11, 17}
// {6, 4}
// 
// Returns: 4
// 
// 
// There are two ways to fold the paper so that it fits within the box.
// 
// 
// 
// First, you could fold the width in half to get 5.5 inches, and then fold the length in half three times to get 2.125 inches.
// 
// 
// 
// Second, you could fold the width in half twice to get 2.25 inches, and then fold the length in half twice to get 4.25 inches.  In this case, you must also rotate 90 degrees to fit the paper in.
// 
// 
// 2)
// {11, 17}
// {5, 4}
// 
// Returns: 4
// 
// Now, you must use the second method to get it to fit:  Fold the width and length each twice, and rotate 90 degrees.  If you try fitting without rotating, it would take 5 folds.
// 
// 3)
// {1000,1000}
// {62,63}
// 
// Returns: -1
// 
// Folding in each direction 4 times, you can get the paper down to 62.5 x 62.5.  However, this will not fit into the box because neither dimension fits in 62.
// 
// 4)
// {100,30}
// {60,110}
// 
// Returns: 0
// 
// 5)
// {1895, 6416}
// {401, 1000}
// 
// Returns: 5
// 
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef string ST;
typedef stringstream SS;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef vector <string> vs;

#define Pf	printf
#define	Sf	scanf

#define	ep	1e-9
#define PI M_PI
#define E M_E

#define	CL(a, b)	memset(a, b, sizeof(a))
#define	mp	make_pair

#define	pb	push_back

#define	all(c)	(c).begin(), (c).end()
#define	tr(i, c)	for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())	//vector & list//

#define forn(i, n)	for(int i = 0, loop_ends_here = (int)n; i < loop_ends_here; i++)
#define forab(i, a, b)	for(int i = a, loop_ends_here = (int) b; i <= loop_ends_here; i++)
#define rep(i, a, b)	for(int i = a, loop_ends_here = (int)b; i>=loop_ends_here; i--)

#define read(n)		scanf("%d", &n)
#define write(n)	printf("%d ", n)
#define writeln(n)	printf("%d\n", n)

class PascalCount
{
public:
	int howMany(int i, int d);
};

int cnt(int n, int c) {
	int ret =0;
	while(n % c == 0)
		n/=c,	ret++;
	return ret;
}

int PascalCount::howMany (int n, int d) 
{
	int c2 = 0, c3 = 0, c5 = 0;
	int ret = 0;
	
	forab(r, 1, n-1) {
		c2 += cnt(n-r+1, 2);
		c2 -= cnt(r, 2);
		
		c3 += cnt(n-r+1, 3);
		c3 -= cnt(r, 3);
		
		c5 += cnt(n-r+1, 5);
		c5 -= cnt(r, 5);
		
		if(d == 2 && c2 > 0)	ret++;
		if(d == 3 && c3 > 0)	ret++;
		if(d == 4 && c2 > 1)	ret++;
		if(d == 5 && c5 > 0)	ret++;
		if(d == 6 && c2 > 0 && c3 > 0)	ret++;
	}
	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	PascalCount *obj;
	int answer;
	obj = new PascalCount();
	clock_t startTime = clock();
	answer = obj->howMany(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	p0 = 3;
	p1 = 3;
	p2 = 2;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 3;
	p1 = 4;
	p2 = 0;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 4;
	p1 = 2;
	p2 = 3;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 4;
	p1 = 6;
	p2 = 1;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 0;
	p1 = 3;
	p2 = 0;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// The top few rows of Pascal's triangle are drawn below: 
//                  1
//                1   1
//              1   2   1
//            1   3   3   1
//          1   4   6   4   1
// The leftmost and rightmost values of a particular row are always 1.  An inner value v can be found by adding together the 2 numbers found immediately above v, on its right and left sides.  For example, the 6 in the above figure is the sum of the two 3s above it.  Return the number of values in row i of Pascal's triangle that are evenly divisible by d.  The rows are 0-based, so row 3 contains 1,3,3,1.
// 
// DEFINITION
// Class:PascalCount
// Method:howMany
// Parameters:int, int
// Returns:int
// Method signature:int howMany(int i, int d)
// 
// 
// NOTES
// -The jth element (0-based) of row i can be computed by the formula:    	  i!    ---------------      j! * (i-j)!  where k! = 1*2*...*k and 0! = 1.
// 
// 
// CONSTRAINTS
// -i will be between 0 and 5000000 inclusive.
// -d will be between 2 and 6 inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 3
// 3
// 
// Returns: 2
// 
// Row 3 is 1,3,3,1 so there are 2 elements divisible by 3.
// 
// 1)
// 3
// 4
// 
// Returns: 0
// 
// Row 3 has no elements that are divisible by 4.
// 
// 2)
// 4
// 2
// 
// Returns: 3
// 
// 1,4,6,4,1 has 3 elements divisible by 2.
// 
// 3)
// 4
// 6
// 
// Returns: 1
// 
// Row 4 has a single element divisible by 6.
// 
// 4)
// 0
// 3
// 
// Returns: 0
// 
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

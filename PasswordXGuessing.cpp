#include <iostream>
#include <ctime>
#include <vector>
#include <list>
#include <queue>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <cassert>
#include <utility>
#include <sstream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <climits>
#include <iterator>
#include <fstream>
using namespace std;

typedef long long 		int64;
typedef vector<int> 		vi;
typedef string 			ST;
typedef stringstream 		SS;
typedef vector< vector<int> > 	vvi;
typedef pair<int,int> 		ii;
typedef vector<string> 		vs;
/*
#if __cplusplus > 199711L	// for g++0x, value of __cplusplus must be greater thana 199711L.
	#define tr(i, c)	for(auto i = begin(c); i != end(c); i++)
#else
	#define tr(i, c)	for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#endif
*/
#define endl		("\n")
#define tr(i, c)	for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define PI		M_PI
#define E 		M_E
#define	eps		1e-9

#define	Sf		scanf
#define	Pf		printf

#define forn(i, n)	for(int i = 0, lets_stop_here = (int)n; i <  lets_stop_here; i++)
#define forab(i, a, b)	for(int i = a, lets_stop_here = (int)b; i <= lets_stop_here; i++)
#define rep(i, a, b)	for(int i = a, lets_stop_here = (int)b; i >= lets_stop_here; i--)

#define	all(c)		(c).begin(), (c).end()
#define	CL(a, b)	memset(a, b, sizeof(a))
#define mp		make_pair
#define pb		push_back

#define	present(x, c)	((c).find(x) != (c).end())	//map & set//
#define	cpresent(x, c)	(find( (c).begin(), (c).end(), x) != (c).end())	//vector & list//

#define read(n)		scanf("%d", &n)
#define write(n)	printf("%d ", n)
#define writeln(n)	printf("%d\n", n)

#if (0 or defined ONLINE_JUDGE)
	#define DEBUG
#else 
	#define DEBUG(x)	cout << #x << " = " << x << "\n"
#endif

class PasswordXGuessing
{
public:
	long long howMany(vector <string> guesses);
};

long long PasswordXGuessing::howMany (vector <string> guess) 
{
	long long ret = 0;

	forn(i, guess[0].size()) {
		forn(j, 10)	if(guess[0][i] != j + '0') {
			string cur = guess[0];
			cur[i] = j + '0';

			bool flag = true;
			forab(k, 1, guess.size()-1) {
				int diff = 0;
				forn(l, cur.size())
					if(cur[l] != guess[k][l])
						diff++;
				if(diff != 1)
					flag = false;
			}
			if(flag)
				ret++;
		}
	}
	
	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, long long p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	PasswordXGuessing *obj;
	long long answer;
	obj = new PasswordXGuessing();
	clock_t startTime = clock();
	answer = obj->howMany(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	long long p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"58","47"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2ll;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"539","540","541"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1ll;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"12","34","56","78"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0ll;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"2","3","5"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 7ll;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"4747","4747","4747","4747"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 36ll;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Ms. Ciel loves rabbits. She has a large special cage for her rabbits. The special cage is protected by a secret password consisting of exactly X digits. Each digit of her password is one of '0'-'9'. (It is possible that the password starts with a '0'.)
// 
// There are N friends who want to guess the password. Each friend make a guess consisting of exactly X digits. This is given in vector <string> guesses that contains N elements, where guesses[i] is the guess of the i-th friend. The friends are so lucky that after they make their guesses, Ms. Ciel tells them that each person guessed the password correctly, except for exactly one digit.
// 
// You are given the vector <string> guesses. Return the number of different passwords that have the above property (i.e., differ from each element of guesses in exactly one digit). Note that it is possible that no such password exists. In such case, return 0.
// 
// DEFINITION
// Class:PasswordXGuessing
// Method:howMany
// Parameters:vector <string>
// Returns:long long
// Method signature:long long howMany(vector <string> guesses)
// 
// 
// NOTES
// -The result is guaranteed to fit in a 64-bit signed integer data type.
// 
// 
// CONSTRAINTS
// -guesses will contain between 1 and 50 elements, inclusive.
// -Each element of guesses will contain between 1 and 50 characters, inclusive.
// -All elements of guesses will contain the same number of characters.
// -Each character of each element of guesses will be one of '0'-'9'.
// 
// 
// EXAMPLES
// 
// 0)
// {"58", "47"}
// 
// Returns: 2
// 
// The two possible passwords are "57" and "48".
// 
// 1)
// {"539", "540", "541"}
// 
// Returns: 1
// 
// The only possible password is "549".
// 
// 2)
// {"12", "34", "56", "78"}
// 
// Returns: 0
// 
// There is no possible password. Ms. Ciel must have forgotten her own password.
// 
// 3)
// {"2", "3", "5"}
// 
// Returns: 7
// 
// 
// 
// 4)
// {"4747", "4747", "4747", "4747"}
// 
// Returns: 36
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

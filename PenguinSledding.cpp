#include <bits/stdc++.h>
using namespace std;

class PenguinSledding
{
public:
	long long countDesigns(int numCheckpoints, vector <int> checkpoint1, vector <int> checkpoint2);
};

long long PenguinSledding::countDesigns (int cntCp, vector <int> cp1, vector <int> cp2) 
{
	int N = cp1.size();
	for(int i = 0; i < N; ++i) {
		cp1[i]--;cp2[i]--;
	}
	long long ret=1+N;
	vector <vector<int> > G(cntCp);
	for(int i = 0; i < N; ++i) {
		G[cp1[i]].push_back(cp2[i]);
		G[cp2[i]].push_back(cp1[i]);
	}
	for(int i = 0; i < cntCp; ++i) if(G[i].size()>=2) {
		ret += (1ll<<G[i].size()) - G[i].size()-1;
	}
	vector <vector<int> > g(cntCp, vector <int> (cntCp, 0));
	for(int i = 0; i < N; ++i) {
		g[cp1[i]][cp2[i]]=g[cp2[i]][cp1[i]]=1;
	}
	for(int i = 0; i < cntCp; ++i) {
		for(int j = i+1; j <= cntCp-1; ++j) {
			for(int k = j+1; k <= cntCp-1; ++k) {
				if(g[i][j] && g[j][k] && g[k][i]) {
					ret++;
				}
			}
		}
	}
	
	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, vector <int> p1, vector <int> p2, bool hasAnswer, long long p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}";
	cout << "]" << endl;
	PenguinSledding *obj;
	long long answer;
	obj = new PenguinSledding();
	clock_t startTime = clock();
	answer = obj->countDesigns(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	vector <int> p1;
	vector <int> p2;
	long long p3;
	
	{
	// ----- test 0 -----
	p0 = 2;
	int t1[] = {1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {2};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 2ll;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 4;
	int t1[] = {1,2,3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {2,3,4};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 6ll;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 6;
	int t1[] = {1,3,6};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {2,4,4};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 5ll;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 50;
	int t1[] = {40,40,40,40,40,40,40,40,40,40,40,40,50,40,40,40,23,4,24,40,22,40,8,40,40,40,34,21,40,40,38,40,40,40,40,40,28,40,40,40,40,46,13,40,40,40,47,40,40};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {45,42,20,48,12,32,25,10,26,39,16,2,19,43,37,17,19,19,19,18,19,27,19,29,11,36,19,19,1,41,19,35,14,33,49,3,19,7,5,19,31,19,19,6,9,15,19,44,30};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 68719493118ll;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 36;
	int t1[] = {13,24,24,20,31,16,10,36,34,32,28,5,20,29,23,2,14,4,9,5,19,21,8,1,26,27,25,15,22,30,30,6,11,7,2,35,13,29,4,12,33,18,13,14,17,35,3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {10,15,27,1,29,11,5,18,33,1,9,2,31,6,19,10,33,18,6,27,3,22,4,12,31,30,34,16,7,24,3,28,15,21,22,8,26,20,14,32,25,17,35,8,36,26,23};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 162ll;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// Percy is a penguin in charge of the greatest penguin pastime, penguin sledding. It is Percy's job to help design the sledding course. Percy is a very careful penguin and would like to set up the course in a way that no two sledding paths cross. 
// 
// 
// 
// The sledding course contains some significant locations called checkpoints, and some sledding paths.
// The checkpoints are numbered 1 through numCheckpoints, inclusive.
// Each sledding path is a straight line segment that connects two distinct checkpoints.
// The checkpoints are distinct, and no three of them lie on the same line.
// (Therefore, no checkpoint will ever lie on a sledding path.)
// 
// 
// 
// When designing the course, Percy specifies some pairs of checkpoints that will be connected by sledding paths.
// Accidents happen when two sledding paths cross, so such designs should be avoided.
// Unfortunately, Percy does not know the precise locations of all checkpoints.
// Therefore, Percy's design must not allow two sledding paths to cross, regardless of the locations of the checkpoints.
// Percy calls a design safe if he is sure that no two sledding paths will cross.
// 
// 
// 
// 
// 
// 
// 
// Percy just found an old design that may be unsafe.
// He would like to change it to a safe design by removing zero or more sledding paths from the original design.
// Count all different safe designs he may obtain from the old design in this way.
// Two designs are considered different if there is a pair of checkpoints that is connected by a sledding path in one design and disconnected in the other.
// 
// 
// 
// You are given the int numCheckpoints representing the number of checkpoints in the old design.
// You are also given two vector <int>s checkpoint1 and checkpoint2 that describe the sledding paths in the old design:
// For each i, there is a sledding path connecting the checkpoints checkpoint1[i] and checkpoint2[i].
// Return the number of safe designs that can be made from the old design.
// 
// 
// DEFINITION
// Class:PenguinSledding
// Method:countDesigns
// Parameters:int, vector <int>, vector <int>
// Returns:long long
// Method signature:long long countDesigns(int numCheckpoints, vector <int> checkpoint1, vector <int> checkpoint2)
// 
// 
// CONSTRAINTS
// -numCheckpoints will be between 2 and 50, inclusive.
// -checkpoint1 will contain between 1 and 50 elements, inclusive.
// -checkpoint1 and checkpoint2 will contain the same number of elements.
// -Each element of checkpoint1 will be between 1 and numCheckpoints, inclusive.
// -Each element of checkpoint2 will be between 1 and numCheckpoints, inclusive.
// -Each pair of checkpoints will be connected by at most one sledding path.
// -For each i, element i of checkpoint1 will not be equal to element i of checkpoint2.
// 
// 
// EXAMPLES
// 
// 0)
// 2
// {1}
// {2}
// 
// Returns: 2
// 
// There is only one sledding path. Both including it and removing it are safe designs.
// 
// 1)
// 4
// {1,2,3}
// {2,3,4}
// 
// Returns: 6
// 
// Either sledding path (1,2) or (3,4) needs to be removed to form a safe design. If neither of these is removed the design is unsafe.
// 
// 2)
// 6
// {1,3,6}
// {2,4,4}
// 
// Returns: 5
// 
// Note that some of the checkpoints may be isolated.
// 
// 3)
// 50
// {40, 40, 40, 40, 40, 40, 40, 40, 
//  40, 40, 40, 40, 50, 40, 40, 40, 
//  23, 4, 24, 40, 22, 40, 8, 40, 40,
//  40, 34, 21, 40, 40, 38, 40, 40, 
//  40, 40, 40, 28, 40, 40, 40, 40, 
//  46, 13, 40, 40, 40, 47, 40, 40}
// {45, 42, 20, 48, 12, 32, 25, 10, 
//  26, 39, 16, 2, 19, 43, 37, 17, 
//  19, 19, 19, 18, 19, 27, 19, 29, 
//  11, 36, 19, 19, 1, 41, 19, 35, 
//  14, 33, 49, 3, 19, 7, 5, 19, 31, 
//  19, 19, 6, 9, 15, 19, 44, 30}
// 
// Returns: 68719493118
// 
// 
// 
// 4)
// 36
// {13, 24, 24, 20, 31, 16, 10, 36, 34, 32, 
//  28, 5, 20, 29, 23, 2, 14, 4, 9, 5, 19, 
//  21, 8, 1, 26, 27, 25, 15, 22, 30, 30, 
//  6, 11, 7, 2, 35, 13, 29, 4, 12, 33, 18, 
//  13, 14, 17, 35, 3}
// {10, 15, 27, 1, 29, 11, 5, 18, 33, 1, 9,
//  2, 31, 6, 19, 10, 33, 18, 6, 27, 3, 22,
//  4, 12, 31, 30, 34, 16, 7, 24, 3, 28, 15,
//  21, 22, 8, 26, 20, 14, 32, 25, 17, 35,
//  8, 36, 26, 23}
// 
// Returns: 162
// 
// 
// 
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

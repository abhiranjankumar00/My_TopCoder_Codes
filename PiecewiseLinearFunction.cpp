#include <iostream>
#include <ctime>
#include <vector>
#include <list>
#include <queue>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <cassert>
#include <utility>
#include <sstream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <climits>
#include <iterator>
#include <fstream>
using namespace std;

typedef long long 		int64;
typedef vector<int> 		vi;
typedef string 			ST;
typedef stringstream 		SS;
typedef vector< vector<int> > 	vvi;
typedef pair<int,int> 		ii;
typedef vector<string> 		vs;
/*
#if __cplusplus > 199711L	// for g++0x, value of __cplusplus must be greater thana 199711L.
	#define tr(i, c)	for(auto i = begin(c); i != end(c); i++)
#else
	#define tr(i, c)	for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#endif
*/
#define endl		("\n")
#define tr(i, c)	for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define PI		M_PI
#define E 		M_E
#define	eps		1e-9

#define	Sf		scanf
#define	Pf		printf

#define forn(i, n)	for(int i = 0, lets_stop_here = (int)n; i <  lets_stop_here; i++)
#define forab(i, a, b)	for(int i = a, lets_stop_here = (int)b; i <= lets_stop_here; i++)
#define rep(i, a, b)	for(int i = a, lets_stop_here = (int)b; i >= lets_stop_here; i--)

#define	all(c)		(c).begin(), (c).end()
#define	cl(a, b)	memset(a, b, sizeof(a))
#define mp		make_pair
#define pb		push_back

#define	present(x, c)	((c).find(x) != (c).end())	//map & set//
#define	cpresent(x, c)	(find( (c).begin(), (c).end(), x) != (c).end())	//vector & list//

#define read(n)		scanf("%d", &n)
#define write(n)	printf("%d ", n)
#define writeln(n)	printf("%d\n", n)

//#define debug(x)
#define debug(x)	cout << #x << " = " << x << "\n"

class PiecewiseLinearFunction
{
public:
	int maximumSolutions(vector <int> Y);
};

int cntOccurance(int pt, const vector <int> &pts) {
	int ret = 0, N = pts.size();
	for(int i = 0; i < N; ++i) {
		if(pts[i] ==pt)
			++ret;
		else if(i > 0 && pt > min(pts[i], pts[i-1]) && pt < max(pts[i], pts[i-1])) {
			++ret;
		}
	}
	return ret;
}

int PiecewiseLinearFunction::maximumSolutions (vector <int> Y) 
{
	int N = Y.size();
	for(int i = 1; i <= N-1; ++i) {
		if(Y[i] == Y[i-1])
			return -1;
	}
	for(auto it = (Y).begin(); it != (Y).end(); ++it) {
		*it*=2;
	}
	int ret = 0;
	for(int i = 0; i < N; ++i) {
		int tmp = cntOccurance(Y[i], Y);
//		printf("y = %d, cnt = %d\n", Y[i], tmp);
		ret = max(ret, tmp);
	}

	for(int i = 0; i < N; ++i) {
		for(int j = 0; j < N; ++j) {
			int p = Y[i]/2 + Y[j]/2;
			int tmp = cntOccurance(p, Y);
			ret = max(ret, tmp);
		}
	}
	
	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	PiecewiseLinearFunction *obj;
	int answer;
	obj = new PiecewiseLinearFunction();
	clock_t startTime = clock();
	answer = obj->maximumSolutions(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	int p1;
	
	{
	// ----- test 0 -----
	int t0[] = {3,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {4,4};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = -1;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {1,4,-1,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {2,1,2,1,3,2,3,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 5;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {125612666,-991004227,0,6,88023,-1000000000,1000000000,-1000000000,1000000000};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 6;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// F is a function that is defined on all real numbers from the closed interval [1,N].
// You are given a vector <int> Y with N elements.
// For each i (1 <= i <= N) we have F(i) = Y[i-1].
// Additionally, you know that F is piecewise linear: for each i, on the interval [i,i+1] F is a linear function.
// The function F is uniquely determined by this information.
// For example, if F(4)=1 and F(5)=6 then we must have F(4.7)=4.5.
// 
// As another example, this is the plot of the function F for Y = {1, 4, -1, 2}.
// 
// 
// 
// Given a real number y, we can count the number of solutions to the equation F(x)=y.
// For example, for the function plotted above there are 0 solutions for y=7, there is 1 solution for y=4, and there are 3 solutions for y=1.1.
// We are looking for the largest number of solutions such an equation can have.
// For the function plotted above the answer would be 3: there is no y such that F(x)=y has more than 3 solutions.
// 
// If there is an y such that the equation F(x)=y has infinitely many solutions, return -1.
// Otherwise, return the maximum possible number of solutions such an equation may have.
// 
// 
// DEFINITION
// Class:PiecewiseLinearFunction
// Method:maximumSolutions
// Parameters:vector <int>
// Returns:int
// Method signature:int maximumSolutions(vector <int> Y)
// 
// 
// CONSTRAINTS
// -Y will contain between 2 and 50 elements, inclusive.
// -Each element of Y will be between -1,000,000,000 and 1,000,000,000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {3, 2}
// 
// Returns: 1
// 
// The graph of this function is a line segment between (1, 3) and (2, 2). For any y such that 2 ≤ y ≤ 3 the equation F(x)=y has 1 solution, and for any other y it has 0 solutions.
// 
// 1)
// {4, 4}
// 
// Returns: -1
// 
// The function's plot is a horizontal line segment between points (1, 4) and (2, 4). For y=4, F(x)=y has infinitely many solutions.
// 
// 2)
// {1, 4, -1, 2}
// 
// Returns: 3
// 
// This is the example from the problem statement. Three solutions are obtained for any value of y between 1 and 2, inclusive:
// 
// 
// 
// 3)
// {2, 1, 2, 1, 3, 2, 3, 2}
// 
// Returns: 5
// 
// 
// 
// 4)
// {125612666, -991004227, 0, 6, 88023, -1000000000, 1000000000, -1000000000, 1000000000}
// 
// Returns: 6
// 
// 
// 
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

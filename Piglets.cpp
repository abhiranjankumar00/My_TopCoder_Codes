#include <iostream>
#include <ctime>
#include <vector>
#include <list>
#include <queue>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <cassert>
#include <utility>
#include <sstream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <climits>
#include <iterator>
#include <fstream>
using namespace std;

typedef long long 		int64;
typedef vector<int> 		vi;
typedef string 			ST;
typedef stringstream 		SS;
typedef vector< vector<int> > 	vvi;
typedef pair<int,int> 		ii;
typedef vector<string> 		vs;
/*
#if __cplusplus > 199711L	// for g++0x, value of __cplusplus must be greater thana 199711L.
	#define tr(i, c)	for(auto i = begin(c); i != end(c); i++)
#else
	#define tr(i, c)	for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#endif
*/
#define endl		("\n")
#define tr(i, c)	for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define PI		M_PI
#define E 		M_E
#define	eps		1e-9

#define	Sf		scanf
#define	Pf		printf

#define forn(i, n)	for(int i = 0, lets_stop_here = (int)n; i <  lets_stop_here; i++)
#define forab(i, a, b)	for(int i = a, lets_stop_here = (int)b; i <= lets_stop_here; i++)
#define rep(i, a, b)	for(int i = a, lets_stop_here = (int)b; i >= lets_stop_here; i--)

#define	all(c)		(c).begin(), (c).end()
#define	CL(a, b)	memset(a, b, sizeof(a))
#define mp		make_pair
#define pb		push_back

#define	present(x, c)	((c).find(x) != (c).end())	//map & set//
#define	cpresent(x, c)	(find( (c).begin(), (c).end(), x) != (c).end())	//vector & list//

#define read(n)		scanf("%d", &n)
#define write(n)	printf("%d ", n)
#define writeln(n)	printf("%d\n", n)

#if (0)
	#define debug 
#else 
	#define debug(x)	cout << #x << " = " << x << "\n"
#endif

class Piglets
{
public:
	int choose(string trough);
};

int Piglets::choose (string trough) 
{
	int N = trough.size();
	if(trough[0] == '-')
		return 0;
	if(trough.at(N-1) == '-')
		return N-1;
	if(count(all(trough), 'p') == N)
		return -1;

	int id = 0;
	int cnt = 0;
	vi wait(N, -1);

	while( id < N) {
		if(trough[id] == 'p') {
			id++;
			continue;
		}
		int r = id+1;
		while(r < N && trough[r] == '-')
			r++;
		id = r;
	}
	tr(it, wait)
		write(*it);
	cout << endl;
	return trough.find('-');
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	Piglets *obj;
	int answer;
	obj = new Piglets();
	clock_t startTime = clock();
	answer = obj->choose(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	int p1;
	
	{
	// ----- test 0 -----
	p0 = "--p--";
	p1 = 0;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "p-p-p";
	p1 = 1;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "p--p";
	p1 = 1;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "p---p";
	p1 = 2;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "ppp";
	p1 = -1;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = "p----p";
	p1 = 3;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// 
// It's feeding time in the pig pen, where a trough is divided into n
// stalls to accommodate n piglets. The rude piglets immediately rush to
// the trough and distribute themselves arbitrarily among the stalls. After
// them come the fastidious piglets one at a time, at one-minute intervals.
// 
// 
// 
// A fastidious piglet doesn't want to feed in just any stall, since he
// doesn't like to be sandwiched between two piglets. As the trough
// fills up, however, a piglet who hasn't managed to occupy an end stall will
// eventually have a neighbor on each side. It is the fastidious
// piglet's goal to delay this sandwiching as long as possible.
// Among multiple stalls that afford the same delay, he prefers
// the leftmost. He makes his selection in the knowledge that all subsequent piglets
// arriving at the trough will choose a stall according to the same criteria.
// 
// 
// 
// Given a string describing a trough configuration such that '-'
// represents an empty stall and 'p' represents an occupied stall, return the
// zero-based index of the stall chosen by the next piglet. Return -1 if every
// stall is occupied.
// 
// 
// 
// 
// DEFINITION
// Class:Piglets
// Method:choose
// Parameters:string
// Returns:int
// Method signature:int choose(string trough)
// 
// 
// NOTES
// -A fastidious piglet will take a stall at the very end of the trough if possible, preferring the left end to the right end.
// -All currently empty stalls will eventually be occupied by fastidious piglets.
// 
// 
// CONSTRAINTS
// -trough contains between 1 and 15 characters, inclusive.
// -Each character in trough is either '-' or 'p'.
// 
// 
// EXAMPLES
// 
// 0)
// "--p--"
// 
// Returns: 0
// 
// An end stall lets the piglet avoid sandwiching altogether.
// 
// 1)
// "p-p-p"
// 
// Returns: 1
// 
// The piglet is forced to choose a stall that is already sandwiched. As always in the case of a tie, he prefers the leftmost.
// 
// 2)
// "p--p"
// 
// Returns: 1
// 
// Whichever stall the next piglet chooses, he will be sandwiched by the piglet who follows one minute later.
// 
// 3)
// "p---p"
// 
// Returns: 2
// 
// If the piglet takes stall 1, he will be sandwiched in one minute. Stalls 2 and 3 allow him a two-minute delay.
// 
// 4)
// "ppp"
// 
// Returns: -1
// 
// 5)
// "p----p"
// 
// Returns: 3
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

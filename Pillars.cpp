#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
#include <iterator>
#include <fstream>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef string ST;
typedef stringstream SS;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef vector <string> vs;

#define DEBUG(x)	cout << #x << " = " << x << "\n"
#define endl 		("\n")

#define	ep		1e-9
#define PI		M_PI
#define E 		M_E

#define	CL(a, b)	memset(a, b, sizeof(a))
#define	mp		make_pair
#define	pb		push_back

#define	all(c)		(c).begin(), (c).end()
#define	tr(i, c)	for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())		//vector & list//

#define forn(i, n)	for(int i = 0, loop_ends_here = (int)n; i < loop_ends_here ; i++)
#define forab(i, a, b)	for(int i = a, loop_ends_here = (int)b; i <= loop_ends_here; i++)
#define rep(i, a, b)	for(int i = a, loop_ends_here = (int)b; i >= loop_ends_here; i--)

#define Pf		printf
#define	Sf		scanf

#define read(n)		scanf("%d", &n)
#define write(n)	printf("%d ", n)
#define writeln(n)	printf("%d\n", n)

/*
#ifdef DEBUG
	#undef DEBUG
#endif
#define DEBUG
*/

class Pillars
{
public:
	double getExpectedLength(int w, int x, int y);
};

const int sz = 1e5 + 111;
double sum[sz], d[sz];

void init(int w) {
	forn(i, sz) {
		d[i] = sqrt(w*w + (i*1.0)*i);
		sum[i] = d[i] + (i == 0 ? 0 : sum[i-1]);
	}
}

double Sum(int l, int r) {
	return sum[r] - (l == 0 ? 0 : sum[l-1]);
}

double Pillars::getExpectedLength (int w, int x, int y) 
{
	init(w);
	double ret = 0;

	forab(a, 1, x) {
		if(y <= a)
			ret += Sum(a-y, a-1);
		else
			ret += Sum(0, a-1) + Sum(1, y-a);
	}
	
	DEBUG(ret);
	ret /= x;
	ret /= y;
	DEBUG(ret);
	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, bool hasAnswer, double p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2;
	cout << "]" << endl;
	Pillars *obj;
	double answer;
	obj = new Pillars();
	clock_t startTime = clock();
	answer = obj->getExpectedLength(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == answer && fabs(p3 - answer) <= 1e-9 * max(1.0, fabs(p3));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	double p3;
	
	{
	// ----- test 0 -----
	p0 = 1;
	p1 = 1;
	p2 = 1;
	p3 = 1.0;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 1;
	p1 = 5;
	p2 = 1;
	p3 = 2.387132965131785;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 2;
	p1 = 3;
	p2 = 15;
	p3 = 6.737191281760445;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 10;
	p1 = 15;
	p2 = 23;
	p3 = 12.988608956320535;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 1000;
	p1 = 100000;
	p2 = 100000;
	p3 = 33381.38304701605;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// On a horizontal line, there are two vertical pillars.
// The distance between their bottoms is w.
// The height of the first pillar is an integer, chosen uniformly at random in the range 1 through x, inclusive.
// The height of the second pillar is an integer, chosen uniformly at random in the range 1 through y, inclusive.
// The tops of both pillars will be connected by a straight piece of rope.
// 
// You are given the ints w, x, and y.
// Compute and return the expected length of the rope.
// 
// DEFINITION
// Class:Pillars
// Method:getExpectedLength
// Parameters:int, int, int
// Returns:double
// Method signature:double getExpectedLength(int w, int x, int y)
// 
// 
// NOTES
// -Your return value must have a relative or an absolute error of less than 1e-9.
// -In this task, the expected rope length can be computed as the average rope length over all possible cases.
// 
// 
// CONSTRAINTS
// -w will be between 1 and 1000, inclusive.
// -x will be between 1 and 100,000, inclusive.
// -y will be between 1 and 100,000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 1
// 1
// 1
// 
// Returns: 1.0
// 
// The rope always has a length of 1.
// 
// 1)
// 1
// 5
// 1
// 
// Returns: 2.387132965131785
// 
// There are 5 possible (equiprobable) cases in which the length of the rope is 1, sqrt(2), sqrt(5), sqrt(10) and sqrt(17). The correct answer is the arithmetic average of these 5 numbers.
// 
// 2)
// 2
// 3
// 15
// 
// Returns: 6.737191281760445
// 
// 
// 
// 3)
// 10
// 15
// 23
// 
// Returns: 12.988608956320535
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

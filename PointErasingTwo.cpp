#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef string ST;
typedef stringstream SS;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef vector <string> vs;

#define Pf	printf
#define	Sf	scanf

#define	ep	1e-9
#define PI M_PI
#define E M_E

#define	CL(a, b)	memset(a, b, sizeof(a))
#define	mp	make_pair

#define	pb	push_back

#define	all(c)	(c).begin(), (c).end()
#define	tr(i, c)	for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())	//vector & list//

#define forn(i, n)	for(int i = 0, loop_ends_here = (int)n; i < loop_ends_here; i++)
#define forab(i, a, b)	for(int i = a, loop_ends_here = (int) b; i <= loop_ends_here; i++)
#define rep(i, a, b)	for(int i = a, loop_ends_here = (int)b; i>=loop_ends_here; i--)

class PointErasingTwo
{
public:
	bool inside (int x1, int x2, int y1, int y2, int x, int y) {
		int xleft = min(x1, x2), xright = max(x1, x2);
		int ytop = max(y1, y2),  ybot = min(y1, y2);

		return (x < xright && x > xleft && y < ytop && y > ybot);
	}
	int getMaximum(vector <int> y)
	{
		int ret = 0;
		int n = y.size();

		forn(i, n)	forab(j, i+1, n-1)	if(y[i] ^ y[j]) {
			int tmp = 0;
			forn(k, n)	
				tmp += inside(i, j, y[i], y[j], k, y[k]);
			ret = max(ret, tmp);
		}

		
		return ret;
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	PointErasingTwo *obj;
	int answer;
	obj = new PointErasingTwo();
	clock_t startTime = clock();
	answer = obj->getMaximum(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	int p1;
	
	{
	// ----- test 0 -----
	int t0[] = {1,2,1,1,0,4,3};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {0,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {0,1,2,3,4};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {10,19,10,19};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {0,23,49,50,32,0,18,50,0,28,50,27,49,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 5;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// You are given a vector <int> y of length N. 
// The values in y describe N points in the plane: 
// for each x = 0, 1, ..., N - 1 there is a point at coordinates (x, y[x]). 
// 
// Krolik is going to perform the following operation: 
// 
// 	Choose two of the given points, say A and B, with different y-coordinates. 
// 	Consider the rectangle with sides parallel to coordinate axes and points A and B in two opposite corners. 
// 	Erase all points strictly inside the rectangle. 
// 
// Return the maximum possible number of points Krolik can erase by a single operation. 
// 
// 
// DEFINITION
// Class:PointErasingTwo
// Method:getMaximum
// Parameters:vector <int>
// Returns:int
// Method signature:int getMaximum(vector <int> y)
// 
// 
// NOTES
// -A point is strictly inside a rectangle if it is inside the rectangle and does not lie on the border of the rectangle. 
// 
// 
// CONSTRAINTS
// -y will contain between 2 and 50 elements, inclusive. 
// -Each element of y will be between 0 and 50, inclusive. 
// -y will contain at least 2 distinct elements. 
// 
// 
// EXAMPLES
// 
// 0)
// { 1, 2, 1, 1, 0, 4, 3 }
// 
// Returns: 2
// 
// If Krolik chooses A = (1, 2) and B = (4, 0), Krolik can erase two points: (2, 1) and (3, 1).
// 
// 
// 
// 
// 1)
// { 0, 1 }
// 
// Returns: 0
// 
// 2)
// { 0, 1, 2, 3, 4 }
// 
// Returns: 3
// 
// 3)
// { 10, 19, 10, 19 }
// 
// Returns: 0
// 
// 
// 
// 4)
// { 0, 23, 49, 50, 32, 0, 18, 50, 0, 28, 50, 27, 49, 0 }
// 
// Returns: 5
// 
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

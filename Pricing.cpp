#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef string ST;
typedef stringstream SS;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef vector <string> vs;

#define Pf	printf
#define	Sf	scanf

#define	ep	1e-9
#define PI M_PI
#define E M_E

#define	CL(a, b)	memset(a, b, sizeof(a))
#define	mp	make_pair

#define	pb	push_back

#define	all(c)	(c).begin(), (c).end()
#define	tr(i, c)	for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())	//vector & list//

#define forn(i, n)	for(int i = 0, loop_ends_here = (int)n; i < loop_ends_here; i++)
#define forab(i, a, b)	for(int i = a, loop_ends_here = (int) b; i <= loop_ends_here; i++)
#define rep(i, a, b)	for(int i = a, loop_ends_here = (int)b; i>=loop_ends_here; i--)

vi price;
int len;
int ans;

class Pricing
{
public:
	int maxSales(vector <int> _price)
	{
		price = _price;
		len = price.size();
		sort(all(price));
/*
 * .. len, price, ans
 * f idx groupLeft	= 0					idx == n
 * 			= sum(a[i])	i = [idx..n-1]		groupLeft <= (n-1-idx)
*/		

/*
		int ret = 0, len = price.size();
		
		if(price.size() <= 4)
			return accumulate(all(price), 0);
		sort(all(price));
		reverse(all(price));

		forn(i, price.size())
			Pf("price[%d] = %4d\n",i, price[i]);
		cout << endl;

		forab(a, 0, len-1) {
			forab(b, a+1, len-1) {
				forab(c, b+1, len-1) {
					forab(d, c+1, len-1) {
						int tmp = (a+1)*price[a] + (b-a)*price[b] + (c-b)*price[c] + (d-c)*price[d] ;

						tmp > ret && Pf("%d*%d + %d*%d + %d*%d + %d*%d\n", a+1, price[a], b-a, price[b], c-b, price[c], d-c, price[d]);

						ret = max(ret, tmp);
					}
				}
			}
		}

		return ret;
*/
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	Pricing *obj;
	int answer;
	obj = new Pricing();
	clock_t startTime = clock();
	answer = obj->maxSales(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	int p1;
	
	{
	// ----- test 0 -----
	int t0[] = {9,1,5,5,5,5,4,8,80};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 120;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {17,50,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 69;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {130,110,90,13,6,5,4,3,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 346;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Market differentiation in its simplest form is a system of charging different
// prices to different customers for the same product.  To maximize the total
// sales revenue, we would like to charge each customer individually, charging the 
// highest price that that customer would be willing to pay.  Usually we have 
// to divide the customers into a few groups, and charge the same 
// price to everyone in a group (e.g. business class, economy class, etc.).
// 
// We have a list of all the potential customers for our product and the most 
// that each customer is willing to pay.  We have decided to differentiate them 
// into four or fewer (non-overlapping) groups. Everyone within each group
// will be offered the same price. Our goal is to choose the groups and prices
// optimally to maximize our total sales revenue.
// 
// Create a class Pricing that contains a method maxSales that takes a vector <int> 
// price containing the highest price that each potential customer is willing 
// to pay, and returns the maximum sales revenue we can generate by 
// differentiating our customers into four or fewer groups. 
// 
// 
// 
// DEFINITION
// Class:Pricing
// Method:maxSales
// Parameters:vector <int>
// Returns:int
// Method signature:int maxSales(vector <int> price)
// 
// 
// CONSTRAINTS
// -price must contain between 1 and 50 elements inclusive
// -each element of price must be between 0 and 1000 inclusive
// 
// 
// EXAMPLES
// 
// 0)
// {9,1,5,5,5,5,4,8,80}
// 
// Returns: 120
// 
// 
//    Charge 80 to the one customer willing to pay 80.  
//    Charge 8 to the 2 customers willing to pay 8 or 9.
//    Charge 5 to the 4 customers willing to pay 5.
//    Charge 4 to the one customer willing to pay 4.
//    Total sales revenue = 1*80 + 2*8 + 4*5 + 1*4.
//    (We can put the customer who is willing to pay 1 into any of these groups 
// since he will not buy anything at these prices.)
// 
// 
// 1)
// {17,50,2}
// 
// Returns: 69
// 
// We use just three groups, each containing one customer. We charge each customer the
// most she is willing to pay.  Total sales revenue = 1*17 + 1*50 + 1*2
// 
// 2)
// {130,110,90,13,6,5,4,3,0}
// 
// Returns: 346
// 
// Charge each of the 4 customers willing to pay between 4 
// and 13 a price of 4, thereby getting a total of 16 from them.
// Then charge the most we can to each of the three customers who are willing to pay a lot. 4*4 + 90 + 110 + 130 = 346 
// 
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

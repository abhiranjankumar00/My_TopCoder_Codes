#include <iostream>
#include <ctime>
#include <vector>
#include <list>
#include <queue>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <cassert>
#include <utility>
#include <sstream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <climits>
#include <iterator>
#include <fstream>
using namespace std;

typedef long long 		int64;
typedef vector<int> 		vi;
typedef string 			ST;
typedef stringstream 		SS;
typedef vector< vector<int> > 	vvi;
typedef pair<int,int> 		ii;
typedef vector<string> 		vs;
/*
#if __cplusplus > 199711L	// for g++0x, value of __cplusplus must be greater thana 199711L.
	#define tr(i, c)	for(auto i = begin(c); i != end(c); i++)
#else
	#define tr(i, c)	for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#endif
*/
#define endl		("\n")
#define tr(i, c)	for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define PI		M_PI
#define E 		M_E
#define	eps		1e-9

#define	Sf		scanf
#define	Pf		printf

#define forn(i, n)	for(int i = 0, lets_stop_here = (int)n; i <  lets_stop_here; i++)
#define forab(i, a, b)	for(int i = a, lets_stop_here = (int)b; i <= lets_stop_here; i++)
#define rep(i, a, b)	for(int i = a, lets_stop_here = (int)b; i >= lets_stop_here; i--)

#define	all(c)		(c).begin(), (c).end()
#define	CL(a, b)	memset(a, b, sizeof(a))
#define mp		make_pair
#define pb		push_back

#define	present(x, c)	((c).find(x) != (c).end())	//map & set//
#define	cpresent(x, c)	(find( (c).begin(), (c).end(), x) != (c).end())	//vector & list//

#define read(n)		scanf("%d", &n)
#define write(n)	printf("%d ", n)
#define writeln(n)	printf("%d\n", n)

#if (0 or defined ONLINE_JUDGE)
	#define DEBUG
#else 
	#define DEBUG(x)	cout << #x << " = " << x << "\n"
#endif

class PrimeSequences
{
public:
	int getLargestGenerator(int N, int D);
};

const int sz = 1e7 + 111;
//const int sz = 100;
int cnt[sz]; 

int PrimeSequences::getLargestGenerator (int N, int D) 
{
	forn(i, sz)
		cnt[i] = 1;
	cnt[0] = cnt[1] = 0;

	for(int i = 2; i< sz; i++)	if(cnt[i] == 1) {
		cnt[i] += cnt[i/2];
		for(int j = i+i; j < sz; j+=i)
			cnt[j] = 0;
	}
/*
	forn(i, sz)
		Pf("%d: %d\n", i, cnt[i]);
*/
	rep(i, N, 0)
		if(cnt[i] >= D)
			return i;
	return -1;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	PrimeSequences *obj;
	int answer;
	obj = new PrimeSequences();
	clock_t startTime = clock();
	answer = obj->getLargestGenerator(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	p0 = 10;
	p1 = 2;
	p2 = 7;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 42;
	p1 = 3;
	p2 = 23;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 666;
	p1 = 7;
	p2 = -1;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 1337;
	p1 = 5;
	p2 = 47;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 100000;
	p1 = 5;
	p2 = 2879;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 40000;
	p1 = 1;
	p2 = 39989;
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Elly loves "div 2" problems! By this she means problems in which she has to divide by two.
// She observes an interesting property of some prime numbers: after division by two (all divisions in this problem are rounded down, i.e., integer divisions) the new number is also prime. An example of such a prime number is 7, which after division becomes 3, which is also prime. Some numbers generate even longer sequences: {47, 23, 11, 5, 2} contains 5 consecutive prime numbers, for example.
// 
// The length of the sequence generated by a natural number K is defined as the number of times K can be divided by two before obtaining a number which is not prime. For example, the number 479 has length of only 2, because after two divisions the resulting number 119 is not prime (even though subsequent divisions produce the prime numbers 59, 29, 7 and 3).
// 
// Given ints N and D, Elleonora wants to find a positive integer X less than or equal to N such that the length of the sequence generated by X is at least D. If more than one such number exists, she wants the largest one. If no such number exists, return -1 instead.
// 
// DEFINITION
// Class:PrimeSequences
// Method:getLargestGenerator
// Parameters:int, int
// Returns:int
// Method signature:int getLargestGenerator(int N, int D)
// 
// 
// NOTES
// -A prime number is a natural number greater than one with exactly two distinct natural divisors: 1 and itself.
// 
// 
// CONSTRAINTS
// -N will be between 2 and 10,000,000, inclusive.
// -D will be between 1 and 10, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 10
// 2
// 
// Returns: 7
// 
// Here the optimal sequence is {7, 3}. Another sequence {5, 2} with the same length exists too, but the first one begins with a larger number.
// 
// 
// 1)
// 42
// 3
// 
// Returns: 23
// 
// The optimal sequence is {23, 11, 5, 2}, which has length 4.
// 
// 2)
// 666
// 7
// 
// Returns: -1
// 
// Six hundred and sixty six is, apparently, not large enough to contain a sequence of length 7.
// 
// 3)
// 1337
// 5
// 
// Returns: 47
// 
// 4)
// 100000
// 5
// 
// Returns: 2879
// 
// There are not many sequences of length five or more.
// 
// 5)
// 40000
// 1
// 
// Returns: 39989
// 
// 39989 is the largest prime number less than or equal to 40000.
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

#include <bits/stdc++.h>
using namespace std;

class PyramidOfCubes
{
public:
	double surface(int K);
};

double PyramidOfCubes::surface (int K) 
{
	double ret;
	
	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, bool hasAnswer, double p1) {
	cout << "Test " << testNum << ": [" << p0;
	cout << "]" << endl;
	PyramidOfCubes *obj;
	double answer;
	obj = new PyramidOfCubes();
	clock_t startTime = clock();
	answer = obj->surface(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == answer && fabs(p1 - answer) <= 1e-9 * max(1.0, fabs(p1));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	double p1;
	
	{
	// ----- test 0 -----
	p0 = 14;
	p1 = 42.0;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 21;
	p1 = 58.0;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 1;
	p1 = 6.0;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 2;
	p1 = 10.0;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 451234;
	p1 = 47498.0;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// Consider a N-level pyramid built of unit cubes. An example for N=3 can be seen in the image below.
// 
// 
// 
// 
// 
// Formally, a pyramid of size N has N levels, where the i-th level (counting from the top) contains an i by i grid of unit cubes.
// 
// 
// 
// You have K cubes. First, you select a suitable pyramid size as follows: If K is exactly the number of cubes necessary to build a pyramid of size N for some N, you pick that size. Otherwise, you pick the smallest pyramid size you can not build.
// 
// 
// 
// Now you start building the pyramid in a systematic bottom-up way. First you build the complete bottom level, then you build the level above that, etc. When building a level, also proceed in a systematic way, starting the next row only when the previous one is full.
// 
// 
// 
// For example, for 21 cubes you should get the following incomplete pyramid:
// 
// 
// 
// 
// 
// Given an int K specifying the number of cubes you have, return the surface area of the possibly incomplete pyramid you will build according to the instructions above.
// 
// 
// DEFINITION
// Class:PyramidOfCubes
// Method:surface
// Parameters:int
// Returns:double
// Method signature:double surface(int K)
// 
// 
// NOTES
// -The returned value must be accurate to within a relative or absolute value of 1E-9.
// -The bottom sides of the cubes on the bottommost level are a part of the surface.
// 
// 
// CONSTRAINTS
// -K will be between 1 and 1,000,000,000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 14
// 
// Returns: 42.0
// 
// The first example from the problem statement.
// 
// 1)
// 21
// 
// Returns: 58.0
// 
// The second example from the problem statement.
// 
// 2)
// 1
// 
// Returns: 6.0
// 
// A single cube.
// 
// 3)
// 2
// 
// Returns: 10.0
// 
// Two cubes next to each other.
// 
// 4)
// 451234
// 
// Returns: 47498.0
// 
// Quite a lot of cubes.
// 
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

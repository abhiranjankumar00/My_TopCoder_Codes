#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef string ST;
typedef stringstream SS;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef vector <string> vs;

#define Pf	printf
#define	Sf	scanf

#define	ep	1e-9
#define PI M_PI
#define E M_E

#define	CL(a, b)	memset(a, b, sizeof(a))
#define	mp	make_pair

#define	pb	push_back

#define	all(c)	(c).begin(), (c).end()
#define	tr(i, c)	for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())	//vector & list//

#define forn(i, n)	for(int i = 0, loop_ends_here = (int)n; i < loop_ends_here; i++)
#define forab(i, a, b)	for(int i = a, loop_ends_here = (int) b; i <= loop_ends_here; i++)
#define rep(i, a, b)	for(int i = a, loop_ends_here = (int)b; i>=loop_ends_here; i--)

#define read(n)		scanf("%d", &n)
#define write(n)	printf("%d ", n)
#define writeln(n)	printf("%d\n", n)

class Quilting
{
public:
	string lastPatch(int length, int width, vector <string> colorList);
};


string Quilting::lastPatch (int length, int width, vector <string> colorList) 
{
	string ret;
	
	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, vector <string> p2, bool hasAnswer, string p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p2[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	Quilting *obj;
	string answer;
	obj = new Quilting();
	clock_t startTime = clock();
	answer = obj->lastPatch(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p3 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	vector <string> p2;
	string p3;
	
	{
	// ----- test 0 -----
	p0 = 3;
	p1 = 2;
	string t2[] = {"RED","BLUE","TAN"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = "TAN";
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 4;
	p1 = 3;
	string t2[] = {"E","D","C","B","A"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = "E";
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 3;
	p1 = 3;
	string t2[] = {"A","B","C","D"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = "C";
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 1;
	p1 = 1;
	string t2[] = {"RED","BLUE","YELLOW"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = "RED";
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 10;
	p1 = 10;
	string t2[] = {"X","Y","Z"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = "Z";
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// A quilt is made by sewing square patches of different colors together in
// a pattern.  We are using a pattern that says to start with one patch, and then add patches starting with the patch above it and continuing by spiraling outward counterclockwise until we
// have the desired size. The picture below shows the order of the patches (a then b then c etc.)
// in crafting a quilt whose length(i.e. height) is 4 and whose width is 3. 
// 
//           lkj    
//           cbi     
//           dah              
//           efg                           
// 
// Define the neighbors of a newly added patch to be
// all the previous patches that touch the new patch (including those that
// just touch diagonally at a corner).  The rules for choosing the color of 
// the newly added patch are 
//     1) choose a color that minimizes the number of neighbors of the same color
//     2) choose a color that has been used least often by previous patches
//     3) choose the earliest(lowest index) color in the colorList
// 
// Rule 2 is applied only to decide among colors that are tied after rule 1 has been applied. Rule 3 
// is applied only to decide among colors that are tied after the first two rules have been applied.
// 
// Create a class Quilting that contains a method lastPatch that returns the color
// of the last patch added to the quilt.  Its inputs are an int length and an int 
// width (the two dimensions of the finished quilt),  and 
// a vector <string> colorList giving the
// available colors.  length minus width will be 0 or 1,
// so it will always be possible to produce a quilt of the given size.
// 
// 
// 
// DEFINITION
// Class:Quilting
// Method:lastPatch
// Parameters:int, int, vector <string>
// Returns:string
// Method signature:string lastPatch(int length, int width, vector <string> colorList)
// 
// 
// CONSTRAINTS
// -width will be between 1 and 100 inclusive
// -length will be between 1 and 100 inclusive
// -length - width will be 0 or 1
// -colorList will have between 1 and 10 elements inclusive
// -each element of colorList will have between 1 and 15 characters inclusive
// -each element of colorList will contain only uppercase letters 'A'-'Z'
// -each element of colorList will be distinct
// 
// 
// EXAMPLES
// 
// 0)
// 3
// 2
// {"RED","BLUE","TAN"}
// 
// Returns: "TAN"
// 
// 
//   
//        TAN  BLUE
//        RED  RED 
//        BLUE TAN
// 
// The layout above shows the finished quilt. It was created by starting at the position of the rightmost RED. (The color RED was chosen by rule 3). The BLUE above it was added next (RED was disqualified by rule 1, BLUE preferred over TAN by rule 3). Then TAN was chosen by rule 1, and then RED was chosen by rule 3. BLUE was chosen by rule 3 after RED was eliminated by rule 1. Finally the last patch was TAN by rule 1.
// 
// 
// 
// 1)
// 4
// 3
// {"E","D","C","B","A"}
// 
// Returns: "E"
// 
//   
//        E B E
//        C D A
//        B E B
//        A D C
// 
// The layout above shows the finished quilt. It was created by starting at the position of E near the middle.(The color E was chosen by rule 3). The D above it was added next (E was disqualified by rule 1, the
// others were tied under rule 2, and D was preferred over the others by rule 3). The process continued until the final E in the upper left corner was chosen because B, C, and D were eliminated by rule 1, E and A were tied under rule 2 and E was preferred to A by rule 3.
// 
// 
// 2)
// 3
// 3
// {"A","B","C","D"}
// 
// Returns: "C"
// 
// 
// 
//              C B C
//              D A A
//              B C D
// 
// This quilt was constructed by starting at the position of the middle A and
// then adding the B patch above it.  The final patch was the C in the
// upper right corner.
// 
// 
// 3)
// 1
// 1
// {"RED","BLUE","YELLOW"}
// 
// Returns: "RED"
// 
// 4)
// 10
// 10
// {"X","Y","Z"}
// 
// Returns: "Z"
// 
// 
//   Z Y Z Y X Y X Z X Y
//   X X Z Y Z Y X Y X Z
//   Z Y Z X Z Y Z Y Z Y
//   X Z X Y X Y X Z X X
//   Y Z Y Z Z Y Z Y Y Y
//   Z X X X X X X Z X Z
//   Y Y Y Z Y Z Y Y Z Y
//   X X Z X Y X Z X X X
//   Y Z Y X Z X Y Z Y Y
//   Z X Y Z Y Z X Z X Z
// 
// 
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

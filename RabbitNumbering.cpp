#include <bits/stdc++.h>
using namespace std;

class RabbitNumbering
{
public:
	int theCount(vector <int> maxNumber);
};

const long long p = 1e9 + 7;

int RabbitNumbering::theCount (vector <int> maxNumber) 
{
	long long  ret = 1;

  sort(maxNumber.begin(), maxNumber.end());

  for(int i = 0; i < (int)maxNumber.size(); i++) {
    if(maxNumber[i] < i+1)
      return 0;

    long long mul = maxNumber[i] - i;
    ret = (ret * mul) % p;
  }

	return (int)ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	RabbitNumbering *obj;
	int answer;
	obj = new RabbitNumbering();
	clock_t startTime = clock();
	answer = obj->theCount(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	vector <int> p0;
	int p1;
	
	// ----- test 0 -----
	disabled = false;
	p0 = {5};
	p1 = 5;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = {4,4,4,4};
	p1 = 24;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = {5,8};
	p1 = 35;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = {2,1,2};
	p1 = 0;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = {25,489,76,98,704,98,768,39,697,8,56,74,36,95,87,2,968,4,920,54,873,90};
	p1 = 676780400;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Taro and Hanako have rabbits, and they want to assign a distinct integer to each rabbit so they can easily identify them.
// 
// 
// The rabbits have expressed their preferences to Taro and Hanako. The i-th rabbit wants an integer between 1 and maxNumber[i], inclusive. Taro and Hanako must obey the preferences of all their rabbits.
// 
// 
// Return the number of ways they can assign numbers to their rabbits, modulo 1,000,000,007. If it's impossible to assign distinct integers to the rabbits, return 0.
// 
// DEFINITION
// Class:RabbitNumbering
// Method:theCount
// Parameters:vector <int>
// Returns:int
// Method signature:int theCount(vector <int> maxNumber)
// 
// 
// CONSTRAINTS
// -maxNumber will contain between 1 and 50 elements, inclusive.
// -Each element of maxNumber will be between 1 and 1,000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {5}
// 
// Returns: 5
// 
// They can assign any number between 1 and 5, inclusive, to the only rabbit.
// 
// 1)
// {4, 4, 4, 4}
// 
// Returns: 24
// 
// All permutations of {1, 2, 3, 4} are possible.
// 
// 2)
// {5, 8}
// 
// Returns: 35
// 
// 
// 
// 3)
// {2, 1, 2}
// 
// Returns: 0
// 
// 
// 
// 4)
// {25, 489, 76, 98, 704, 98, 768, 39, 697, 8, 56, 74, 36, 95, 87, 2, 968, 4, 920, 54, 873, 90}
// 
// Returns: 676780400
// 
// 
// 
// END KAWIGIEDIT TESTING

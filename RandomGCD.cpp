#include <bits/stdc++.h>
using namespace std;

class RandomGCD
{
public:
	int countTuples(int N, int K, int low, int high);
};

const long long p = (long long)1e9+7;

int RandomGCD::countTuples (int N, int K, int low, int high)
{
    vector <int> arr;
    arr.clear();
    for(int q = (int)low; q <= (int)high; ++q) {
        if(q % K == 0)
            arr.push_back(q/K);
    }
    for(auto it = (arr).begin(); it != (arr).end(); ++it) {
        printf("%d ", (int)*it);
    }
    cout << "\n";
    if(arr.empty())
        return 0;

    map <int, int> mp;
    for(auto it = (arr).begin(); it != (arr).end(); ++it) {
        mp[*it] = 1;
    }

    for(int i = (int)2; i <= (int)N; ++i) {
        map <int, int> cur;
        for(auto it = (mp).begin(); it != (mp).end(); ++it) {
            for(auto jt = (arr).begin(); jt != (arr).end(); ++jt) {
                cur[__gcd(it->first, *jt)]++;
            }
        }
        mp = cur;
    }

	int ret = -1;
	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, bool hasAnswer, int p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3;
	cout << "]" << endl;
	RandomGCD *obj;
	int answer;
	obj = new RandomGCD();
	clock_t startTime = clock();
	answer = obj->countTuples(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p4;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	int p0;
	int p1;
	int p2;
	int p3;
	int p4;
	
	// ----- test 0 -----
	disabled = false;
	p0 = 2;
	p1 = 2;
	p2 = 2;
	p3 = 4;
	p4 = 3;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = 2;
	p1 = 100;
	p2 = 2;
	p3 = 4;
	p4 = 0;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = 1;
	p1 = 5;
	p2 = 5;
	p3 = 5;
	p4 = 1;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = 73824;
	p1 = 17347;
	p2 = 9293482;
	p3 = 9313482;
	p4 = 0;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = 222;
	p1 = 222;
	p2 = 222;
	p3 = 22222;
	p4 = 339886855;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Consider the integers between low and high, inclusive.
// We are going to select a sequence of N integers from this range.
// The sequence is allowed to contain repeated elements, hence there are (high-low+1)^N possible sequences (where '^' denotes exponentiation).
// 
// Out of those sequences, we are only interested in the ones that have one additional property:
// the greatest common divisor (GCD) of their elements must be exactly K.
// 
// You are given the ints N, K, low, and high.
// Let X be the number of N-tuples described above.
// Because X can be very large, compute and return the value (X modulo 1,000,000,007).
// 
// DEFINITION
// Class:RandomGCD
// Method:countTuples
// Parameters:int, int, int, int
// Returns:int
// Method signature:int countTuples(int N, int K, int low, int high)
// 
// 
// NOTES
// -The greatest common divisor of a sequence is the largest positive integer that divides each element of the sequence.
// 
// 
// CONSTRAINTS
// -N, K and low will each be between 1 and 1,000,000,000, inclusive.
// -high will be between low and 1,000,000,000, inclusive.
// -The difference high - low will be less than or equal to 100,000.
// 
// 
// EXAMPLES
// 
// 0)
// 2
// 2
// 2
// 4
// 
// Returns: 3
// 
// There are 9 possible sequences: {(2, 2), (2, 3), (2, 4), (3, 2), (3, 3), (3, 4), (4, 2), (4, 3), (4, 4)}.
// Out of these, 3 of them have the requested gcd of 2: {(2, 2), (2, 4), (4, 2)}.
// Hence, the answer is 3.
// 
// 1)
// 2
// 100
// 2
// 4
// 
// Returns: 0
// 
// Sometimes no combinations yield the requested GCD.
// 
// 2)
// 1
// 5
// 5
// 5
// 
// Returns: 1
// 
// Sometimes you select only one number.
// 
// 3)
// 73824
// 17347
// 9293482
// 9313482
// 
// Returns: 0
// 
// 
// 
// 4)
// 222
// 222
// 222
// 22222
// 
// Returns: 339886855
// 
// 
// 
// END KAWIGIEDIT TESTING

#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef string ST;
typedef stringstream SS;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef vector <string> vs;

#define endl 		("\n")
#define DEBUG(x)	cout << #x << " = " << x << "\n"
#define Pf		printf
#define	Sf		scanf

#define	ep		1e-9
#define PI		M_PI
#define E 		M_E

#define	CL(a, b)	memset(a, b, sizeof(a))
#define	mp		make_pair
#define	pb		push_back

#define	all(c)		(c).begin(), (c).end()
#define	tr(i, c)	for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())		//vector & list//

#define forn(i, n)	for(int i = 0, loop_ends_here = (int)n; i < loop_ends_here ; i++)
#define forab(i, a, b)	for(int i = a, loop_ends_here = (int)b; i <= loop_ends_here; i++)
#define rep(i, a, b)	for(int i = a, loop_ends_here = (int)b; i >= loop_ends_here; i--)

#define read(n)		scanf("%d", &n)
#define write(n)	printf("%d ", n)
#define writeln(n)	printf("%d\n", n)

class RandomOption
{
public:
	double getProbability(int keyCount, vector <int> badLane1, vector <int> badLane2);
};

double RandomOption::getProbability (int keyCount, vector <int> badLane1, vector <int> badLane2) 
{
	int64 fact[20] = {1};	forab(i, 1, 19)	fact[i] = fact[i-1]*i;
	double ret;
	
	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, vector <int> p1, vector <int> p2, bool hasAnswer, double p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}";
	cout << "]" << endl;
	RandomOption *obj;
	double answer;
	obj = new RandomOption();
	clock_t startTime = clock();
	answer = obj->getProbability(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == answer && fabs(p3 - answer) <= 1e-9 * max(1.0, fabs(p3));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	vector <int> p1;
	vector <int> p2;
	double p3;
	
	{
	// ----- test 0 -----
	p0 = 5;
	int t1[] = {0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {3};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 0.6;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 5;
	int t1[] = {0,1,2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {1,2,0};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 0.1;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 5;
	int t1[] = {2,2,2,2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {0,1,3,4};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 0.0;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 7;
	int t1[] = {0,1,2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {6,5,4};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 0.3904761904761904;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 7;
	int t1[] = {3,5,1,0,2,6,4};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {0,2,4,6,1,5,3};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 0.09166666666666667;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// DJ Jeipouju likes a single-player music game called BM Mania.
// In this game, the player has a controller with keyCount keys, arranged in a row and conveniently numbered 0 through keyCount-1, in order.
// When starting a game, the player selects a song.
// The game takes the musical score of the song and assigns each note to one of the keys of the controller.
// The goal of the game is to "play" the song by hitting the corresponding keys of the controller at appropriate times.
// 
// The player also has a computer screen that shows him the keys he will have to hit in the future.
// During the game, the keys that the player has to hit are shown to the player as lanes:
// For each key of the controller, there is a column on the screen with downwards moving markers, each representing a keystroke.
// Whenever a marker reaches the bottom of the screen, the player must press the corresponding key.
// 
// A simple scheme of the game screen with 5 keys is shown below.
// Dashes ('-') represent the markers, equals signs ('=') are the bottom of the screen.
// For convenience, we show the corresponding key numbers below.
// 
// 
//    | | | | | |
//    | |-| | | |
//    | |-| | |-|
//    |-| |-|-| |
//    |-| | |-|-|
//    | | |-|-| |
//    |-| | | |-|
//    ===========
//    |0|1|2|3|4|
// 
// 
// Jeipouju is a pretty good player.
// Recently, he tried to play a difficult song, but he always failed at the same place in the song.
// The reason of his failure was the fact that he was unable to play a combination of keystrokes that appeared in two adjacent lanes.
// However, he can easily play the same combination on any pair of non-adjacent keys.
// 
// Luckily for Jeipouju, the game has an option to randomly permute the lanes of a song.
// The figure below shows one possible outcome of activating the random option.
// In the figure, the original lane 0 is now on the key 4, lane 1 moved to key 0, lanes 2 and 3 stayed
// on their respective keys, and lane 4 moved to the key 1.
// 
// 
//      original                        permuted
//       song                             lanes
//     | | | | | |                     | | | | | |
//     |-| |-| | |                     | | |-| |-|
//     | |-| | | |                     |-| | | | |
//     |-| | |-| |   random activated  | | | |-|-|
//     | |-| | | |  =================> |-| | | | |
//     |-|-| | | |                     |-| | | |-|
//     |-| | | | |                     | | | | |-|
//     | |-| |-|-|                     |-|-| |-| |
//     ===========                     ===========
//     |0|1|2|3|4|                     |0|1|2|3|4|
// 
// 
// Jeipouju thinks that there are several pairs of lanes that will cause him to fail if they are assigned to adjacent keys.
// For each i, one such pair is badLane1[i] and badLane2[i].
// More precisely, Jeipouju will win the game if and only if for all i the lanes badLane1[i] and badLane2[i] are assigned to non-adjacent keys.
// 
// You are given the int keyCount and two vector <int>s: badLane1 and badLane2. 
// Return the probability that Jeipouju will win the game after the lanes have been randomly permuted.
// 
// DEFINITION
// Class:RandomOption
// Method:getProbability
// Parameters:int, vector <int>, vector <int>
// Returns:double
// Method signature:double getProbability(int keyCount, vector <int> badLane1, vector <int> badLane2)
// 
// 
// NOTES
// -The permutation of lanes is chosen uniformly at random from the set of all possible permutations.
// -Your return value must have a relative or an absolute error of less than 1e-9.
// 
// 
// CONSTRAINTS
// -keyCount will be between 5 and 14, inclusive.
// -badLane1 will contain between 1 and 50 elements, inclusive.
// -badLane2 will contain the same number of elements as badLane1.
// -Each element of badLane1 and badLane2 will be between 0 and keyCount - 1, inclusive.
// -For all i, badLane1[i] and badLane2[i] will be distinct.
// -All the pairs of bad lanes will be distinct.
// 
// 
// EXAMPLES
// 
// 0)
// 5
// {0}
// {3}
// 
// Returns: 0.6
// 
// There are 5 keys and only one bad pair.
// The probability that these lanes are assigned to adjacent keys is 4 / (5 choose 2) = 0.4, so the probability that we have a good arrangement is 1 - 0.4 = 0.6.
// 
// 1)
// 5
// {0, 1, 2}
// {1, 2, 0}
// 
// Returns: 0.1
// 
// In a good arrangement, no two of the lanes 0, 1, and 2 may be adjacent.
// Hence they have to be assigned to keys 0, 2, and 4, in some order.
// The probability of this event is (3! * 2!) / 5! = 0.1.
// 
// 2)
// 5
// {2, 2, 2, 2}
// {0, 1, 3, 4}
// 
// Returns: 0.0
// 
// All the pairs of lane 2 and other lanes are bad, so it is impossible to obtain a good arrangement.
// 
// 3)
// 7
// {0, 1, 2}
// {6, 5, 4}
// 
// Returns: 0.3904761904761904
// 
// 
// 
// 4)
// 7
// {3, 5, 1, 0, 2, 6, 4}
// {0, 2, 4, 6, 1, 5, 3}
// 
// Returns: 0.09166666666666667
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

#include <iostream>
#include <ctime>
#include <vector>
#include <list>
#include <queue>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <cassert>
#include <utility>
#include <sstream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <climits>
#include <iterator>
#include <fstream>
using namespace std;

typedef long long 		int64;
typedef vector<int> 		vi;
typedef string 			ST;
typedef stringstream 		SS;
typedef vector< vector<int> > 	vvi;
typedef pair<int,int> 		ii;
typedef vector<string> 		vs;
/*
#if __cplusplus > 199711L	// for g++0x, value of __cplusplus must be greater thana 199711L.
	#define tr(i, c)	for(auto i = begin(c); i != end(c); i++)
#else
	#define tr(i, c)	for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#endif
*/
#define endl		("\n")
#define tr(i, c)	for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define PI		M_PI
#define E 		M_E
#define	eps		1e-9

#define	Sf		scanf
#define	Pf		printf

#define forn(i, n)	for(int i = 0, lets_stop_here = (int)n; i <  lets_stop_here; i++)
#define forab(i, a, b)	for(int i = a, lets_stop_here = (int)b; i <= lets_stop_here; i++)
#define rep(i, a, b)	for(int i = a, lets_stop_here = (int)b; i >= lets_stop_here; i--)

#define	all(c)		(c).begin(), (c).end()
#define	cl(a, b)	memset(a, b, sizeof(a))
#define mp		make_pair
#define pb		push_back

#define	present(x, c)	((c).find(x) != (c).end())	//map & set//
#define	cpresent(x, c)	(find( (c).begin(), (c).end(), x) != (c).end())	//vector & list//

#define read(n)		scanf("%d", &n)
#define write(n)	printf("%d ", n)
#define writeln(n)	printf("%d\n", n)

//#define debug(x)
#define debug(x)	cout << #x << " = " << x << "\n"

class RandomSort
{
public:
	double getExpected(vector <int> permutation);
};
/*
map <vector<int>, double> ex;
int N;
//SRM 402, Div1, 250

double solve(const vector <int> &v) {
	auto it = ex.find(v);
	if(it != ex.end())
		return it->second;

	int cnt = 0;
	double ret = 0.0;

	for(int i = 0; i < N; ++i) {
		for(int j = i+1; j <= N-1; ++j) {
			if(v[i] > v[j]) {
				cnt++;
				vector <int> tmp = v;
				swap(tmp[i], tmp[j]);
				ret += 1 + solve(tmp);
			}
		}
	}
	ret /= cnt;
	return ex[v] = ret;
}
*/
map <vector <int> , double>	ret;

double RandomSort::getExpected (vector <int> permutation) 
{
	auto it = ret.find(permutation);
	if(it != ret.end())
		return it->second;

	double ans = 0.0;
	int cnt = 0;
	int N = permutation.size();
	for(int i = 0; i < N; ++i) {
		for(int j = i+1; j <= N-1; ++j) {
			if(permutation[j] < permutation[i]) {
				cnt++;
				vector <int> tmp = permutation;
				swap(tmp[i], tmp[j]);
				ans += 1 + getExpected(tmp);
			}
		}
	}
	cnt = max(cnt, 1);
	return ret[permutation] = ans/cnt;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, double p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	RandomSort *obj;
	double answer;
	obj = new RandomSort();
	clock_t startTime = clock();
	answer = obj->getExpected(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == answer && fabs(p1 - answer) <= 1e-9 * max(1.0, fabs(p1));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	double p1;
	
	{
	// ----- test 0 -----
	int t0[] = {1,3,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1.0;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {4,3,2,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4.066666666666666;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0.0;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {2,5,1,6,3,4};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 5.666666666666666;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// You are given a vector <int> permutation containing a permutation of the first n positive integers (1 through n), and you want to sort them in ascending order.  To do this, you will perform a series of swaps.  For each swap, you consider all pairs (i, j) such that i < j and permutation[i] > permutation[j].  Among all those pairs, you choose one randomly and swap permutation[i] and permutation[j].  Each pair has the same probability of being chosen.  Return the expected number of swaps needed to sort permutation in ascending order.
// 
// DEFINITION
// Class:RandomSort
// Method:getExpected
// Parameters:vector <int>
// Returns:double
// Method signature:double getExpected(vector <int> permutation)
// 
// 
// NOTES
// -The returned value must be accurate to within a relative or absolute value of 1E-9.
// 
// 
// CONSTRAINTS
// -permutation will contain between 1 and 8 elements, inclusive.
// -permutation will contain each integer between 1 and n, inclusive, exactly once, where n is the number of elements in permutation.
// 
// 
// EXAMPLES
// 
// 0)
// {1,3,2}
// 
// Returns: 1.0
// 
// Exactly one swap is needed.
// 
// 1)
// {4,3,2,1}
// 
// Returns: 4.066666666666666
// 
// In the first step, any two elements can be swapped.
// 
// 2)
// {1}
// 
// Returns: 0.0
// 
// This permutation is already sorted, so there's no need to perform any swaps.
// 
// 3)
// {2,5,1,6,3,4}
// 
// Returns: 5.666666666666666
// 
// 
// 
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

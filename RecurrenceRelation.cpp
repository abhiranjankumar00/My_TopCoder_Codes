#include <bits/stdc++.h>
using namespace std;

class RecurrenceRelation
{
public:
	int moduloTen(vector <int> coefficients, vector <int> initial, int N);
};

int RecurrenceRelation::moduloTen (vector <int> coefficients, vector <int> initial, int N) 
{
  for(auto it = (coefficients).begin(); it != (coefficients).end(); ++it) {
    *it = (*it%10+10)%10;
  }
  for(auto it = (initial).begin(); it != (initial).end(); ++it) {
    *it = (*it%10+10)%10;
  }
  int len = coefficients.size();
  int sz = initial.size();
  while(sz <= N) {
    int cur = 0;
    for(int i = 0; i < (int)len; ++i) {
      //cur += (coefficients[i]*initial[sz-1-i]);
      cur += (coefficients[i]*initial[sz-len+i]);
      cur = (cur%10+10)%10;
    }
    initial.push_back(cur);
    sz = initial.size();
  }
  /*
  for(auto it = (initial).begin(); it != (initial).end(); ++it) {
    printf("%d ", *it);
  }
  cout << "\n";
  */
	
  return initial[N];
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << p2;
	cout << "]" << endl;
	RecurrenceRelation *obj;
	int answer;
	obj = new RecurrenceRelation();
	clock_t startTime = clock();
	answer = obj->moduloTen(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	vector <int> p0;
	vector <int> p1;
	int p2;
	int p3;
	
	// ----- test 0 -----
	disabled = false;
	p0 = {2,1};
	p1 = {9,7};
	p2 = 6;
	p3 = 5;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = {1,1};
	p1 = {0,1};
	p2 = 9;
	p3 = 4;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = {2};
	p1 = {1};
	p2 = 20;
	p3 = 6;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = {2};
	p1 = {1};
	p2 = 64;
	p3 = 6;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = {25,143};
	p1 = {0,0};
	p2 = 100000;
	p3 = 0;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 5 -----
	disabled = false;
	p0 = {9,8,7,6,5,4,3,2,1,0};
	p1 = {1,2,3,4,5,6,7,8,9,10};
	p2 = 654;
	p3 = 5;
	all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 6 -----
	disabled = false;
	p0 = {901,492,100};
	p1 = {-6,-15,-39};
	p2 = 0;
	p3 = 4;
	all_right = (disabled || KawigiEdit_RunTest(6, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Consider a sequence {x0, x1, x2, ...}.  A relation that defines some term xn in terms of previous terms is called a recurrence relation.  A linear recurrence relation is one where the recurrence is of the form xn = ck-1xn-1 + ck-2xn-2 + ... + c0xn-k, where all the ci are real-valued constants, k is the length of the recurrence relation, and n is an arbitrary positive integer which is greater than or equal to k.
// 
// You will be given a vector <int> coefficients, indicating, in order, c0, c1, ..., ck-1.  You will also be given a vector <int> initial, giving the values of x0, x1, ..., xk-1, and an int N.  Your method should return xN modulo 10.
// 
// Note that the value of X modulo 10 equals the last digit of X if X is non-negative.  However, if X is negative, this is not true; instead, X modulo 10 equals ((10 - ((-X) modulo 10)) modulo 10).  For example, (-16) modulo 10 = ((10 - (16 modulo 10)) modulo 10) = (10 - 6) modulo 10 = 4.
// 
// More specifically, if coefficients is of size k, then the recurrence relation will be
// xn = coefficients[k - 1] * xn-1 + coefficients[k - 2] * xn-2 + ... + coefficients[0] * xn-k.
// 
// For example, if coefficients = {2,1}, initial = {9,7}, and N = 6, then our recurrence relation is xn = xn-1 + 2 * xn-2 and we have x0 = 9 and x1 = 7. Then x2 = x1 + 2 * x0 = 7 + 2 * 9 = 25, and similarly, x3 = 39, x4 = 89, x5 = 167, and x6 = 345, so your method would return (345 modulo 10) = 5.
// 
// DEFINITION
// Class:RecurrenceRelation
// Method:moduloTen
// Parameters:vector <int>, vector <int>, int
// Returns:int
// Method signature:int moduloTen(vector <int> coefficients, vector <int> initial, int N)
// 
// 
// NOTES
// -(a + b) modulo x = ( (a modulo x) + (b modulo x) ) modulo x for any values of a, b, and x.
// 
// 
// CONSTRAINTS
// -coefficients will have between 1 and 10 elements, inclusive.
// -initial will have the same number of elements as coefficients.
// -Each element of coefficients will be between -1000 and 1000, inclusive.
// -Each element of initial will be between -1000 and 1000, inclusive.
// -N will be between 0 and 100000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {2,1}
// {9,7}
// 6
// 
// Returns: 5
// 
// As described in the problem statement.
// 
// 1)
// {1,1}
// {0,1}
// 9
// 
// Returns: 4
// 
// This is the famous Fibonacci sequence, which goes 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, ...
// 
// 2)
// {2}
// {1}
// 20
// 
// Returns: 6
// 
// This sequence is 1, 2, 4, 8, 16, ...
// 
// 3)
// {2}
// {1}
// 64
// 
// Returns: 6
// 
// Watch out for overflow.
// 
// 4)
// {25,143}
// {0,0}
// 100000
// 
// Returns: 0
// 
// This sequence will always be zero.
// 
// 5)
// {9,8,7,6,5,4,3,2,1,0}
// {1,2,3,4,5,6,7,8,9,10}
// 654
// 
// Returns: 5
// 
// 6)
// {901,492,100}
// {-6,-15,-39}
// 0
// 
// Returns: 4
// 
// Watch out for negative numbers.
// 
// END KAWIGIEDIT TESTING

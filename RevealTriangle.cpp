#include <bits/stdc++.h>
using namespace std;

class RevealTriangle
{
public:
	vector <string> calcTriangle(vector <string> questionMarkTriangle);
};

void solve(char &a, char &b, char &s) {
  if(s == '?')
    return;
  if(a=='?' && b =='?')
    return;
  int l = a== '?' ? b : a;
  l-='0';
  for(int r = 0; r < (int)11; ++r) {
    if((l+r)%10 == s-'0') {
      (a=='?' ? a : b) = r + '0';
      return;
    }
  }
}

vector <string> RevealTriangle::calcTriangle (vector <string> questionMarkTriangle) 
{
	vector <string> ret = questionMarkTriangle;

  for(int i = (int)ret.size()-1; i >= (int)1; --i) {
    for(int k = 0; k < (int)50; ++k) {
      for(int j = 0; j < (int)ret[i].size(); ++j) {
        solve(ret[i-1][j], ret[i-1][j+1], ret[i][j]); 
      }
    }
  }
	
	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, vector <string> p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	RevealTriangle *obj;
	vector <string> answer;
	obj = new RevealTriangle();
	clock_t startTime = clock();
	answer = obj->calcTriangle(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p1.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << "\"" << p1[i] << "\"";
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << answer[i] << "\"";
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p1.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p1[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	vector <string> p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"4?" "?","?2","1"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"457","92","1"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"1"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"1"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"?" "?" "?2","?" "?2","?2","2"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"0002","002","02","2"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"?" "?5?","?" "?9","?4","6"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"7054","759","24","6"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// 	Suppose there is a triangle of digits like the following:
// 
// 74932
// 1325
// 457
// 92
// 1
// 
// 	Each digit, with the exception of those in the top row, is equal to the last digit of the sum of 
// 	its upper and upper-right neighboring digits.
// 
// 
// 	You will be given a vector <string> questionMarkTriangle containing a triangle where 
// 	only one digit in each row is known and all others are represented by '?'s 
// 	(see example 0 for clarification).
// 	Each element of questionMarkTriangle represents a row of the triangle, and the rows are given 
// 	from top to bottom. Each element contains exactly one digit ('0'-'9') and 
// 	the remaining characters are all '?'s. Restore the triangle and return it as a 
// 	vector <string> without '?'s.
// 
// 
// 
// DEFINITION
// Class:RevealTriangle
// Method:calcTriangle
// Parameters:vector <string>
// Returns:vector <string>
// Method signature:vector <string> calcTriangle(vector <string> questionMarkTriangle)
// 
// 
// CONSTRAINTS
// -questionMarkTriangle will contain between 1 and 50 elements, inclusive.
// -Element i (0 indexed) of questionMarkTriangle will contain exactly n-i characters, where n is the number of elements in questionMarkTriangle.
// -Each element of questionMarkTriangle will contain exactly one digit ('0'-'9') and all others characters will be '?'s.
// 
// 
// EXAMPLES
// 
// 0)
// {"4??", 
//  "?2", 
//  "1"}
// 
// Returns: {"457", "92", "1" }
// 
// Let's substitute '?'s with unknown variables:
// 
// 4ab 
// c2 
// 1
// 
// 
// Having done that, we start solving for the variables from the bottom to the top. First, we know that the last digit of (c + 2) is 1. Therefore, c must be 9:
// 
// 
// 4ab 
// 92 
// 1
// 
// Now we know that the last digit of (4 + a) is 9, which means a is 5:
// 
// 45b 
// 92 
// 1
// 
// 
// And, finally, the last digit of (5 + b) is 2, so b is 7.
// 
// 1)
// {"1"}
// 
// Returns: {"1" }
// 
// 2)
// {"???2", "??2", "?2", "2"}
// 
// Returns: {"0002", "002", "02", "2" }
// 
// 3)
// {"??5?", "??9", "?4", "6"}
// 
// Returns: {"7054", "759", "24", "6" }
// 
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

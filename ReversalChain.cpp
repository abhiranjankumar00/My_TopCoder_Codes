#include <bits/stdc++.h>
using namespace std;

class ReversalChain
{
public:
	int minReversal(string init, string goal);
};

int ReversalChain::minReversal (string init, string goal) 
{
	int ret;
	
	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, string p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "\"" << p1 << "\"";
	cout << "]" << endl;
	ReversalChain *obj;
	int answer;
	obj = new ReversalChain();
	clock_t startTime = clock();
	answer = obj->minReversal(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	string p1;
	int p2;
	
	{
	// ----- test 0 -----
	p0 = "1100";
	p1 = "0110";
	p2 = 1;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "111000";
	p1 = "101010";
	p2 = 2;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "0";
	p1 = "1";
	p2 = -1;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "10101";
	p1 = "10101";
	p2 = 0;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "111000111000";
	p1 = "001100110011";
	p2 = 4;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// Given a string, the reversal operation r(i, j) reverses the substring of the string from the i-th character to the j-th character (0-indexed, inclusive).  A reversal chain is a sequence of reversals where the range of each reversal is included in the range of the previous reversal.  Formally, the sequence r(i1, j1), r(i2, j2), ..., r(im, jm) is a reversal chain if i1 <= i2 <= ... <= im, and j1 >= j2 >= ... >= jm.
// 
// 
// You are given a string init which contains only '0' (zero) and '1' (one) characters.  You want to transform this string into the string goal using a reversal chain. Return the minimum possible length of a reversal chain that transforms init into goal. Return -1 if it is impossible.
// 
// 
// DEFINITION
// Class:ReversalChain
// Method:minReversal
// Parameters:string, string
// Returns:int
// Method signature:int minReversal(string init, string goal)
// 
// 
// CONSTRAINTS
// -init will contain between 1 and 50 characters, inclusive.
// -init and goal will contain the same number of characters.
// -Each character of init and goal will be '0' (zero) or '1' (one).
// 
// 
// EXAMPLES
// 
// 0)
// "1100"
// "0110"
// 
// Returns: 1
// 
// r(0, 2) transforms "1100" into "0110".
// 
// 1)
// "111000"
// "101010"
// 
// Returns: 2
// 
// r(1, 4) and r(2, 3) transforms "111000" into "101010".
// 
// 2)
// "0"
// "1"
// 
// Returns: -1
// 
// It is impposible to transform "0" into "1" by a reversal chain.
// 
// 3)
// "10101"
// "10101"
// 
// Returns: 0
// 
// You do not have to do anything.
// 
// 4)
// "111000111000"
// "001100110011"
// 
// Returns: 4
// 
// 
// 
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

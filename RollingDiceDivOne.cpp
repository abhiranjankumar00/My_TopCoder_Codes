#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef string ST;
typedef stringstream SS;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef vector <string> vs;

#define Pf	printf
#define	Sf	scanf

#define	ep	1e-9
#define PI M_PI
#define E M_E

#define	CL(a, b)	memset(a, b, sizeof(a))
#define	mp	make_pair

#define	pb	push_back

#define	all(c)	(c).begin(), (c).end()
#define	tr(i, c)	for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())	//vector & list//

#define forn(i, n)	for(int i = 0, loop_ends_here = (int)n; i < loop_ends_here; i++)
#define forab(i, a, b)	for(int i = a, loop_ends_here = (int) b; i <= loop_ends_here; i++)
#define rep(i, a, b)	for(int i = a, loop_ends_here = (int)b; i>=loop_ends_here; i--)

class RollingDiceDivOne
{
public:
	long long mostLikely(vector <int> dice)
	{
/*
		int64 one = 0, mn = 0, mx = 0;
		
		tr(it, dice) {
			if(*it == 1)
				one++;
			else {
				mn++;
				mx += *it*1ll;
			}
		}
		
		if(mn == 1)
			return one + mn;
		else
			return (mn + mx)/2 + one;
*/

		
		map <int, int> m;
		forab(x, 1, dice[0])
			forab(y, 1, dice[1])
				forab(z, 1, dice[2]) 
					forab(a, 1, dice[3])
						forab(b, 1, dice[4]){
//							if(dice.size() > 2 && dice[0] == 2 && dice[1] == 5 && dice[2] == 11)
//							if(x + y + z == 8)
//								Pf("%d + %d + %d = %d\n", x, y, z, x+y+z);
						m[x+y+z+a+b]++;
				}
		cout << endl;
			
		tr(it, m)
			cout << it->first << " - " << it->second << endl;
					
		double p = 1;
		tr(it, dice)
			p /= *it;

		long long ret;
		
		return ret;

	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, long long p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	RollingDiceDivOne *obj;
	long long answer;
	obj = new RollingDiceDivOne();
	clock_t startTime = clock();
	answer = obj->mostLikely(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	long long p1;
	
	{
	// ----- test 0 -----
	int t0[] = {1,2,3,4,10};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	all_right = KawigiEdit_RunTest(0, p0, false, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Byteasar is playing a tabletop role-playing game with his friends. To determine the effectiveness of their heroes' actions the players use a rather unique set of dice. The i-th (0-based) die has dice[i] faces. They are numbered from 1 to dice[i] and the face number k shows k pips. When a die is cast, every face has equal probability to come out on top.
// 
// 
// Byteasar's hero is now trying to unlock a safe containing treasure.
// In order to see if he succeeds, Byteasar has to guess a number M and then to roll all the dice.
// The safe will open if and only if M is precisely equal to the total number of pips on the topmost faces of all the dice.
// Obviously, the best strategy for Byteasar is to set M equal to the most probable outcome of the dice roll.
// 
// 
// You are given the vector <int> dice. Return the value M such that the probability of the total number of pips being M is the highest possible. If there are multiple such values of M, return the smallest one.
// 
// DEFINITION
// Class:RollingDiceDivOne
// Method:mostLikely
// Parameters:vector <int>
// Returns:long long
// Method signature:long long mostLikely(vector <int> dice)
// 
// 
// NOTES
// -Please note that a die can have as few as one or two faces.
// 
// 
// CONSTRAINTS
// -dice will contain between 1 and 50 elements, inclusive.
// -Each element of dice will be between 1 and 109, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {6, 6, 8}
// 
// Returns: 11
// 
// The probability that the total number of pips on topmost faces of the three dice will be 11 is equal to 1/9.
// 
// 1)
// {10}
// 
// Returns: 1
// 
// You should return the minimum possible answer.
// 
// 2)
// {2, 3, 4, 5}
// 
// Returns: 9
// 
// 
// 
// 3)
// {1, 10, 1}
// 
// Returns: 3
// 
// 
// 
// 4)
// {382828264, 942663792, 291832707, 887961277, 546603677, 545185615, 146267547, 6938117, 167567032, 84232402,
// 700781193, 452172304, 816532384, 951089120, 448136091, 280899512, 256093435, 39595226, 631504901, 154772240}
// 
// Returns: 4366828428
// 
// 
// 
// END KAWIGIEDIT TESTING




//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

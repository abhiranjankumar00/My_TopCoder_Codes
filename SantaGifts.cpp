#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef string ST;
typedef stringstream SS;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef vector <string> vs;

#define Pf	printf
#define	Sf	scanf

#define	ep	1e-9
#define PI M_PI
#define E M_E

#define	CL(a, b)	memset(a, b, sizeof(a))
#define	mp	make_pair

#define	pb	push_back
#define	SZ(a)	int((a).size())

#define	all(c)	(c).begin(), (c).end()
#define	tr(i, c)	for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())	//vector & list//

#define	forn(i, n)	for(int i = 0; i < n; i++)
#define	forab(i, a, b)	for(int i = a; i <= b; i++)
#define	rep(i, a, b)	for(int i = a; i>=b; i--)

class SantaGifts
{
public:
	vector <string> distribute(vector <string> gifts, int N)
	{
		vector <string> ret(N);
		vi cnt(N, 0);
		
		forn(i, gifts.size()){
			if(cnt[i%N] >= 4)	continue;
			cnt[i%N]++;
			if(ret[i%N].length() == 0)
				ret[i%N] = gifts[i];
			else
				ret[i%N] += " " + gifts[i];
		}
		
		return ret;
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, int p1, bool hasAnswer, vector <string> p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	SantaGifts *obj;
	vector <string> answer;
	obj = new SantaGifts();
	clock_t startTime = clock();
	answer = obj->distribute(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p2.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << "\"" << p2[i] << "\"";
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << answer[i] << "\"";
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p2.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p2[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	vector <string> p2;
	
	{
	// ----- test 0 -----
	string t0[] = {"ball","plane","robot","puzzle"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	string t2[] = {"ball puzzle","plane","robot"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"ball","plane","robot","puzzle","bike"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	string t2[] = {"ball plane robot puzzle"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"ball","ball","plane","plane"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	string t2[] = {"ball plane","ball plane"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"ball","plane","robot"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 5;
	string t2[] = {"ball","plane","robot","",""};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Santa Claus has come with a bag full of presents this year.  A group of N kids stand in line, anxious to get their gifts.  Santa Claus takes a present from his bag and gives it to the kid who is currently first in line.  That kid then goes to the end of the line, unless he already has 4 gifts, in which case, he goes home.  This process continues as long as there are presents in the bag and kids in the line.
// 
// 
// You are given a vector <string> gifts containing the presents in Santa's bag, in the order they are given away.  Return a vector <string> containing exactly N elements, where the k-th element is a single space separated list of presents received by the k-th kid, in the order he received them.  Kid 0 is the first kid in the initial lineup, kid 1 is the second kid, etc.
// 
// 
// DEFINITION
// Class:SantaGifts
// Method:distribute
// Parameters:vector <string>, int
// Returns:vector <string>
// Method signature:vector <string> distribute(vector <string> gifts, int N)
// 
// 
// CONSTRAINTS
// -gifts will contain between 1 and 50 elements, inclusive.
// -Each element of gifts will contain between 1 and 10 lowercase letters ('a'-'z'), inclusive.
// -N will be between 1 and 50, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {"ball","plane","robot","puzzle"}
// 3
// 
// Returns: {"ball puzzle", "plane", "robot" }
// 
// The first kid gets a ball, the second one a plane, and the third one a robot.  Then the first kid reaches the front of the line again and gets the last gift.
// 
// 1)
// {"ball","plane","robot","puzzle","bike"}
// 1
// 
// Returns: {"ball plane robot puzzle" }
// 
// There is only one kid, so he will take the first four presents.
// 
// 2)
// {"ball","ball","plane","plane"}
// 2
// 
// Returns: {"ball plane", "ball plane" }
// 
// In this case Santa Claus is fair and gives a ball and a plane to both kids.
// 
// 3)
// {"ball","plane","robot"}
// 5
// 
// Returns: {"ball", "plane", "robot", "", "" }
// 
// Unfortunately, not all the kids will get gifts.
// 
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

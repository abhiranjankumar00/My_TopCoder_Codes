#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef string ST;
typedef stringstream SS;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef vector <string> vs;

#define Pf	printf
#define	Sf	scanf

#define	ep	1e-9
#define PI M_PI
#define E M_E

#define	CL(a, b)	memset(a, b, sizeof(a))
#define	mp	make_pair

#define	pb	push_back
#define	SZ(a)	int((a).size())

#define	all(c)	(c).begin(), (c).end()
#define	tr(i, c)	for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())	//vector & list//

#define	forn(i, n)	for(int i = 0; i < n; i++)
#define	forab(i, a, b)	for(int i = a; i <= b; i++)
#define	rep(i, a, b)	for(int i = a; i>=b; i--)

class SentenceCapitalizerInator
{
public:
	string fixCaps(string par)
	{
		bool t = true;

		forn(i, par.length()) {
			if(t && par[i] != ' ') {
				par[i] = toupper(par[i]);
				t = false;
			}
			if(par[i] == '.')
				t = true;
		}
		
		return par;
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	SentenceCapitalizerInator *obj;
	string answer;
	obj = new SentenceCapitalizerInator();
	clock_t startTime = clock();
	answer = obj->fixCaps(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	string p1;
	
	{
	// ----- test 0 -----
	p0 = "hello programmer. welcome to topcoder.";
	p1 = "Hello programmer. Welcome to topcoder.";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "one.";
	p1 = "One.";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "not really. english. qwertyuio. a. xyz.";
	p1 = "Not really. English. Qwertyuio. A. Xyz.";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "example four. the long fourth example. a. b. c. d.";
	p1 = "Example four. The long fourth example. A. B. C. D.";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// You are given a simple paragraph containing a number of sentences, the original person who wrote the paragraph was in a rush and used only lower case letters ('a'-'z') for the words in the paragraph and did not use any punctuation other than a period to separate sentences. Your task is to fix the capitalization in the paragraph, the objective is to make it so every sentence in the paragraph begins with a capital (upper case) letter ('A'-'Z').
// 
// The paragraph is formatted as one or more sentences separated by single space (' ') characters. Each sentence consists of one or more words separated by single space (' ') characters. The last word in a sentence is always immediately followed by a single dot ('.') character. Each word is a non-empty string containing only lower case letters ('a'-'z'). As an example, consider the following paragraph (quotes for clarity):
// 
// 
// "this is merely an example. be careful. this is a new sentence."
// 
// The result of your program must then be as follows:
// 
// 
// "This is merely an example. Be careful. This is a new sentence."
// 
// 
// 
// 
// 
// 
// 
// 
// DEFINITION
// Class:SentenceCapitalizerInator
// Method:fixCaps
// Parameters:string
// Returns:string
// Method signature:string fixCaps(string paragraph)
// 
// 
// CONSTRAINTS
// -paragraph will contain between 2 and 50 characters, inclusive.
// -Each character in paragraph will be a lower case letter ('a'-'z'), a space (' ') or a dot ('.').
// -The first character of paragraph will be a lower case letter ('a'-'z').
// -The last character of paragraph will be a dot ('.').
// -There will be no two consecutive space characters in paragraph.
// -Every space (' ') character in paragraph will precede a letter.
// -Every '.' character in paragraph except the last one will precede a space character.
// 
// 
// EXAMPLES
// 
// 0)
// "hello programmer. welcome to topcoder."
// 
// Returns: "Hello programmer. Welcome to topcoder."
// 
// 
// 
// 1)
// "one."
// 
// Returns: "One."
// 
// A sentence can consist of just a single word.
// 
// 2)
// "not really. english. qwertyuio. a. xyz."
// 
// Returns: "Not really. English. Qwertyuio. A. Xyz."
// 
// 
// 
// 3)
// "example four. the long fourth example. a. b. c. d."
// 
// Returns: "Example four. The long fourth example. A. B. C. D."
// 
// 
// 
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

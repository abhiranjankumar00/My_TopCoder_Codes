#include <iostream>
#include <ctime>
#include <vector>
#include <list>
#include <queue>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <cassert>
#include <utility>
#include <sstream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <climits>
#include <iterator>
#include <fstream>
using namespace std;

typedef long long 		int64;
typedef vector<int> 		vi;
typedef string 			ST;
typedef stringstream 		SS;
typedef vector< vector<int> > 	vvi;
typedef pair<int,int> 		ii;
typedef vector<string> 		vs;
/*
#if __cplusplus > 199711L	// for g++0x, value of __cplusplus must be greater thana 199711L.
	#define tr(i, c)	for(auto i = begin(c); i != end(c); i++)
#else
	#define tr(i, c)	for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#endif
*/
#define endl		("\n")
#define tr(i, c)	for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define PI		M_PI
#define E 		M_E
#define	eps		1e-9

#define	Sf		scanf
#define	Pf		printf

#define forn(i, n)	for(int i = 0, lets_stop_here = (int)n; i <  lets_stop_here; i++)
#define forab(i, a, b)	for(int i = a, lets_stop_here = (int)b; i <= lets_stop_here; i++)
#define rep(i, a, b)	for(int i = a, lets_stop_here = (int)b; i >= lets_stop_here; i--)

#define	all(c)		(c).begin(), (c).end()
#define	CL(a, b)	memset(a, b, sizeof(a))
#define mp		make_pair
#define pb		push_back

#define	present(x, c)	((c).find(x) != (c).end())	//map & set//
#define	cpresent(x, c)	(find( (c).begin(), (c).end(), x) != (c).end())	//vector & list//

#define read(n)		scanf("%d", &n)
#define write(n)	printf("%d ", n)
#define writeln(n)	printf("%d\n", n)

#if (0 or defined ONLINE_JUDGE)
	#define debug 
#else 
	#define debug(x)	cout << #x << " = " << x << "\n"
#endif

class Shopping
{
public:
	int minNumber(int X, vector <int> values);
};

vi val;
int N;
int possible[1111];
int cnt = 0;

int find(int X) {
	rep(i, val.size()-1, 0)
		if(X - val[i] >= 0)
			return val[i];
	debug(X);
	assert(0);
}

int Shopping::minNumber (int X, vector <int> values) 
{
	sort(all(values));
	if(values[0] != 1)
		return -1;

	val = values;
	CL(possible, 0);
	possible[0] = 1;
	N = values.size();
	cnt = 0;

	forab(c, 1, X) if(!possible[c]){
		cnt++;
		int cur = find(c);
//		Pf("c = %-3d, cur = %-3d \t {", c, cur);
		rep(i, X, 0)	if(i - cur >= 0 && possible[i-cur] == true) {
//			Pf("%d ", i);
			possible[i] = true;
		}
//		Pf("}\n");
	}

	return cnt;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, vector <int> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	Shopping *obj;
	int answer;
	obj = new Shopping();
	clock_t startTime = clock();
	answer = obj->minNumber(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	vector <int> p1;
	int p2;
	
	{
	// ----- test 0 -----
	p0 = 20;
	int t1[] = {1,2,5,10};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 5;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 7;
	int t1[] = {2,4,1,7};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 3;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 20;
	int t1[] = {2,4,6,8};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = -1;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 600;
	int t1[] = {1,2,3,10,11,30};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 25;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// Christmas is coming soon and you still have so many things to buy.  You are going to the store and don't expect to spend more than X dollars.  You want to be able to pay any integer amount not exceeding X dollars, and you want to take as few coins as possible to achieve this. 
// 
// 
// You are given a vector <int> values, each element of which describes the dollar value of a kind of coin.  You have an unlimited supply of each kind of coin.  Return the minimal number of coins you need to take, or -1 if it is impossible to achieve your goal.
// 
// 
// DEFINITION
// Class:Shopping
// Method:minNumber
// Parameters:int, vector <int>
// Returns:int
// Method signature:int minNumber(int X, vector <int> values)
// 
// 
// CONSTRAINTS
// -X will be between 1 and 1000, inclusive.
// -values will contain between 1 and 10 elements, inclusive.
// -Each element of values will be between 1 and 1000, inclusive.
// -The elements in values will be distinct.
// 
// 
// EXAMPLES
// 
// 0)
// 20
// {1, 2, 5, 10}
// 
// Returns: 5
// 
// Taking 5 coins with values {1,2,2,5,10} allows you to pay any integer amount between 1 and 20, inclusive.
// 
// 1)
// 7
// {2, 4, 1, 7}
// 
// Returns: 3
// 
// Here, taking {2,4,1} is enough.
// 
// 2)
// 20
// {2,4,6,8}
// 
// Returns: -1
// 
// These nominals allow you to pay only even amounts.
// 
// 3)
// 600
// {1,2,3,10,11,30}
// 
// Returns: 25
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

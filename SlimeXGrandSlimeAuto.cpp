#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
#include <iterator>
#include <fstream>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef string ST;
typedef stringstream SS;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef vector <string> vs;

#define DEBUG(x)	cout << #x << " = " << x << "\n"
#define endl 		("\n")

#define	ep		1e-9
#define PI		M_PI
#define E 		M_E

#define	CL(a, b)	memset(a, b, sizeof(a))
#define	mp		make_pair
#define	pb		push_back

#define	all(c)		(c).begin(), (c).end()
#define	tr(i, c)	for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())		//vector & list//

#define forn(i, n)	for(int i = 0, loop_ends_here = (int)n; i < loop_ends_here ; i++)
#define forab(i, a, b)	for(int i = a, loop_ends_here = (int)b; i <= loop_ends_here; i++)
#define rep(i, a, b)	for(int i = a, loop_ends_here = (int)b; i >= loop_ends_here; i--)

#define Pf		printf
#define	Sf		scanf

#define read(n)		scanf("%d", &n)
#define write(n)	printf("%d ", n)
#define writeln(n)	printf("%d\n", n)

/*
#ifdef DEBUG
	#undef DEBUG
#endif
#define DEBUG
*/

class SlimeXGrandSlimeAuto
{
public:
	int travel(vector <int> cars, vector <int> districts, vector <string> roads, int inverseWalkSpeed, int inverseDriveSpeed);
};

int SlimeXGrandSlimeAuto::travel (vector <int> cars, vector <int> districts, vector <string> roads, int inverseWalkSpeed, int inverseDriveSpeed) 
{
	int ret;
	
	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, vector <string> p2, int p3, int p4, bool hasAnswer, int p5) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p2[i] << "\"";
	}
	cout << "}" << "," << p3 << "," << p4;
	cout << "]" << endl;
	SlimeXGrandSlimeAuto *obj;
	int answer;
	obj = new SlimeXGrandSlimeAuto();
	clock_t startTime = clock();
	answer = obj->travel(p0, p1, p2, p3, p4);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p5 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p5;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <int> p1;
	vector <string> p2;
	int p3;
	int p4;
	int p5;
	
	{
	// ----- test 0 -----
	int t0[] = {1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {2,3,0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"..0.","...1","0..2",".12."};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 5;
	p4 = 1;
	p5 = 36;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {2,0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {".A.","A.B",".B."};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 2;
	p4 = 1;
	p5 = 262;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {2,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,2,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {".a4","a..","4.."};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 3;
	p4 = 1;
	p5 = 95;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {2,0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {".B.","B.A",".A."};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 2;
	p4 = 1;
	p5 = 262;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {2,5,1,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,5,1,2,4};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {".12.4.","1....7","2..3..","..3..5","4.....",".7.5.."};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 53;
	p4 = 37;
	p5 = 1259;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// NOTE: This problem statement contains images that may not display properly if viewed outside of the applet.
// 
// 
// You are playing a game titled Grand Slime Auto. You're playing as a mafioso in Slime City.
// 
// 
// Slime City consists of N districts, numbered 0 through N-1, with some bidirectional roads connecting pairs of districts. There are also some cars in the city. The i-th car is located in district cars[i]. Note that there may be multiple cars in a district.
// 
// 
// Today, you're going to collect protection money from several shops. You've decided on the order in which you want to collect the money. This order is given in the vector <int> districts. You will first collect money from a shop in district districts[0]. You will then collect money from a shop in district districts[1], and so on. The same district might appear multiple times in your list. You are initially located in district 0.
// 
// 
// You have two modes of transportation in Slime City: walking and driving. The time required to traverse a road by walking is inverseWalkSpeed * the length of the road. The time required to traverse a road by car is inverseDriveSpeed * the length of the road. When you're located in a district that contains a car, you can steal that car and drive it wherever you want. However, the rate of car theft in Slime City is so high that the moment you step out of the car, it will be stolen and you won't be able to use it again. Note that you must get out of the car in order to collect money from a shop.
// 
// 
// The roads in Slime City are described in the vector <string> roads, which contains N elements. The j-th character of the i-th element of roads will be one of these :
// 
// '.' : no road connects districts i and j
// Otherwise, a road connects districts i and j, and its length corresponds to character roads[i][j]:
// 
// '0'-'9' : 1-10
// 'a'-'z' : 11-36
// 'A'-'Z' : 37-62
// 
// 
// 
// Assuming that collecting money takes no time, return the minimum time required to collect all the money from the shops.
// 
// DEFINITION
// Class:SlimeXGrandSlimeAuto
// Method:travel
// Parameters:vector <int>, vector <int>, vector <string>, int, int
// Returns:int
// Method signature:int travel(vector <int> cars, vector <int> districts, vector <string> roads, int inverseWalkSpeed, int inverseDriveSpeed)
// 
// 
// CONSTRAINTS
// -cars will contain between 1 and 50 elements, inclusive.
// -Each element of cars will be between 0 and N-1, inclusive, where N is the number of elements in roads.
// -districts will contain between 1 and 50 elements, inclusive.
// -Each element of districts will be between 0 and N-1, inclusive, where N is the number of elements in roads.
// -No two consecutive elements in districts will be equal.
// -districts[0] will not be 0.
// -roads will contain between 2 and 50 elements, inclusive.
// -Each element of roads will contain N characters, where N is the number of elements in roads.
// -Each character in roads will be '.', 'a'-'z', 'A'-'Z', or '0'-'9'.
// -The j-th character of the i-th element of roads will be the same as the i-th character of the j-th element of roads.
// -The i-th character of the i-th element of roads will be '.'.
// -Slime City will be connected, i.e., it will be possible to go from a district to any other district through a series of roads.
// -inverseWalkSpeed will be between 2 and 100, inclusive.
// -inverseDriveSpeed will be between 1 and 99, inclusive.
// -inverseWalkSpeed will be strictly greater than inverseDriveSpeed.
// 
// 
// EXAMPLES
// 
// 0)
// {1}
// {2,3,0}
// {
// "..0.",
// "...1",
// "0..2",
// ".12."}
// 5
// 1
// 
// Returns: 36
// 
// From district 0, walk to district 2 and collect money there. From district 2, walk to district 3 and collect money there. Now walk to district 1 and drive the car to district 0. Get out of the car and collect money there. The total time spent is 5 * 1 + 5 * 3 + 5 * 2 + 1 * 2 + 1 * 3 + 1 * 1 = 36.
// 
// 
// 1)
// {1}
// {2, 0}
// {
// ".A.",
// "A.B",
// ".B."}
// 2
// 1
// 
// Returns: 262
// 
// From district 0, walk to district 1. Drive the car there to district 2. Get out of the car and collect money there. Then, walk from district 2 to district 1 to district 0. Finally, collect money there. The total time is : 37 * 2 + 38 * 1 + 38 * 2 + 37 * 2 = 262.
// 
// 
// 
// 2)
// {2,2}
// {1,2,1}
// {
// ".a4",
// "a..",
// "4.."}
// 3
// 1
// 
// Returns: 95
// 
// There may be multiple cars in a district, and you may wish to collect money from a district multiple times.
// 
// 3)
// {1}
// {2, 0}
// {
// ".B.",
// "B.A",
// ".A."}
// 2
// 1
// 
// Returns: 262
// 
// 
// 
// 4)
// {2,5,1,2}
// {1,5,1,2,4}
// {
// ".12.4.",
// "1....7",
// "2..3..",
// "..3..5",
// "4.....",
// ".7.5.."}
// 
// 53
// 37
// 
// Returns: 1259
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

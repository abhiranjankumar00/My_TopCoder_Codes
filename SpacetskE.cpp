#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef string ST;
typedef stringstream SS;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef vector <string> vs;

#define endl 		("\n")
#define DEBUG(x)	cout << #x << " = " << x << "\n"
#define Pf		printf
#define	Sf		scanf

#define	ep		1e-9
#define PI		M_PI
#define E 		M_E

#define	CL(a, b)	memset(a, b, sizeof(a))
#define	mp		make_pair
#define	pb		push_back

#define	all(c)		(c).begin(), (c).end()
#define	tr(i, c)	for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())		//vector & list//

#define forn(i, n)	for(int i = 0, loop_ends_here = (int)n; i < loop_ends_here ; i++)
#define forab(i, a, b)	for(int i = a, loop_ends_here = (int)b; i <= loop_ends_here; i++)
#define rep(i, a, b)	for(int i = a, loop_ends_here = (int)b; i >= loop_ends_here; i--)

#define read(n)		scanf("%d", &n)
#define write(n)	printf("%d ", n)
#define writeln(n)	printf("%d\n", n)

class SpacetskE
{
public:
	int64 nCr[255][255];
	int countsets(int L, int H, int K);
};

const int64 mod = 1000000007ll;
int64 ret;
bool vis[255][255];
int L, H, K;

int count(int x, int y, int dx, int dy) {
	if(x < 0 || x > L || y < 0 || y > H)
		return 0;
	if(vis[x][y] == true)
		return 0;
	
	vis[x][y] = true;

	return 1 + count( x + dx, y + dy, dx, dy);
}

int SpacetskE::countsets (int L, int H, int K) 
{
	if(K == 1)
		return ((L+1ll) * (H + 1ll)) % mod;
	::L = L, ::H = H, ::K = K;
	forn(i, 255)	nCr[i][0] = nCr[i][i] = 1;
	forn(i, 255)
		forab(j, 1, i-1)
			nCr[i][j] = (nCr[i-1][j-1] + nCr[i-1][j]) % mod;
	ret = 0ll;

	forn(x0, L+1) {
		CL(vis, 0);
		forab(y, 1, H)
			forab(x, 0, L)
				if (!vis[x][y]) {
					int cnt = 1 + count(x, y, x - x0, y);
					if(cnt >= K)
						ret = (ret + nCr[cnt][K]) % mod;
				}	
	}
	
	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2;
	cout << "]" << endl;
	SpacetskE *obj;
	int answer;
	obj = new SpacetskE();
	clock_t startTime = clock();
	answer = obj->countsets(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	int p3;
	
	{
	// ----- test 0 -----
	p0 = 1;
	p1 = 1;
	p2 = 2;
	p3 = 4;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 1;
	p1 = 1;
	p2 = 1;
	p3 = 4;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 2;
	p1 = 2;
	p2 = 1;
	p3 = 9;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 2;
	p1 = 2;
	p2 = 2;
	p3 = 23;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 5;
	p1 = 5;
	p2 = 3;
	p3 = 202;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 70;
	p1 = 52;
	p2 = 18;
	p3 = 296314116;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// The spaceport is a horizontal segment of length L.
// We are planning to launch a rocket from the spaceport.
// The rocket must fly in a straight line.
// The line does not have to be orthogonal to the spaceport, but it must lie in the vertical plane that contains the spaceport.
// The line is not allowed to be strictly horizontal.
// 
// 
// Each point in the vertical plane has two coordinates:
// the x-coordinate is the horizontal distance from the left end of the spaceport, and the y-coordinate is the altitude above the spaceport.
// Points for with both coordinates are integers are called grid points.
// 
// 
// The rocket has to be launched from a grid point on the spaceport.
// Moreover, after the launch the rocket must send exactly K signals.
// A signal can only be sent when the rocket is at a grid point above the spaceport, and its altitude does not exceed H.
// 
// 
// Formally:
// The rocket starts from one of the points (x,0), where 0 <= x <= L and x is an integer.
// The rocket may send a signal if it is at one of the points (x,y), where 0 <= x <= L, 0 <= y <= H, and x and y are both integers.
// The rocket may only send at most one signal at each grid point it passes through.
// 
// 
// 
// 
// 
// The picture above shows two different test cases.
// The grid on the left corresponds to L=9, H=7, and K=2.
// Each of the six colors shows one pair of signals you could observe during the launch.
// The small grids on the right show all four possibilities for L=1, H=1, and K=2.
// 
// 
// You are given the ints L, H, and K.
// Count how many different sets of signals are possible during the launch.
// Return the answer modulo 1,000,000,007.
// 
// DEFINITION
// Class:SpacetskE
// Method:countsets
// Parameters:int, int, int
// Returns:int
// Method signature:int countsets(int L, int H, int K)
// 
// 
// CONSTRAINTS
// -L will be between 1 and 200, inclusive.
// -H will be between 1 and 200, inclusive.
// -K will be between 1 and 200, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 1
// 1
// 2
// 
// Returns: 4
// 
// Example from the statement.
// 
// 1)
// 1
// 1
// 1
// 
// Returns: 4
// 
// 2)
// 2
// 2
// 1
// 
// Returns: 9
// 
// 3)
// 2
// 2
// 2
// 
// Returns: 23
// 
// 4)
// 5
// 5
// 3
// 
// Returns: 202
// 
// 5)
// 70
// 52
// 18
// 
// Returns: 296314116
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

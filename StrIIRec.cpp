#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef string ST;
typedef stringstream SS;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef vector <string> vs;

#define endl 		("\n")
#define DEBUG(x)	cout << #x << " = " << x << "\n"
#define Pf		printf
#define	Sf		scanf

#define	ep		1e-9
#define PI		M_PI
#define E 		M_E

#define	CL(a, b)	memset(a, b, sizeof(a))
#define	mp		make_pair
#define	pb		push_back

#define	all(c)		(c).begin(), (c).end()
#define	tr(i, c)	for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())		//vector & list//

#define forn(i, n)	for(int i = 0, loop_ends_here = (int)n; i < loop_ends_here ; i++)
#define forab(i, a, b)	for(int i = a, loop_ends_here = (int)b; i <= loop_ends_here; i++)
#define rep(i, a, b)	for(int i = a, loop_ends_here = (int)b; i >= loop_ends_here; i--)

#define read(n)		scanf("%d", &n)
#define write(n)	printf("%d ", n)
#define writeln(n)	printf("%d\n", n)

class StrIIRec
{
public:
	string recovstr(int n, int minInv, string minStr);
};

int countInv(ST st) {
	int ret = 0;
	forn(i, st.size()) 
		forab(j, i+1, st.size() - 1)
			if(st[j] < st[i])
				ret++;
	return ret;
}

string StrIIRec::recovstr (int n, int minInv, string minStr) 
{
	string ret = minStr;
	forn(i, n)
		if(!cpresent(char(i+'a'), minStr))
			ret += char(i + 'a');

//	if(countInv(ret) >= minInv)
//		return ret;


	DEBUG(ret);
	sort(all(ret));
	reverse(all(ret));

	ST st = "abcde";

	map <int, vs> m;

	do {
//		cout << st << " " << countInv(st) <<  endl;
		m[countInv(st)].pb(st);
	}while(next_permutation(all(st)));
	cout << endl << endl;

	tr(it, m) {
		cout << it-> first << ": ";
		tr(jt, it->second)
			cout << *jt << ", ";
		cout << endl;
		cout << endl;
	}
	
	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, string p2, bool hasAnswer, string p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << "\"" << p2 << "\"";
	cout << "]" << endl;
	StrIIRec *obj;
	string answer;
	obj = new StrIIRec();
	clock_t startTime = clock();
	answer = obj->recovstr(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p3 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	string p2;
	string p3;
	
	{
	// ----- test 0 -----
	p0 = 2;
	p1 = 1;
	p2 = "ab";
	p3 = "ba";
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// For a given string S of length n an inversion is a pair of integers (i, j) such that 0 <= i < j <= n-1 and S[i] > S[j]. (That is, the character at 0-based index i is greater than the character at 0-based index j.) For example, the string "abcab" has 3 inversions: (1, 3), (2, 3), and (2, 4).
// 
// Given are ints n and minInv, and a string minStr.
// We will consider all strings that are permutations of the first n lowercase English letters.
// That is, these strings have length n and contain each of the first n letters exactly once.
// Out of these strings, return the lexicographically smallest string R with the following two properties:
// 
// The number of inversions in R is at least minInv.
// The string R is not lexicographically smaller than minStr.
// 
// If there is no such string, return an empty string instead.
// 
// 
// DEFINITION
// Class:StrIIRec
// Method:recovstr
// Parameters:int, int, string
// Returns:string
// Method signature:string recovstr(int n, int minInv, string minStr)
// 
// 
// NOTES
// -A string A is lexicographically smaller than a string B if A is a prefix of B or A contains a smaller character at the first position where the strings differ.
// 
// 
// CONSTRAINTS
// -n will be between 1 and 20, inclusive.
// -minInv will be between 0 and n*(n-1)/2, inclusive.
// -minStr will contain between 1 and n characters, inclusive.
// -Each character in minStr will be one of the first n lowercase Latin letters.
// -All characters in minStr will be unique.
// 
// 
// EXAMPLES
// 
// 0)
// 2
// 1
// "ab"
// 
// Returns: "ba"
// 
// You must find the lexicographically smallest string that has at least 1 inversion and is not lexicographically smaller than "ab".
// 
// 1)
// 9
// 1
// "efcdgab"
// 
// Returns: "efcdgabhi"
// 
// 2)
// 11
// 55
// "debgikjfc"
// 
// Returns: "kjihgfedcba"
// 
// "kjihgfedcba" is the only string that has at least 55 inversions.
// 
// 3)
// 15
// 0
// "e"
// 
// Returns: "eabcdfghijklmno"
// 
// 4)
// 9
// 20
// "fcdebiha"
// 
// Returns: "fcdehigba"
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

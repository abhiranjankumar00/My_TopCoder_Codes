#include <iostream>
#include <ctime>
#include <vector>
#include <list>
#include <queue>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <cassert>
#include <utility>
#include <sstream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <climits>
#include <iterator>
#include <fstream>
using namespace std;

typedef long long 		int64;
typedef vector<int> 		vi;
typedef string 			ST;
typedef stringstream 		SS;
typedef vector< vector<int> > 	vvi;
typedef pair<int,int> 		ii;
typedef vector<string> 		vs;
/*
#if __cplusplus > 199711L	// for g++0x, value of __cplusplus must be greater thana 199711L.
	#define tr(i, c)	for(auto i = begin(c); i != end(c); i++)
#else
	#define tr(i, c)	for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#endif
*/
#define endl		("\n")
#define tr(i, c)	for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define PI		M_PI
#define E 		M_E
#define	eps		1e-9

#define	Sf		scanf
#define	Pf		printf

#define forn(i, n)	for(int i = 0, lets_stop_here = (int)n; i <  lets_stop_here; i++)
#define forab(i, a, b)	for(int i = a, lets_stop_here = (int)b; i <= lets_stop_here; i++)
#define rep(i, a, b)	for(int i = a, lets_stop_here = (int)b; i >= lets_stop_here; i--)

#define	all(c)		(c).begin(), (c).end()
#define	CL(a, b)	memset(a, b, sizeof(a))
#define mp		make_pair
#define pb		push_back

#define	present(x, c)	((c).find(x) != (c).end())	//map & set//
#define	cpresent(x, c)	(find( (c).begin(), (c).end(), x) != (c).end())	//vector & list//

#define read(n)		scanf("%d", &n)
#define write(n)	printf("%d ", n)
#define writeln(n)	printf("%d\n", n)

#if (0 or defined ONLINE_JUDGE)
	#define DEBUG
#else 
	#define DEBUG(x)	cout << #x << " = " << x << "\n"
#endif

class StringFragmentation
{
public:
	int largestFontSize(string text, int width, int height);
};

int StringFragmentation::largestFontSize (string text, int width, int height) 
{
	int ret;
	
	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, int p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << p1 << "," << p2;
	cout << "]" << endl;
	StringFragmentation *obj;
	int answer;
	obj = new StringFragmentation();
	clock_t startTime = clock();
	answer = obj->largestFontSize(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	int p1;
	int p2;
	int p3;
	
	{
	// ----- test 0 -----
	p0 = "ONE TWO THREE FOUR FIVE";
	p1 = 150;
	p2 = 40;
	p3 = 9;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "ONE TWO THREE FOUR FIVE";
	p1 = 150;
	p2 = 60;
	p3 = 10;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "ONE TWO THREE FOUR FIVE";
	p1 = 150;
	p2 = 10000;
	p3 = 28;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "ONE TWO THREE FOUR FIVE";
	p1 = 10000;
	p2 = 10000;
	p3 = 1250;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "ONE TWO THREE FOUR FIVE";
	p1 = 50;
	p2 = 50;
	p3 = -1;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = "A";
	p1 = 9;
	p2 = 14;
	p3 = -1;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// You are given a string containing a list of words separated by single spaces, with no leading or trailing spaces. You have a panel on which you would like to write these words, in order, possibly over multiple lines. The words must go from left to right within each line, and the lines must go from top to bottom. Each line must contain only complete words, and each pair of adjacent words in a line must be separated by a single space. There must be no leading or trailing spaces.
// 
// You must write the words in a font size greater than 7. In a font of size N, the height of each letter is 2*N pixels, and the width of each character (letters and spaces) is N+2 pixels. There is no space between adjacent characters and adjacent lines.
// 
// You are given a string text containing the words you must write. The dimensions of the panel in pixels are given in the ints width and height. You are not allowed to rotate the panel. Return the largest integer font size strictly greater than 7 that you can use to write the words on the panel, or -1 if it is impossible.
// 
// DEFINITION
// Class:StringFragmentation
// Method:largestFontSize
// Parameters:string, int, int
// Returns:int
// Method signature:int largestFontSize(string text, int width, int height)
// 
// 
// NOTES
// -If you start a new line between two words, then the space that separated them in the input doesn't get written to the panel.
// 
// 
// CONSTRAINTS
// -text will contain between 1 and 50 characters, inclusive.
// -Each character in text will be an uppercase letter ('A'-'Z') or a space (' ').
// -text must be a list of words separated by single spaces, with no leading or trailing spaces, where each word is one or more uppercase letters.
// -width and height will be between 1 and 10000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// "ONE TWO THREE FOUR FIVE"
// 150
// 40
// 
// Returns: 9
// 
// With a font size of 9, we can write "ONE TWO THREE" on the first line and "FOUR FIVE" on the second line.
// The width of the first line is 13 characters * (9+2) pixels = 143 pixels.
// The width of the second line is 9 characters * (9+2) pixels = 99 pixels.
// The total height is 2 lines * (2*9) pixels = 36 pixels.
// The total size is therefore 143 x 36 pixels, which fits inside the 150 x 40 pixel panel.
// If you used a font size of 10, it would be 156 x 40 pixels, which would not fit.
// 
// 1)
// "ONE TWO THREE FOUR FIVE"
// 150
// 60
// 
// Returns: 10
// 
// Now we can write it in a font size of 10 by separating the text into three lines: "ONE TWO", "THREE", "FOUR FIVE".
// 
// 2)
// "ONE TWO THREE FOUR FIVE"
// 150
// 10000
// 
// Returns: 28
// 
// If you write each word on a separate line, you can use a font size of 28. The widest line would be "THREE", which is 150 pixels wide.
// 
// 3)
// "ONE TWO THREE FOUR FIVE"
// 10000
// 10000
// 
// Returns: 1250
// 
// 
// 
// 4)
// "ONE TWO THREE FOUR FIVE"
// 50
// 50
// 
// Returns: -1
// 
// 
// 
// 5)
// "A"
// 9
// 14
// 
// Returns: -1
// 
// Note that font size must be strictly greater than 7.
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

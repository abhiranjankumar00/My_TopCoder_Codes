#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef string ST;
typedef stringstream SS;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef vector <string> vs;

#define Pf	printf
#define	Sf	scanf

#define	ep	1e-9
#define PI M_PI
#define E M_E

#define	CL(a, b)	memset(a, b, sizeof(a))
#define	mp	make_pair

#define	pb	push_back

#define	all(c)	(c).begin(), (c).end()
#define	tr(i, c)	for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())	//vector & list//

#define forn(i, n)	for(int i = 0, loop_ends_here = (int)n; i < loop_ends_here; i++)
#define forab(i, a, b)	for(int i = a, loop_ends_here = (int) b; i <= loop_ends_here; i++)
#define rep(i, a, b)	for(int i = a, loop_ends_here = (int)b; i>=loop_ends_here; i--)

#define read(n)		scanf("%d", &n)
#define write(n)	printf("%d ", n)
#define writeln(n)	printf("%d\n", n)

class StripePainter
{
public:
	int minStrokes(string stripes);
};

int N;
int dp[55][55];
string st;

const int inf = 1e4;
int solve(int l, int r) {
	assert(l <= r);
	
	int &ret = dp[l][r];
	if(ret > -1)
		return ret;
	
	ret = r - l + 1;
	
	if(l == r)
		 return ret = 1;
		 
	if(st[l] == st[l+1])
		ret = min(ret, solve(l+1, r));
	else
		ret = min(ret, solve(l+1, r) + 1);
		
	if(st[r] == st[r-1])
		ret = min(ret, solve(l, r-1));
	else
		ret = min(ret, solve(l, r-1) + 1);
	
	if(r - 1 >= l + 1) {
		if(st[r-1] == st[l+1] && st[r] == st[r-1] && st[l] == st[l+1])
			ret = min(ret, solve(l+1, r-1));
		else if(st[r] == st[l])
			ret = min(ret, solve(l+1, r-1) + 1);
		else if (st[l] != st[r])
			ret = min(ret, solve(l+1, r-1) + 2);
	}
	
	return ret;
}

int StripePainter::minStrokes (string stripes) 
{
	N = stripes.size();
	st = stripes;
	CL(dp, -1);
	
	return solve(0, N-1);
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	StripePainter *obj;
	int answer;
	obj = new StripePainter();
	clock_t startTime = clock();
	answer = obj->minStrokes(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	int p1;
	
	{
	// ----- test 0 -----
	p0 = "RGBGR";
	p1 = 3;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "RGRG";
	p1 = 3;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "ABACADA";
	p1 = 4;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "AABBCCDDCCBBAABBCCDD";
	p1 = 7;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "BECBBDDEEBABDCADEAAEABCACBDBEECDEDEACACCBEDABEDADD";
	p1 = 26;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// Karel is a frustrated painter who works by day in an electrical repair
// shop.  Inspired by the color-coded bands on resistors, he is painting
// a series of long, narrow canvases with bold colored stripes.  However, 
// Karel is lazy and wants to minimize the number of brush strokes it takes 
// to paint each canvas.
// 
// 
// 
// Abbreviating each color to a single uppercase letter, Karel would
// write the stripe pattern red-green-blue-green-red as "RGBGR" 
// (quotes added for clarity).  It would take him three brush strokes to
// paint this pattern.
// The first stroke would cover the entire canvas in red (RRRRR).
// The second stroke would leave a band of red on either side and fill
// in the rest with green (RGGGR).
// The final brush stroke would fill in the blue stripe in the center
// (RGBGR).
// 
// 
// 
// Given a stripe pattern stripes as a string, calculate the minimum number of
// brush strokes required to paint that pattern.
// 
// 
// DEFINITION
// Class:StripePainter
// Method:minStrokes
// Parameters:string
// Returns:int
// Method signature:int minStrokes(string stripes)
// 
// 
// NOTES
// -The blank canvas is an ugly color and must not show through.
// 
// 
// CONSTRAINTS
// -stripes will contain only uppercase letters ('A'-'Z', inclusive).
// -stripes will contain between 1 and 50 characters, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// "RGBGR"
// 
// Returns: 3
// 
// Example from introduction.
// 
// 1)
// "RGRG"
// 
// Returns: 3
// 
// This example cannot be done in two strokes, even though there are only two colors.
// Suppose you tried to paint both red stripes in one stroke, followed by both green stripes 
// in one stroke.  Then the green stroke would cover up the second red stripe.  If you tried
// to paint both green stripes first, followed the red stripes, then the red stroke would
// cover up the first green stripe.
// 
// 2)
// "ABACADA"
// 
// Returns: 4
// 
// One long stroke in color 'A', followed by one stroke each in colors 'B', 'C', and 'D'.
// 
// 3)
// "AABBCCDDCCBBAABBCCDD"
// 
// Returns: 7
// 
// 4)
// "BECBBDDEEBABDCADEAAEABCACBDBEECDEDEACACCBEDABEDADD"
// 
// Returns: 26
// 
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef string ST;
typedef stringstream SS;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef vector <string> vs;

#define endl 		("\n")
#define DEBUG(x)	cout << #x << " = " << x << "\n"
#define Pf		printf
#define	Sf		scanf

#define	ep		1e-9
#define PI		M_PI
#define E 		M_E

#define	CL(a, b)	memset(a, b, sizeof(a))
#define	mp		make_pair
#define	pb		push_back

#define	all(c)		(c).begin(), (c).end()
#define	tr(i, c)	for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())		//vector & list//

#define forn(i, n)	for(int i = 0, loop_ends_here = (int)n; i < loop_ends_here ; i++)
#define forab(i, a, b)	for(int i = a, loop_ends_here = (int)b; i <= loop_ends_here; i++)
#define rep(i, a, b)	for(int i = a, loop_ends_here = (int)b; i >= loop_ends_here; i--)

#define read(n)		scanf("%d", &n)
#define write(n)	printf("%d ", n)
#define writeln(n)	printf("%d\n", n)

class Suminator
{
public:
	int findMissing(vector <int> program, int wantedResult);
};

vector <int64> prog;
int64 W;
int idx;

int64 pop(stack<int64> &s) {
	if(s.size() == 0)
		return 0;
	int64 ret = s.top();
	s.pop();
	return ret;
}

//bool check(const vector <int64> v) {
int64 check() {
	stack <int64> st;

	tr(it, prog) {
		if(*it == 0) {
			int64 a= pop(st);
			int64 b = pop(st);
			st.push(a+b);
		}
		else
			st.push(*it);
	}
	return pop(st);

}

int binarySearch(int64 low = 1, int64 high = 1e10) {
	if(low == high) {
		prog[idx] = low;
		return check() == W ? low : -1;
	}

//	Pf("low = %lld, high = %lld\n", low, high);

	int64 mid = (low + high)/2;
	prog[idx] = mid;

	if(check() >= W)
		return binarySearch(low, mid);
	else
		return binarySearch(mid+1, high);

}

int Suminator::findMissing (vector <int> program, int wantedResult) 
{
	forn(i, program.size())	if(program[i] == -1)
		idx = i;

	prog.clear();
	tr(it, program)
		prog.pb((*it)*1ll);
	prog[idx] = 0;

	W = wantedResult;
	
	cout << check() << endl;

	if(check() == W)
		return 0;

	return binarySearch();
	
	return -1;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	Suminator *obj;
	int answer;
	obj = new Suminator();
	clock_t startTime = clock();
	answer = obj->findMissing(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	int t0[] = {7,-1,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 7;
	p2 = 0;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {100,200,300,0,100,-1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 600;
	p2 = 0;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {-1,7,3,0,1,2,0,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 13;
	p2 = 0;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {-1,8,4,0,1,2,0,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 16;
	p2 = -1;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {1000000000,1000000000,1000000000,1000000000,-1,0,0,0,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1000000000;
	p2 = -1;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	int t0[] = {7,-1,3,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	p2 = -1;
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	int t0[] = {1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 12345678;
	all_right = KawigiEdit_RunTest(6, p0, p1, false, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Suminator is a very limited programming language.
// A program in this language is simply a sequence of nonnegative integers.
// The program is evaluated using a stack of nonnegative integers.
// Initially, the stack is empty.
// Trying to pop an element from an empty stack returns a zero.
// (Alternately, you can imagine that the stack already contains a sufficient number of zeros in the beginning.)
// 
// A Suminator program is evaluated using the following algorithm:
// 
// for i = 0 to length(program) - 1 {
//     if ( program[i] is 0) {
//          Pop the top two elements from the stack, add them together
//          and push the result to the top of the stack.
//     } else {
//          Push program[i] to the top of the stack.
//     }
// }
// Pop the top element of the stack and print it.
// 
// For example, when executing the program {1}, we first push the 1 to the stack, and then we print it. 
// When executing the program {5,0,1,2,0}, we take the following steps:
// 
// We push the 5 to the top of the stack.
// We pop the top two elements (5 and 0), add them together and push the result (5).
// We push the 1 to the top of the stack.
// We push the 2 to the top of the stack. At this moment, the stack contains the values 5, 1, and 2 (from bottom to top).
// We pop the top two elements (2 and 1), add them together and push the result (3).
// We print the top element of the stack: the number 3. Note that the stack also contains the value 5, which is ignored.
// 
// 
// You are given a vector <int> program containing a Suminator program (a sequence of nonnegative integers), in which one of the elements of the sequence was changed to -1.
// You are also given a int wantedResult.
// Your task is to change the -1 back to a nonnegative integer X in such a way that the resulting program prints the number wantedResult.
// Return X.
// If there are multiple possible values of X, return the smallest one.
// If there is no way to make the program print wantedResult, return -1 instead.
// 
// DEFINITION
// Class:Suminator
// Method:findMissing
// Parameters:vector <int>, int
// Returns:int
// Method signature:int findMissing(vector <int> program, int wantedResult)
// 
// 
// NOTES
// -The return value always fits into an int. This follows from the constraints and the nature of the problem.
// 
// 
// CONSTRAINTS
// -program will contain between 1 and 50 elements, inclusive.
// -Each element of program will be between -1 and 1000000000 (10^9), inclusive.
// -program will contain -1 exactly once.
// -wantedResult will be between 1 and 1000000000 (10^9), inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {7,-1,0}
// 10
// 
// Returns: 3
// 
// 
// 
// 1)
// {100, 200, 300, 0, 100, -1}
// 600
// 
// Returns: 0
// 
// 
// 
// 2)
// {-1, 7, 3, 0, 1, 2, 0, 0}
// 13
// 
// Returns: 0
// 
// We can replace the first element with many other values, but 0 is the smallest that achieves the wanted result.
// 
// 3)
// {-1, 8, 4, 0, 1, 2, 0, 0}
// 16
// 
// Returns: -1
// 
// It does not matter what value we use in the first element of the array, the result will always be 15.
// 
// 4)
// {1000000000, 1000000000, 1000000000,  1000000000, -1, 0, 0, 0, 0}
// 1000000000
// 
// Returns: -1
// 
// It does not matter what we replace the -1 with, the result will be larger than 1000000000.
// 
// 5)
// {7, -1, 3, 0}
// 3
// 
// Returns: -1
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

#include <iostream>
#include <ctime>
#include <vector>
#include <list>
#include <queue>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <cassert>
#include <utility>
#include <sstream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <climits>
#include <iterator>
#include <fstream>
using namespace std;

typedef long long 		int64;
typedef vector<int> 		vi;
typedef string 			ST;
typedef stringstream 		SS;
typedef vector< vector<int> > 	vvi;
typedef pair<int,int> 		ii;
typedef vector<string> 		vs;
/*
#if __cplusplus > 199711L	// for g++0x, value of __cplusplus must be greater thana 199711L.
	#define tr(i, c)	for(auto i = begin(c); i != end(c); i++)
#else
	#define tr(i, c)	for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#endif
*/
#define endl		("\n")
#define tr(i, c)	for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define PI		M_PI
#define E 		M_E
#define	eps		1e-9

#define	Sf		scanf
#define	Pf		printf

#define forn(i, n)	for(int i = 0, lets_stop_here = (int)n; i <  lets_stop_here; i++)
#define forab(i, a, b)	for(int i = a, lets_stop_here = (int)b; i <= lets_stop_here; i++)
#define rep(i, a, b)	for(int i = a, lets_stop_here = (int)b; i >= lets_stop_here; i--)

#define	all(c)		(c).begin(), (c).end()
#define	CL(a, b)	memset(a, b, sizeof(a))
#define mp		make_pair
#define pb		push_back

#define	present(x, c)	((c).find(x) != (c).end())	//map & set//
#define	cpresent(x, c)	(find( (c).begin(), (c).end(), x) != (c).end())	//vector & list//

#define read(n)		scanf("%d", &n)
#define write(n)	printf("%d ", n)
#define writeln(n)	printf("%d\n", n)

#if (0 or defined ONLINE_JUDGE)
	#define DEBUG
#else 
	#define DEBUG(x)	cout << #x << " = " << x << "\n"
#endif

class SumsOfPerfectPowers
{
public:
	int howMany(int lowerBound, int upperBound);
};

const int sz = 5e6 + 111;
bool isGood[sz];
int SumsOfPerfectPowers::howMany (int _lowerBound, int _upperBound) 
{
	int64 lowerBound = _lowerBound;
	int64 upperBound = _upperBound;
	DEBUG(lowerBound);
	DEBUG(upperBound);

	CL(isGood, 0);
	isGood[0] = isGood[1] = true;

	for(int64 i = 2; i*i < sz; i++) {
		for(int64 j = i*i; j < sz; j*=i)
			isGood[j] = true;
	}

	vector <int64> arr;
	forn(i, sz)
		if(isGood[i])
			arr.pb(i);
	DEBUG(arr.size());

	tr(it, arr)
		tr(jt, arr)
			if(*it + *jt >= lowerBound && *it + *jt <= upperBound)
				isGood[*it + *jt] = true;

	int ans = 0;
	forab(i, lowerBound, upperBound)	if(isGood[i]) {
		ans++;
	}

	return ans;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	SumsOfPerfectPowers *obj;
	int answer;
	obj = new SumsOfPerfectPowers();
	clock_t startTime = clock();
	answer = obj->howMany(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	p0 = 1;
	p1 = 100;
	all_right = KawigiEdit_RunTest(0, p0, p1, false, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// A non-negative integer n is said to be a sum of two perfect powers if there exist two non-negative integers a and b such that am + bk = n for some positive integers m and k, both greater than 1. Given two non-negative integers lowerBound and upperBound, return the number of integers between lowerBound and upperBound, inclusive, that are sums of two perfect powers.
// 
// DEFINITION
// Class:SumsOfPerfectPowers
// Method:howMany
// Parameters:int, int
// Returns:int
// Method signature:int howMany(int lowerBound, int upperBound)
// 
// 
// CONSTRAINTS
// -lowerBound will be between 0 and 5000000, inclusive.
// -upperBound will be between lowerBound and 5000000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 0
// 1
// 
// Returns: 2
// 
// 0 and 1 are both sums of two perfect powers since 0 = 0 + 0 and 1 = 12 + 02.
// 
// 1)
// 5
// 6
// 
// Returns: 1
// 
// 5 is a sum of two perfect powers since 5 = 22 + 12 while 6 is not.
// 
// 2)
// 25
// 30
// 
// Returns: 5
// 
// Only 30 is not a sum of two perfect powers.
// 
// 3)
// 103
// 103
// 
// Returns: 0
// 
// There may be no desired integers in the range.
// 
// 4)
// 1
// 100000
// 
// Returns: 33604
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

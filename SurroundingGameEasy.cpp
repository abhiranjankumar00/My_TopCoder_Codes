#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef string ST;
typedef stringstream SS;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef vector <string> vs;

#define endl 		("\n")
#define DEBUG(x)	cout << #x << " = " << x << "\n"
#define Pf		printf
#define	Sf		scanf

#define	ep		1e-9
#define PI		M_PI
#define E 		M_E

#define	CL(a, b)	memset(a, b, sizeof(a))
#define	mp		make_pair
#define	pb		push_back

#define	all(c)		(c).begin(), (c).end()
#define	tr(i, c)	for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())		//vector & list//

#define forn(i, n)	for(int i = 0, loop_ends_here = (int)n; i < loop_ends_here ; i++)
#define forab(i, a, b)	for(int i = a, loop_ends_here = (int)b; i <= loop_ends_here; i++)
#define rep(i, a, b)	for(int i = a, loop_ends_here = (int)b; i >= loop_ends_here; i--)

#define read(n)		scanf("%d", &n)
#define write(n)	printf("%d ", n)
#define writeln(n)	printf("%d\n", n)

class SurroundingGameEasy
{
public:
	int score(vector <string> cost, vector <string> benefit, vector <string> stone);
};


int SurroundingGameEasy::score (vector <string> cost, vector <string> benefit, vector <string> stone) 
{
	int ret = 0;

	forn(i, cost.size()) {
		forn(j, cost[0].size()) {
			if(stone[i][j] == 'o') {
				ret -= (cost[i][j] - '0');
			}
		}
	}
	
	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <string> p1, vector <string> p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p2[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	SurroundingGameEasy *obj;
	int answer;
	obj = new SurroundingGameEasy();
	clock_t startTime = clock();
	answer = obj->score(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	vector <string> p1;
	vector <string> p2;
	int p3;
	
	{
	// ----- test 0 -----
	string t0[] = {"21","12"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"21","12"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {".o","o."};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 4;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"99","99"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"11","11"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {".o","o."};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = -14;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"888","888","888"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"000","090","000"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"...",".o.","..."};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 1;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"4362","4321"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"5329","5489"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"...o","..o."};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 22;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"5413","4323","8321","5490"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"0432","7291","3901","2310"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"ooo.","o..o","...o","oooo"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = -12;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Surrounding Game is a single-player game played on a rectangular grid of cells.
// Cells are considered adjacent if they share a common side.
// (Hence, each cell has at most four adjacent cells. 
// The cells on the sides and in the corners of the grid have fewer adjacent cells than the ones inside the grid.)
// 
// The game is played by placing stones into some of the cells.
// Each cell may only contain at most one stone.
// A cell is called dominated if at least one of the following two conditions holds:
// 
// The cell contains a stone.
// All cells adjacent to the cell contain stones.
// 
// 
// Each cell of the grid contains two numbers, each from 0 to 9, inclusive:
// the cost of placing a stone into the cell, and the benefit from dominating the cell.
// At the end of the game, the overall score of the player is the sum of all benefits minus the sum of all costs.
// 
// You are given the vector <string>s cost and benefit.
// The characters cost[i][j] and benefit[i][j] represent the two digits written in the cell (i,j).
// For example, if character 7 of element 4 of cost is '3', the cost of placing a stone into the cell (4,7) is 3.
// 
// You are also given a vector <string> stone that describes the final state of the game.
// The character stone[i][j] is 'o' (lowercase letter oh) if the cell (i,j) contains a stone.
// Otherwise, stone[i][j] is '.' (a period).
// Calculate and return the overall score of the game.
// 
// DEFINITION
// Class:SurroundingGameEasy
// Method:score
// Parameters:vector <string>, vector <string>, vector <string>
// Returns:int
// Method signature:int score(vector <string> cost, vector <string> benefit, vector <string> stone)
// 
// 
// CONSTRAINTS
// -cost will contain between 2 and 20 elements, inclusive.
// -cost, benefit and stone will each contain the same number of elements.
// -Each element of cost will contain between 2 and 20 characters, inclusive.
// -Each element of cost will contain the same number of characters.
// -Each element of benefit and stone will contain the same number of characters as each element of cost.
// -Each character in cost and benefit will be a digit ('0'-'9').
// -Each character in stone will either 'o' (lowercase letter oh) or '.'.
// 
// 
// EXAMPLES
// 
// 0)
// {"21","12"}
// {"21","12"}
// {".o","o."}
// 
// Returns: 4
// 
// All the cells are dominated, so the overall benefit is 2+1+1+2 = 6.
// Only two of the cells contain stones.
// The total cost of placing the stones is 1+1 = 2.
// Therefore the overall score is 6-2 = 4.
// 
// 1)
// {"99","99"}
// {"11","11"}
// {".o","o."}
// 
// Returns: -14
// 
// A player may get a negative score.
// 
// 2)
// {"888","888","888"}
// {"000","090","000"}
// {"...",".o.","..."}
// 
// Returns: 1
// 
// 
// 
// 3)
// {"4362","4321"}
// {"5329","5489"}
// {"...o","..o."}
// 
// Returns: 22
// 
// 
// 
// 4)
// {"5413","4323","8321","5490"}
// {"0432","7291","3901","2310"}
// {"ooo.","o..o","...o","oooo"}
// 
// Returns: -12
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

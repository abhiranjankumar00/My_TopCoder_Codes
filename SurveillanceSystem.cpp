#include <iostream>
#include <ctime>
#include <vector>
#include <list>
#include <queue>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <cassert>
#include <utility>
#include <sstream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <climits>
#include <iterator>
#include <fstream>
using namespace std;

typedef long long 		int64;
typedef vector<int> 		vi;
typedef string 			ST;
typedef stringstream 		SS;
typedef vector< vector<int> > 	vvi;
typedef pair<int,int> 		ii;
typedef vector<string> 		vs;
/*
#if __cplusplus > 199711L	// for g++0x, value of __cplusplus must be greater thana 199711L.
	#define tr(i, c)	for(auto i = begin(c); i != end(c); i++)
#else
	#define tr(i, c)	for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#endif
*/
#define endl		("\n")
#define tr(i, c)	for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define PI		M_PI
#define E 		M_E
#define	eps		1e-9

#define	Sf		scanf
#define	Pf		printf

#define forn(i, n)	for(int i = 0, lets_stop_here = (int)n; i <  lets_stop_here; i++)
#define forab(i, a, b)	for(int i = a, lets_stop_here = (int)b; i <= lets_stop_here; i++)
#define rep(i, a, b)	for(int i = a, lets_stop_here = (int)b; i >= lets_stop_here; i--)

#define	all(c)		(c).begin(), (c).end()
#define	cl(a, b)	memset(a, b, sizeof(a))
#define mp		make_pair
#define pb		push_back

#define	present(x, c)	((c).find(x) != (c).end())	//map & set//
#define	cpresent(x, c)	(find( (c).begin(), (c).end(), x) != (c).end())	//vector & list//

#define read(n)		scanf("%d", &n)
#define write(n)	printf("%d ", n)
#define writeln(n)	printf("%d\n", n)

#if (0)
	#define debug 
#else 
	#define debug(x)	cout << #x << " = " << x << "\n"
#endif

class SurveillanceSystem
{
public:
	string getContainerInfo(string containers, vector <int> reports, int L);
};

string SurveillanceSystem::getContainerInfo (string containers, vector <int> reports, int lssL) 
{
	map <int, int> cnt;
	cnt.clear();
	int N = containers.size();

	for(int i = 0; i < N-L; ++i) {
		int c = 0;
		for(int j = 0; j < L; ++j) {
			if(containers[i+j] == 'X')
				c++;
		}
		cnt[c]++;
	}
	cout << "containers = " << containers << "\n"; 
	for(__typeof((cnt).begin()) it = (cnt).begin(); it != (cnt).end(); ++it) {
		 cout << it->first << " " << it->second << endl;
	}
	string ret; 
	
	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, vector <int> p1, int p2, bool hasAnswer, string p3) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << p2;
	cout << "]" << endl;
	SurveillanceSystem *obj;
	string answer;
	obj = new SurveillanceSystem();
	clock_t startTime = clock();
	answer = obj->getContainerInfo(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p3 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	vector <int> p1;
	int p2;
	string p3;
	
	{
	// ----- test 0 -----
	p0 = "-X--XX";
	int t1[] = {1,2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 3;
	p3 = "?" "?++++";
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "-XXXXX-";
	int t1[] = {2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 3;
	p3 = "?" "?" "?-?" "?" "?";
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "------X-XX-";
	int t1[] = {3,0,2,0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 5;
	p3 = "++++++++++?";
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "-XXXXX---X--";
	int t1[] = {2,1,0,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 3;
	p3 = "?" "?" "?-?" "?++++?" "?";
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "-XX--X-XX-X-X--X---XX-X---XXXX-----X";
	int t1[] = {3,3,3,3,3,3,3,3,3,3,3,3,3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 7;
	p3 = "?" "?" "?++++?++++++++++++++++++++?" "?" "?" "?" "?" "?--";
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// There is a long narrow storehouse.
// The storehouse is divided into a sequence of N identical sectors, labeled 0 through N-1.
// Each sector is large enough to contain a single container.
// Currently, some sectors are empty and some sectors are filled by containers.
// The storehouse also contains a surveillance system that is described below.
// 
// We are going to break into the storehouse.
// As a part of preparation for the heist, we already found out some information about the warehouse.
// In particular, we know exactly how the containers are currently placed in the warehouse.
// You are given a string containers consisting of N characters.
// For each i, character i of containers is 'X' if sector i contains a container, and it is '-' if sector i is empty.
// 
// We also discovered some information about the surveillance system.
// The system consists of several hidden cameras.
// You are given a int L with the following meaning:
// Each of the cameras monitors exactly L consecutive sectors.
// The segments of sectors monitored by different cameras might overlap, but no two cameras watch exactly the same segment.
// (In other words, each sector may be monitored by multiple cameras, but each camera monitors a different set of consecutive sectors.)
// 
// Finally, we know something about what the cameras currently see.
// You are given a vector <int> reports.
// Each element of reports corresponds to one of the cameras (in no particular order).
// More precisely, reports[i] is the number of containers stored in the sectors monitored by the corresponding camera.
// 
// It is guaranteed that all our information is correct and consistent.
// 
// Your task is to use the provided information to deduce which sectors are monitored by at least one surveillance camera.
// Return a string containing N characters.
// For each i, character i of the return value should be one of '+', '?', and '-'.
// Character '+' represents that sector i is certainly monitored by at least one camera.
// Character '-' represents that sector i is certainly not monitored by any of the cameras.
// Character '?' represents the remaining case: given the information we have, it is possible that sector i is monitored, but it is also possible that it is not monitored.
// 
// DEFINITION
// Class:SurveillanceSystem
// Method:getContainerInfo
// Parameters:string, vector <int>, int
// Returns:string
// Method signature:string getContainerInfo(string containers, vector <int> reports, int L)
// 
// 
// CONSTRAINTS
// -containers will contain N elements, where N is between 1 and 50, inclusive.
// -Each character in containers will be either 'X' or '-'.
// -L will be between 1 and N, inclusive.
// -reports will contain between 1 and N-L+1 elements, inclusive.
// -Each element of reports will be between 0 and L, inclusive.
// -The given information will be consistent.
// 
// 
// EXAMPLES
// 
// 0)
// "-X--XX"
// {1, 2}
// 3
// 
// Returns: "??++++"
// 
// This storehouse has 6 sectors.
// There are containers in sectors 1, 4, and 5.
// There are two cameras: camera #0 monitors 1 container, and camera #1 monitors 2 containers.
// Clearly, camera #1 must be watching sectors 3, 4, and 5.
// Camera #0 may be watching sectors (0, 1, 2), (1, 2, 3), or (2, 3, 4).
// Thus, camera #0 is surely monitoring sector 2.
// Sectors 0 and 1 may or may not be monitored.
// 
// 1)
// "-XXXXX-"
// {2}
// 3
// 
// Returns: "???-???"
// 
// The camera is monitoring either the leftmost or the rightmost segment, thus the middle sector is surely not under surveillance.
// 
// 2)
// "------X-XX-"
// {3, 0, 2, 0}
// 5
// 
// Returns: "++++++++++?"
// 
// We can deduce that cameras #1 and #3 are watching segments (0, 1, 2, 3, 4) and (1, 2, 3, 4, 5). Camera #2 is monitoring the segment (4, 5, 6, 7, 8), since this is the only segment with two occupied sectors. Camera #0 is either watching (5, 6, 7, 8, 9) or (6, 7, 8, 9, 10), thus the rightmost sector might have slipped from the surveillance.
// 
// 3)
// "-XXXXX---X--"
// {2, 1, 0, 1}
// 3
// 
// Returns: "???-??++++??"
// 
// 
// 
// 4)
// "-XX--X-XX-X-X--X---XX-X---XXXX-----X"
// {3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3}
// 7
// 
// Returns: "???++++?++++++++++++++++++++??????--"
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

#include <iostream>
#include <ctime>
#include <vector>
#include <list>
#include <queue>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <cassert>
#include <utility>
#include <sstream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <climits>
#include <iterator>
#include <fstream>
using namespace std;

typedef long long 		int64;
typedef vector<int> 		vi;
typedef string 			ST;
typedef stringstream 		SS;
typedef vector< vector<int> > 	vvi;
typedef pair<int,int> 		ii;
typedef vector<string> 		vs;
/*
#if __cplusplus > 199711L	// for g++0x, value of __cplusplus must be greater thana 199711L.
	#define tr(i, c)	for(auto i = begin(c); i != end(c); i++)
#else
	#define tr(i, c)	for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#endif
*/
#define endl		("\n")
#define tr(i, c)	for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define PI		M_PI
#define E 		M_E

#define	Sf		scanf
#define	Pf		printf

#define forn(i, n)	for(int i = 0, lets_stop_here = (int)n; i <  lets_stop_here; i++)
#define forab(i, a, b)	for(int i = a, lets_stop_here = (int)b; i <= lets_stop_here; i++)
#define rep(i, a, b)	for(int i = a, lets_stop_here = (int)b; i >= lets_stop_here; i--)

#define	all(c)		(c).begin(), (c).end()
#define	cl(a, b)	memset(a, b, sizeof(a))
#define mp		make_pair
#define pb		push_back

#define	present(x, c)	((c).find(x) != (c).end())	//map & set//
#define	cpresent(x, c)	(find( (c).begin(), (c).end(), x) != (c).end())	//vector & list//

#define read(n)		scanf("%d", &n)
#define write(n)	printf("%d ", n)
#define writeln(n)	printf("%d\n", n)

//#define debug(x)
#define debug(x)	cout << #x << " = " << x << "\n"

class TVTower
{
public:
	double minRadius(vector <int> x, vector <int> y);
};

double pow2(double x) {
	return x*x;
}

const double eps = 1e-12;
int mnX, mnY, mxX, mxY;
vector <int> x, y;
int N;

double getDistance(double xx, double yy) {
	double ret = 0.0;
	for(int i = 0; i < N; ++i) 
		ret = max(ret, pow2(xx-x[i]) + pow2(yy-y[i]));
	return ret;
}

double findY(double xx) {
	double l = mnY, r = mxY;

	while(l <= r && abs(r-l) > eps) {
		double ml = l + (r-l)/3;
		double mr = l + 2*(r-l)/3;

		double dist_ml = getDistance(xx, ml);
		double dist_mr = getDistance(xx, mr);

		if(abs(dist_ml - dist_mr) < eps) {
			l = ml;
			r = mr;
		}
		else if(dist_ml < dist_mr) 
			r = mr;
		else 
			l = ml;
	}
	return l;
}

double TVTower::minRadius (vector <int> _x, vector <int> _y) 
{
	x = _x;
	y = _y;
	N = x.size();

	mnX = *min_element(x.begin(), x.end());
	mxX = *max_element(x.begin(), x.end());
	mnY = *min_element(y.begin(), y.end());
	mxY = *max_element(y.begin(), y.end());
	double ret = 0.0;
	double	l = mnX, r = mxX;

	while(l <= r && abs(r-l) > eps) {
		double ml = l + (r-l)/3;
		double ly = findY(ml);
		double dist_l = getDistance(ml, ly);

		double mr = l + 2*(r-l)/3;
		double ry = findY(mr);
		double dist_r = getDistance(mr, ry);


		if(abs(dist_l - dist_r) < eps) {
			l = ml;
			r = mr;
		}
		else if(dist_l < dist_r) 
			r = mr;
		else 
			l = ml;
	}
	double xx = l;
	double yy = findY(xx);
	double dist = getDistance(xx, yy);
	ret = sqrt(dist);

	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, bool hasAnswer, double p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	TVTower *obj;
	double answer;
	obj = new TVTower();
	clock_t startTime = clock();
	answer = obj->minRadius(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == answer && fabs(p2 - answer) <= 1e-9 * max(1.0, fabs(p2));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <int> p1;
	double p2;
	
	{
	// ----- test 0 -----
	int t0[] = {1,0,-1,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0,1,0,-1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 1.0;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {3};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {299};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 0.0;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {5,3,-4,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0,4,3,2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 4.743416490252569;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Our problem is where to locate our TV station's broadcasting tower.  We know 
// the locations of the towns we should serve. Fortunately, we are located on the 
// flat, flat prairie, so the only issue is where to locate the tower to minimize the 
// broadcast radius that includes all the towns.
// 
// We have vector <int> x and vector <int> y giving the locations of the towns; the i-th elements 
// of x and y give the coordinates of the i-th town.
// Create a class TVTower that contains a method minRadius that is given x 
// and y, and returns the minimum
// broadcast radius that can reach all the towns. The tower's location is NOT restricted to integer coordinates.
// 
// 
// 
// DEFINITION
// Class:TVTower
// Method:minRadius
// Parameters:vector <int>, vector <int>
// Returns:double
// Method signature:double minRadius(vector <int> x, vector <int> y)
// 
// 
// NOTES
// -If the return has either a relative or absolute error less than 1.0E-9 it is acceptable.
// 
// 
// CONSTRAINTS
// -x will contain between 1 and 50 elements inclusive.
// -y will contain the same number of elements as x.
// -Each element in x and y will be between -1000 and 1000 inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {1, 0, -1, 0}
// {0, 1, 0, -1}
// 
// Returns: 1.0
// 
// 
// 
//    By symmetry we should locate the tower at the origin, which is in the center of
//    the diamond formed by these 4 towns.
// 
// 
// 
// 1)
// {3}
// {299}
// 
// Returns: 0.0
// 
// 
// 
//    Locate the tower right in the town.
// 
// 2)
// {5, 3, -4, 2}
// {0, 4, 3, 2}
// 
// Returns: 4.743416490252569
// 
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

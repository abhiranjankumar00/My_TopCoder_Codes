#include <bits/stdc++.h>
using namespace std;

class TaroFriends
{
public:
	int getNumber(vector <int> coordinates, int X);
};

bool inRange(int x, int l, int r) {
    return x >= l && x <= r;
}

int TaroFriends::getNumber (vector <int> coord, int X)
{
	long long  ret = 2e15;
    int N = coord.size();
    /*
     *if(N == 1)
     *    return 0;
     */

    vector <vector<long long> > d(N, vector <long long> (2) );
    for(int i = 0; i < (int)N; ++i) {
        d[i][0] = coord[i] - X;
        d[i][1] = coord[i] + X;
    }

    for(int i = 0; i < (int)N; ++i) for(int a = 0; a < 2; a++)  {
        for(int j = 0; j < (int)N; ++j)  for(int b = 0; b < 2; b++){
            bool flag = true;
            long long l = min(d[i][a], d[j][b]);
            long long r = max(d[i][a], d[j][b]);

            for(int k = 0; k < (int)N; ++k) {
                flag &= inRange(d[k][0], l, r) || inRange(d[k][1], l, r);
            }

            if(flag)
                ret = min(ret, r-l);
        }
    }

	return (int)ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	TaroFriends *obj;
	int answer;
	obj = new TaroFriends();
	clock_t startTime = clock();
	answer = obj->getNumber(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	vector <int> p0;
	int p1;
	int p2;
	
	// ----- test 0 -----
	disabled = false;
	p0 = {-3,0,1};
	p1 = 3;
	p2 = 3;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = {4,7,-7};
	p1 = 5;
	p2 = 4;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = {-100000000,100000000};
	p1 = 100000000;
	p2 = 0;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = {3,7,4,6,-10,7,10,9,-5};
	p1 = 7;
	p2 = 7;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = {-4,0,4,0};
	p1 = 4;
	p2 = 4;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 5 -----
	disabled = false;
	p0 = {7};
	p1 = 0;
	p2 = 0;
	all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 6 -----
	disabled = false;
	p0 = {1,2,3,4};
	p1 = 10;
	all_right = (disabled || KawigiEdit_RunTest(6, p0, p1, false, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// Cat Taro likes to play with his cat friends.
// Each of his friends currently sits on some coordinate on a straight line that goes from the left to the right.
// When Taro gives a signal, each of his friends must move exactly X units to the left or to the right.
// 
// 
// 
// 
// You are given an vector <int> coordinates and the int X.
// For each i, the element coordinates[i] represents the coordinate of the i-th cat before the movement.
// Return the smallest possible difference between the positions of the leftmost cat and the rightmost cat after the movement.
// 
// 
// DEFINITION
// Class:TaroFriends
// Method:getNumber
// Parameters:vector <int>, int
// Returns:int
// Method signature:int getNumber(vector <int> coordinates, int X)
// 
// 
// CONSTRAINTS
// -coordinates will contain between 1 and 50 elements, inclusive.
// -Each element of coordinates will be between -100,000,000 and 100,000,000, inclusive.
// -X will be between 0 and 100,000,000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {-3, 0, 1}
// 3
// 
// Returns: 3
// 
// The difference 3 is obtained if the cats move from {-3,0,1} to {0,-3,-2}.
// 
// 
// 
// 
// 1)
// {4, 7, -7}
// 5
// 
// Returns: 4
// 
// The difference 4 is obtained if the cats move from {4,7,-7} to {-1,2,-2}.
// 
// 
// 
// 
// 2)
// {-100000000, 100000000}
// 100000000
// 
// Returns: 0
// 
// 
// 
// 3)
// {3, 7, 4, 6, -10, 7, 10, 9, -5}
// 7
// 
// Returns: 7
// 
// 
// 
// 4)
// {-4, 0, 4, 0}
// 4
// 
// Returns: 4
// 
// 
// 
// 5)
// {7}
// 0
// 
// Returns: 0
// 
// 
// 
// END KAWIGIEDIT TESTING

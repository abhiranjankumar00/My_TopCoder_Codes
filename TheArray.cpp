#include <iostream>
#include <ctime>
#include <vector>
#include <list>
#include <queue>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <cassert>
#include <utility>
#include <sstream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <climits>
#include <iterator>
#include <fstream>
using namespace std;

typedef long long 		int64;
typedef vector<int> 		vi;
typedef string 			ST;
typedef stringstream 		SS;
typedef vector< vector<int> > 	vvi;
typedef pair<int,int> 		ii;
typedef vector<string> 		vs;
/*
#if __cplusplus > 199711L	// for g++0x, value of __cplusplus must be greater thana 199711L.
	#define tr(i, c)	for(auto i = begin(c); i != end(c); i++)
#else
	#define tr(i, c)	for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#endif
*/
#define endl		("\n")
#define tr(i, c)	for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define PI		M_PI
#define E 		M_E
#define	eps		1e-9

#define	Sf		scanf
#define	Pf		printf

#define forn(i, n)	for(int i = 0, lets_stop_here = (int)n; i <  lets_stop_here; i++)
#define forab(i, a, b)	for(int i = a, lets_stop_here = (int)b; i <= lets_stop_here; i++)
#define rep(i, a, b)	for(int i = a, lets_stop_here = (int)b; i >= lets_stop_here; i--)

#define	all(c)		(c).begin(), (c).end()
#define	CL(a, b)	memset(a, b, sizeof(a))
#define mp		make_pair
#define pb		push_back

#define	present(x, c)	((c).find(x) != (c).end())	//map & set//
#define	cpresent(x, c)	(find( (c).begin(), (c).end(), x) != (c).end())	//vector & list//

#define read(n)		scanf("%d", &n)
#define write(n)	printf("%d ", n)
#define writeln(n)	printf("%d\n", n)

#if (0 or defined ONLINE_JUDGE)
	#define DEBUG
#else 
	#define DEBUG(x)	cout << #x << " = " << x << "\n"
#endif

class TheArray
{
public:
	int find(int n, int d, int first, int last);
};

int n, d, first, last;
int lft;
vi arr;

int find1(int l, int r) {
	if(l == r)
		return l;
	int mid = (l+r+1)/2;
	if(arr.back() + mid - d*(lft-1) <= last)
		return find1(mid, r);
	else
		return find1(l, mid-1);
}

int TheArray::find (int _n, int _d, int _first, int _last) 
{
	arr.clear();
	d = abs(_d);
	n = _n;
	first = _first;
	last = _last;
	if(first > last)
		swap(first, last);

	arr.pb(first);

	while(arr.size() < n){
		lft = n - arr.size();
		if(arr.back() + 0 - d*(lft-1) <= last)
			arr.pb(arr.back() + find1(0, d));
		else
			arr.pb(max(arr.back()-d, last));
	}
/*
	tr(it, arr)
		write(*it);
	cout << endl;
*/

	return *max_element(all(arr));
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, bool hasAnswer, int p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3;
	cout << "]" << endl;
	TheArray *obj;
	int answer;
	obj = new TheArray();
	clock_t startTime = clock();
	answer = obj->find(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p4;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	int p3;
	int p4;
	
	{
	// ----- test 0 -----
	p0 = 3;
	p1 = 5;
	p2 = 2;
	p3 = 4;
	p4 = 7;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 10;
	p1 = 100;
	p2 = 999;
	p3 = 100;
	p4 = 999;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 1000000;
	p1 = 0;
	p2 = 474;
	p3 = 474;
	p4 = 474;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 97;
	p1 = 53;
	p2 = -92;
	p3 = 441;
	p4 = 2717;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 99;
	p1 = 3;
	p2 = -743;
	p3 = -619;
	p4 = -535;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// John has an array of n integers.
// Each pair of neighboring elements differs by at most d.
// The first and the last elements of the array are equal to first and last, respectively.
// 
// 
// Brus does not know John's array.
// He only knows n, d, first and last.
// He wants to compute the maximal possible element John might have in his array.
// 
// 
// You are given ints n, d, first and last.
// Return the maximal possible element the array might contain.
// 
// 
// DEFINITION
// Class:TheArray
// Method:find
// Parameters:int, int, int, int
// Returns:int
// Method signature:int find(int n, int d, int first, int last)
// 
// 
// NOTES
// -The constraints given below guarantee that there will always be at least one array that matches the values Brus knows.
// -For the constraints given below, the correct answer will always fit into an int.
// 
// 
// CONSTRAINTS
// -n will be between 2 and 1,000,000, inclusive.
// -d will be between 0 and 1000, inclusive.
// -first will be between -1000 and 1000, inclusive.
// -last will be between -1000 and 1000, inclusive.
// -|first - last| will be at most (n-1)*d.
// 
// 
// EXAMPLES
// 
// 0)
// 3
// 5
// 2
// 4
// 
// Returns: 7
// 
// Only the second element of the array is unknown.
// Its maximal valid value is 7.
// 
// 
// 1)
// 10
// 100
// 999
// 100
// 
// Returns: 999
// 
// Due to the limitations, the first element is the largest element of the array.
// 
// 2)
// 1000000
// 0
// 474
// 474
// 
// Returns: 474
// 
// All elements of the array are equal.
// 
// 3)
// 97
// 53
// -92
// 441
// 
// Returns: 2717
// 
// 
// 
// 4)
// 99
// 3
// -743
// -619
// 
// Returns: -535
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef string ST;
typedef stringstream SS;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef vector <string> vs;

#define endl 		("\n")
#define DEBUG(x)	cout << #x << " = " << x << "\n"
#define Pf		printf
#define	Sf		scanf

#define	ep		1e-9
#define PI		M_PI
#define E 		M_E

#define	CL(a, b)	memset(a, b, sizeof(a))
#define	mp		make_pair
#define	pb		push_back

#define	all(c)		(c).begin(), (c).end()
#define	tr(i, c)	for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())		//vector & list//

#define forn(i, n)	for(int i = 0, loop_ends_here = (int)n; i < loop_ends_here ; i++)
#define forab(i, a, b)	for(int i = a, loop_ends_here = (int)b; i <= loop_ends_here; i++)
#define rep(i, a, b)	for(int i = a, loop_ends_here = (int)b; i >= loop_ends_here; i--)

#define read(n)		scanf("%d", &n)
#define write(n)	printf("%d ", n)
#define writeln(n)	printf("%d\n", n)

class TheBrickTowerEasyDivOne
{
public:
	int find(int redCount, int redHeight, int blueCount, int blueHeight);
};


int TheBrickTowerEasyDivOne::find (int redCount, int redHeight, int blueCount, int blueHeight) 
{
	if(redHeight == blueHeight)
		return redCount == blueCount ? 2*redCount : 2*min(redCount, blueCount) + 1;
	if(redCount == blueCount)
		return 3*blueCount;
	return 3*min(redCount, blueCount)+1;

	return -1;

	int tmp = min(redCount, blueCount) + 1;
	redCount = min(redCount, tmp);
	blueCount = min(blueCount, tmp);

	DEBUG(redCount);
	DEBUG(blueCount);

	int64 ret = 0;

	if(redHeight != blueHeight) {
	//if(__gcd(redHeight, blueHeight) == 1 || true) {
		ret += 4ll * min(redCount, blueCount);
		ret -= min(redCount, blueCount);
		if(redCount != blueCount)
			ret++;
		return ret;
	}
	return redCount + blueCount;
/*
	else if(redCount == blueCount) {
		return 2*redCount;
	}
	else
*/		
	
/*
	if(redHeight % blueHeight != 0 && blueHeight % redHeight != 0)
		return ret;

//	if(__gcd(redHeight, blueHeight) == 1)
//		return ret;

//	if(redHeight == blueHeight)
//		ret = ret/3*2;
	
	return ret;
*/
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, bool hasAnswer, int p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3;
	cout << "]" << endl;
	TheBrickTowerEasyDivOne *obj;
	int answer;
	obj = new TheBrickTowerEasyDivOne();
	clock_t startTime = clock();
	answer = obj->find(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p4;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	int p3;
	int p4;
	
	{
	// ----- test 0 -----
	p0 = 1;
	p1 = 2;
	p2 = 3;
	p3 = 4;
	p4 = 4;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 4;
	p1 = 4;
	p2 = 4;
	p3 = 7;
	p4 = 12;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 7;
	p1 = 7;
	p2 = 4;
	p3 = 4;
	p4 = 13;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 47;
	p1 = 47;
	p2 = 47;
	p3 = 47;
	p4 = 94;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// John and Brus are building towers using toy bricks.
// They have two types of bricks: red and blue ones.
// The number of red bricks they have is redCount and each of them has a height of redHeight.
// The number of blue bricks they have is blueCount and each of them has a height of blueHeight.
// 
// 
// 
// A tower is built by placing bricks one atop another.
// A brick can be placed either on the ground, or on a brick of a different color.
// (I.e., you are not allowed to put two bricks of the same color immediately on one another.)
// A tower has to consist of at least one brick.
// The height of a tower is the sum of all heights of bricks that form the tower.
// Two towers are considered to be different if they have different heights.
// (Two towers of the same height are considered the same, even if they differ in the number and colors of bricks that form them.)
// 
// 
// 
// You are given the ints redCount, redHeight, blueCount and blueHeight.
// Return the number of different towers that John and Brus can build.
// 
// 
// 
// DEFINITION
// Class:TheBrickTowerEasyDivOne
// Method:find
// Parameters:int, int, int, int
// Returns:int
// Method signature:int find(int redCount, int redHeight, int blueCount, int blueHeight)
// 
// 
// CONSTRAINTS
// -redCount will be between 1 and 474,747,474, inclusive.
// -redHeight will be between 1 and 474,747,474, inclusive.
// -blueCount will be between 1 and 474,747,474, inclusive.
// -blueHeight will be between 1 and 474,747,474, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 1
// 2
// 3
// 4
// 
// Returns: 4
// 
// John and Brus have 1 red brick of height 2 and 3 blue bricks of height 4. Using these bricks, it's possible to build 4 towers:
// red (height 2);
// blue (height 4);
// red, blue (height 6);
// blue, red, blue (height 10).
// 
// 1)
// 4
// 4
// 4
// 7
// 
// Returns: 12
// 
// 2)
// 7
// 7
// 4
// 4
// 
// Returns: 13
// 
// 3)
// 47
// 47
// 47
// 47
// 
// Returns: 94
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

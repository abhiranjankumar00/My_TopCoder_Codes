#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef string ST;
typedef stringstream SS;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef vector <string> vs;

#define endl 		("\n")
#define DEBUG(x)	cout << #x << " = " << x << "\n"
#define Pf		printf
#define	Sf		scanf

#define	ep		1e-9
#define PI		M_PI
#define E 		M_E

#define	CL(a, b)	memset(a, b, sizeof(a))
#define	mp		make_pair
#define	pb		push_back

#define	all(c)		(c).begin(), (c).end()
#define	tr(i, c)	for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())		//vector & list//

#define forn(i, n)	for(int i = 0, loop_ends_here = (int)n; i < loop_ends_here ; i++)
#define forab(i, a, b)	for(int i = a, loop_ends_here = (int)b; i <= loop_ends_here; i++)
#define rep(i, a, b)	for(int i = a, loop_ends_here = (int)b; i >= loop_ends_here; i--)

#define read(n)		scanf("%d", &n)
#define write(n)	printf("%d ", n)
#define writeln(n)	printf("%d\n", n)

class TheBrickTowerHardDivTwo
{
public:
	int find(int C, int K, int H);
};

const int64 mod = 1234567891LL;
int64 C;

int64 solve(int h, int k, int bothSame) {
	if(k < 0)
		return 0;

	if(h == 1) {
		if(bothSame && k < 1)
			return 0;
		if(bothSame)
			return C;
		else // both are different
			return C*(C-1);
	}

	int64 ret = 0;

	if(bothSame) {
		ret = (ret + solve(h-1, k-3, 1) + (C-1)*solve(h-1, k-1, 1) + 2*solve(h-1, k-2, 0) + max(0, C-2)*solve(h-1, k-1, 0) ) % mod;
			// 	aa			aa			aa | aa				aa	
			// 	aa			bb			ab | ba				bc
	}
	else  {	// bothSame = false 
		ret = (ret + solve(h-1, k-2, 0) + (C-1)*(C-1)*solve(h-1, k, 0) + 2*(C-1)*solve(h-1, k-1, 1) + max(C-2, 0)*solve(h-1, k, 1)) % mod;
			//	ab			!a !b				ab			ab
			//	ab			 a  b				aa			cc
	}

	return ret;
}

int TheBrickTowerHardDivTwo::find (int _C, int K, int H) 
{
	C = _C;
	int ret;
	
	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2;
	cout << "]" << endl;
	TheBrickTowerHardDivTwo *obj;
	int answer;
	obj = new TheBrickTowerHardDivTwo();
	clock_t startTime = clock();
	answer = obj->find(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	int p3;
	
	{
	// ----- test 0 -----
	p0 = 2;
	p1 = 0;
	p2 = 2;
	p3 = 4;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 1;
	p1 = 7;
	p2 = 19;
	p3 = 1;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 2;
	p1 = 3;
	p2 = 1;
	p3 = 14;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 4;
	p1 = 7;
	p2 = 47;
	p3 = 1008981254;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// John and Brus are building towers using toy bricks.
// They have an unlimited supply of bricks of C different colors.
// Each brick is a 1x1x1 cube.
// A tower of height X is a 2x2xX rectangular prism, built using 4X bricks.
// 
// 
// 
// John and Brus want their towers to look nice.
// A tower is nice if it has the following two properties:
// 
// There are at most K pairs of neighboring bricks with the same color. (Two bricks are neighboring if they share a common side.)
// The height of the tower is between 1 and H, inclusive.
// 
// 
// 
// 
// You are given the ints C, K, and H.
// Return the number of nice towers, modulo 1,234,567,891.
// 
// 
// 
// DEFINITION
// Class:TheBrickTowerHardDivTwo
// Method:find
// Parameters:int, int, int
// Returns:int
// Method signature:int find(int C, int K, int H)
// 
// 
// CONSTRAINTS
// -C will be between 1 and 4, inclusive.
// -K will be between 0 and 7, inclusive.
// -H will be between 1 and 47, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 2
// 0
// 2
// 
// Returns: 4
// 
// No two neighboring bricks may share the same color.
// As we only have two colors, the entire tower must be colored like a chessboard.
// There are two such towers of height 1, and two of height 2.
// 
// 
// 1)
// 1
// 7
// 19
// 
// Returns: 1
// 
// Only one tower of height 1 is acceptable here.
// 
// 
// 2)
// 2
// 3
// 1
// 
// Returns: 14
// 
// There are 16 possible towers of height 1.
// If all bricks share the same color, the tower is not nice.
// There are two such towers.
// Each of the remaining 14 towers is nice.
// 
// 
// 3)
// 4
// 7
// 47
// 
// Returns: 1008981254
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

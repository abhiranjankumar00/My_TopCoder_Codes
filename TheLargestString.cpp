#include <iostream>
#include <ctime>
#include <vector>
#include <list>
#include <queue>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <cassert>
#include <utility>
#include <sstream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <climits>
#include <iterator>
#include <fstream>
using namespace std;

typedef long long 		int64;
typedef vector<int> 		vi;
typedef string 			ST;
typedef stringstream 		SS;
typedef vector< vector<int> > 	vvi;
typedef pair<int,int> 		ii;
typedef vector<string> 		vs;
/*
#if __cplusplus > 199711L	// for g++0x, value of __cplusplus must be greater thana 199711L.
	#define tr(i, c)	for(auto i = begin(c); i != end(c); i++)
#else
	#define tr(i, c)	for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#endif
*/
#define endl		("\n")
#define tr(i, c)	for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define PI		M_PI
#define E 		M_E
#define	eps		1e-9

#define	Sf		scanf
#define	Pf		printf

#define forn(i, n)	for(int i = 0, lets_stop_here = (int)n; i <  lets_stop_here; i++)
#define forab(i, a, b)	for(int i = a, lets_stop_here = (int)b; i <= lets_stop_here; i++)
#define rep(i, a, b)	for(int i = a, lets_stop_here = (int)b; i >= lets_stop_here; i--)

#define	all(c)		(c).begin(), (c).end()
#define	CL(a, b)	memset(a, b, sizeof(a))
#define mp		make_pair
#define pb		push_back

#define	present(x, c)	((c).find(x) != (c).end())	//map & set//
#define	cpresent(x, c)	(find( (c).begin(), (c).end(), x) != (c).end())	//vector & list//

#define read(n)		scanf("%d", &n)
#define write(n)	printf("%d ", n)
#define writeln(n)	printf("%d\n", n)

#if (0)
	#define debug 
#else 
	#define debug(x)	cout << #x << " = " << x << "\n"
#endif

class TheLargestString
{
public:
	string find(string s, string t);
};

string concat(char s, char t) {
	string ret = "";
	ret += s;
	ret += t;
	return ret;
}

string TheLargestString::find (string s, string t) 
{
/*
	cout << endl;
	cout << s.size() << ": " << s << endl;
	cout << t.size() << ": " << t << endl;
	cout << endl;
*/
	int N = s.size();
	string ret = concat(s[N-1], t[N-1]);
//	debug(ret);

	rep(i, N-2, 0) {
		string orig_ret = ret;
		string tmp1 = concat(s[i], t[i]);

		string tmp = "";
		int M = ret.size()/2;
		string a = (tmp + s[i]) + ret.substr(0, M);
		string b = (tmp + t[i]) + ret.substr(M);
		string tmp2  = a + b;

		ret = max(ret, tmp1);
		ret = max(ret, tmp2);

//		debug(a);
//		debug(b);
//		Pf("i = %d, orig_ret = %s, tmp1 = %s, tmp2 = %s, ret = %s\n", i, orig_ret.c_str(), tmp1.c_str(), tmp2.c_str(), ret.c_str());
	}

	debug(ret);
	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, string p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "\"" << p1 << "\"";
	cout << "]" << endl;
	TheLargestString *obj;
	string answer;
	obj = new TheLargestString();
	clock_t startTime = clock();
	answer = obj->find(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	string p1;
	string p2;
	
	{
	// ----- test 0 -----
	p0 = "ab";
	p1 = "zy";
	p2 = "by";
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "abacaba";
	p1 = "zzzaaaa";
	p2 = "cbaaaa";
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "x";
	p1 = "x";
	p2 = "xx";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "abbabbabbababaaaabbababab";
	p1 = "bababbaabbbababbbbababaab";
	p2 = "bbbbbbbbbbbbbbbbbbaaab";
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "abcdefg";
	p1 = "fdceafe";
	all_right = KawigiEdit_RunTest(4, p0, p1, false, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = "abaababbcacbccbbaabaacabbcbbbcacbbcbbbaabcbbaba";
	p1 = "cacacccaacacccaacaccbbcbacbccbccabcbbbabbbcbbba";
	p2 = "cccccccccccb";
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// John has two strings s and t of equal length.
// He can choose a set of positions (possibly empty) and erase characters at these positions in both s and t.
// Then he writes down the concatenation of what remained of the strings: first the letters we kept from s, in their original order, then the letters we kept from t, again in their original order.
// 
// 
// Return the lexicographically largest string John can get at the end.
// 
// 
// DEFINITION
// Class:TheLargestString
// Method:find
// Parameters:string, string
// Returns:string
// Method signature:string find(string s, string t)
// 
// 
// NOTES
// -String A is lexicographically smaller than string B if either A is a proper prefix of B, or if there is an integer i such that the first i characters of A match the first i characters of B, and character i+1 of A is smaller than character i+1 of B.
// 
// 
// CONSTRAINTS
// -s will contain between 1 and 47 characters, inclusive.
// -s and t will contain the same number of characters.
// -s will contain only lowercase English characters ('a'-'z').
// -t will contain only lowercase English characters ('a'-'z').
// 
// 
// EXAMPLES
// 
// 0)
// "ab"
// "zy"
// 
// Returns: "by"
// 
// There are four options here:
// 
// Do not erase anything. The resulting string would be "abzy".
// Erase both first characters. The resulting string would be "by".
// Erase both last characters. The resulting string would be "az".
// Erase all characters. The resulting string would be empty.
// 
// Among all possible results "by" is the lexicographically largest one.
// 
// 
// 1)
// "abacaba"
// "zzzaaaa"
// 
// Returns: "cbaaaa"
// 
// 
// 
// 2)
// "x"
// "x"
// 
// Returns: "xx"
// 
// 
// 
// 3)
// "abbabbabbababaaaabbababab"
// "bababbaabbbababbbbababaab"
// 
// Returns: "bbbbbbbbbbbbbbbbbbaaab"
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

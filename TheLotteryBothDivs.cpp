#include <bits/stdc++.h>
using namespace std;

class TheLotteryBothDivs
{
public:
	double find(vector <string> goodSuffixes);
};

bool isSubstring(string st1, string st2) {
	return st1.size() <= st2.size() && st2.substr(st2.size()-st1.size()) == st1;
}

double TheLotteryBothDivs::find (vector <string> suff) 
{
	sort(suff.begin(), suff.end());
	suff.erase(unique(suff.begin(), suff.end()), suff.end());
	int N = suff.size();
/*
	for(auto it = (suff).begin(); it != (suff).end(); ++it) {
		cout << *it << ", ";
	}
	cout << "\n";
*/
	vector <bool> isIn(N, true);
	for(int i = 0; i < N; ++i) {
		for(int j = 0; j < N; ++j) {
			if( i != j && isSubstring(suff[i], suff[j]))
				isIn[j] = false;
		}
	}
	double ret = 0;
	for(int i = 0; i < N; ++i) {
		if(isIn[i]) {
			ret += pow(10, 9- suff[i].size());
		}
	}
	
	return ret/1e9;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, double p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	TheLotteryBothDivs *obj;
	double answer;
	obj = new TheLotteryBothDivs();
	clock_t startTime = clock();
	answer = obj->find(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == answer && fabs(p1 - answer) <= 1e-9 * max(1.0, fabs(p1));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	double p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"4"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0.1;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"4","7"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0.2;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"47","47"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0.01;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"47","58","4747","502"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0.021;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"8542861","1954","6","523","000000000","5426","8"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0.201100101;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Farmer John wants to buy a lottery ticket. Before he buys a ticket, Fox Brus decided to calculate the probability that John will get a prize.
// 
// 
// There are 1,000,000,000 types of lottery tickets. They are numbered "000000000" to "999999999" (they may have leading zeroes). Each type of ticket has an equal probability of being bought by John. You are given a vector <string> goodSuffixes. If the number written on John's ticket has at least one element of goodSuffixes as a suffix, he will get a prize.
// 
// 
// Return the probability that John will get a prize.
// 
// DEFINITION
// Class:TheLotteryBothDivs
// Method:find
// Parameters:vector <string>
// Returns:double
// Method signature:double find(vector <string> goodSuffixes)
// 
// 
// NOTES
// -The returned value must have an absolute or relative error less than 1e-9.
// -A suffix of a string is obtained by removing zero or more contiguous characters from the beginning of the string.
// 
// 
// CONSTRAINTS
// -goodSuffixes will contain between 1 and 50 elements, inclusive.
// -Each element of goodSuffixes will contain between 1 and 9 characters, inclusive.
// -Each character in goodSuffixes will be a digit ('0'-'9').
// 
// 
// EXAMPLES
// 
// 0)
// {"4"}
// 
// Returns: 0.1
// 
// John will get a prize if the last digit is '4'. It happens with probability 0.1.
// 
// 1)
// {"4", "7"}
// 
// Returns: 0.2
// 
// 
// 
// 2)
// {"47", "47"}
// 
// Returns: 0.01
// 
// goodSuffixes may contain duplicate elements.
// 
// 3)
// {"47", "58", "4747", "502"}
// 
// Returns: 0.021
// 
// 
// 
// 4)
// {"8542861", "1954", "6", "523", "000000000", "5426", "8"}
// 
// Returns: 0.201100101
// 
// 
// 
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

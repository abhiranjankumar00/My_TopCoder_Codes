#include <iostream>
#include <ctime>
#include <vector>
#include <list>
#include <queue>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <cassert>
#include <utility>
#include <sstream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <climits>
#include <iterator>
#include <fstream>
using namespace std;

typedef long long 		int64;
typedef vector<int> 		vi;
typedef string 			ST;
typedef stringstream 		SS;
typedef vector< vector<int> > 	vvi;
typedef pair<int,int> 		ii;
typedef vector<string> 		vs;
/*
#if __cplusplus > 199711L	// for g++0x, value of __cplusplus must be greater thana 199711L.
	#define tr(i, c)	for(auto i = begin(c); i != end(c); i++)
#else
	#define tr(i, c)	for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#endif
*/
#define endl		("\n")
#define tr(i, c)	for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define PI		M_PI
#define E 		M_E
#define	eps		1e-9

#define	Sf		scanf
#define	Pf		printf

#define forn(i, n)	for(int i = 0, lets_stop_here = (int)n; i <  lets_stop_here; i++)
#define forab(i, a, b)	for(int i = a, lets_stop_here = (int)b; i <= lets_stop_here; i++)
#define rep(i, a, b)	for(int i = a, lets_stop_here = (int)b; i >= lets_stop_here; i--)

#define	all(c)		(c).begin(), (c).end()
#define	CL(a, b)	memset(a, b, sizeof(a))
#define mp		make_pair
#define pb		push_back

#define	present(x, c)	((c).find(x) != (c).end())	//map & set//
#define	cpresent(x, c)	(find( (c).begin(), (c).end(), x) != (c).end())	//vector & list//

#define read(n)		scanf("%d", &n)
#define write(n)	printf("%d ", n)
#define writeln(n)	printf("%d\n", n)

#if (0)
	#define debug 
#else 
	#define debug(x)	cout << #x << " = " << x << "\n"
#endif

class TheMagicMatrix
{
public:
	int find(int n, vector <int> rows, vector <int> columns, vector <int> values);
};

const int64 mod = 123456789ll;
vvi matrix;

int TheMagicMatrix::find (int n, vector <int> rows, vector <int> columns, vector <int> values) 
{
	matrix.resize(n);
	forn(i, n) {
		matrix[i].resize(n);
		fill(all(matrix[i]), -1);
	}
	forn(i, rows.size())
		matrix[rows[i]][columns[i]] = values[i];

	tr(it, matrix) {
		tr(jt, *it)
			Pf("%+d ", *jt);
		cout << endl;
	}
	int ret;
	
	return ret = rand() % mod;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, vector <int> p1, vector <int> p2, vector <int> p3, bool hasAnswer, int p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p3.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p3[i];
	}
	cout << "}";
	cout << "]" << endl;
	TheMagicMatrix *obj;
	int answer;
	obj = new TheMagicMatrix();
	clock_t startTime = clock();
	answer = obj->find(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p4;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	vector <int> p1;
	vector <int> p2;
	vector <int> p3;
	int p4;
	
	{
	// ----- test 0 -----
	p0 = 2;
	int t1[] = {0,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {1,0};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {4,4};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 10;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 2;
	int t1[] = {0,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {1,0};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {4,7};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 0;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 4;
	int t1[] = {0,0,0,1,2,2,2,3,3,3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {0,1,2,3,0,1,2,0,1,2};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {3,5,1,9,5,1,8,6,7,1};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 2;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// A magic matrix is a square matrix filled with digits (0 to 9) such that its row sums and column sums all have the same last digit.
// John has n by n matrix.
// Its rows and columns are numbered from 0 to n-1.
// Some cells of the matrix already contain digits and some are empty.
// John wants to assign a value to each empty cell to get a magic matrix.
// 
// 
// You are given an int n and vector <int>s rows, columns, values.
// The number values[i] is the digit in John's matrix at row rows[i] and at column columns[i].
// Return the number of different matrices John can get modulo 1,234,567,891.
// 
// 
// DEFINITION
// Class:TheMagicMatrix
// Method:find
// Parameters:int, vector <int>, vector <int>, vector <int>
// Returns:int
// Method signature:int find(int n, vector <int> rows, vector <int> columns, vector <int> values)
// 
// 
// CONSTRAINTS
// -n will be between 1 and 1000, inclusive.
// -rows will contain between 1 and 10 elements, inclusive.
// -rows, columns and values will all contains the same number of elements.
// -Each element of rows will be between 0 and n-1, inclusive.
// -Each element of columns will be between 0 and n-1, inclusive.
// -Each element of values will be between 0 and 9, inclusive.
// -All pairs (rows[i], columns[i]) will be distinct.
// 
// 
// EXAMPLES
// 
// 0)
// 2
// {0, 1}
// {1, 0}
// {4, 4}
// 
// Returns: 10
// 
// John will get a magic matrix only if he assigns equal values to both empty cells. 
// 
// 
// 1)
// 2
// {0, 1}
// {1, 0}
// {4, 7}
// 
// Returns: 0
// 
// 
// 
// 2)
// 4
// {0, 0, 0, 1, 2, 2, 2, 3, 3, 3}
// {0, 1, 2, 3, 0, 1, 2, 0, 1, 2}
// {3, 5, 1, 9, 5, 1, 8, 6, 7, 1}
// 
// Returns: 2
// 
// 
// 
// 3)
// 474
// {44, 77}
// {47, 74}
// {4, 7}
// 
// Returns: 83494518
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

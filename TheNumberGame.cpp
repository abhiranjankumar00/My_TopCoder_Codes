#include <iostream>
#include <ctime>
#include <vector>
#include <list>
#include <queue>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <cassert>
#include <utility>
#include <sstream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <climits>
#include <iterator>
#include <fstream>
using namespace std;

typedef long long 		int64;
typedef vector<int> 		vi;
typedef string 			ST;
typedef stringstream 		SS;
typedef vector< vector<int> > 	vvi;
typedef pair<int,int> 		ii;
typedef vector<string> 		vs;
/*
#if __cplusplus > 199711L	// for g++0x, value of __cplusplus must be greater thana 199711L.
	#define tr(i, c)	for(auto i = begin(c); i != end(c); i++)
#else
	#define tr(i, c)	for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#endif
*/
#define endl		("\n")
#define tr(i, c)	for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define PI		M_PI
#define E 		M_E
#define	eps		1e-9

#define	Sf		scanf
#define	Pf		printf

#define forn(i, n)	for(int i = 0, lets_stop_here = (int)n; i <  lets_stop_here; i++)
#define forab(i, a, b)	for(int i = a, lets_stop_here = (int)b; i <= lets_stop_here; i++)
#define rep(i, a, b)	for(int i = a, lets_stop_here = (int)b; i >= lets_stop_here; i--)

#define	all(c)		(c).begin(), (c).end()
#define	CL(a, b)	memset(a, b, sizeof(a))
#define mp		make_pair
#define pb		push_back

#define	present(x, c)	((c).find(x) != (c).end())	//map & set//
#define	cpresent(x, c)	(find( (c).begin(), (c).end(), x) != (c).end())	//vector & list//

#define read(n)		scanf("%d", &n)
#define write(n)	printf("%d ", n)
#define writeln(n)	printf("%d\n", n)

#if (0 or defined ONLINE_JUDGE)
	#define DEBUG
#else 
	#define DEBUG(x)	cout << #x << " = " << x << "\n"
#endif

class TheNumberGame
{
public:
	string determineOutcome(int A, int B);
};
/*
int reverse(int A) {
	int ret = 0;

	while(A > 0) {
		ret = ret*10 + A% 10;
		A /= 10;
	}
	return ret;
}
*/
string TheNumberGame::determineOutcome (int A, int B) 
{
	SS ss;
	ss << A << " " << B;
	string aS, bS;
	ss >> aS >> bS;
	DEBUG(aS);
	DEBUG(bS);

	string ass = aS, bss = bS;
	reverse(all(ass));
	reverse(all(bss));

	if(aS.find(bS) != string::npos)
		return string("Manao ") + ("wins");
	if(aS.find(bss) != string::npos)
		return string("Manao ") + ("wins");
	if(ass.find(bS) != string::npos)
		return string("Manao ") + ("wins");
	if(ass.find(bS) != string::npos)
		return string("Manao ") + ("wins");

	return string("Manao ") + ("loses");
/*
	bool flag = true;
	string Manao = "Manao ";

	queue <int> qA, qB;
	set <int> sA[2], sB[2];
	qA.push(A);
	qB.push(B);

	int id = 0;
	forn(i, 501) {
		set <int> tmp;
		
		while(qA.empty() == false) {
			int n = qA.front();
			qA.pop();
			sA[id].insert(n);

			tmp.insert(reverse(n));
			tmp.insert(n/10);
		}

		tr(it, tmp)
			qA.push(*it);
		tmp.clear();

		bool flag = true;
		if(i > 0) {
		       	tr(it, sB[1-id]) {
				if(sA[id].find(*it) == sA[id].end()) {
					flag = false;
					break;
				}
			}
			if(flag)
				return "Manao wins";
		}
	

		sB[id].clear();
		while(qB.empty() == false) {
			int n = qB.front();
			qB.pop();
			sB[id].insert(n);

			tmp.insert(reverse(n));
			tmp.insert(n/10);
		}

		tr(it, tmp)
			qB.push(*it);
		tmp.clear();

/ *
		cout << "ht = " << i << endl  << "sA: ";
		tr(it, sA[id])
			write(*it);
		cout << endl;
		cout << "sB: ";
		tr(it, sB[id])
			write(*it);
		cout << endl;
* /
		flag = true;
		tr(it, sB[id]) {
			if(sA[id].find(*it) == sA[id].end()) {
				flag = false;
				break;
			}
		}
		if(flag)
			return "Manao wins";
		id = 1-id;
	}
	return "Manao loses";
*/
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	TheNumberGame *obj;
	string answer;
	obj = new TheNumberGame();
	clock_t startTime = clock();
	answer = obj->determineOutcome(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	string p2;
	
	{
	// ----- test 0 -----
	p0 = 45;
	p1 = 4;
	p2 = "Manao wins";
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 45;
	p1 = 5;
	p2 = "Manao wins";
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 99;
	p1 = 123;
	p2 = "Manao loses";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 2356236;
	p1 = 5666;
	p2 = "Manao loses";
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 12;
	p1 = 21;
	all_right = KawigiEdit_RunTest(4, p0, p1, false, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 99;
	p1 = 123;
	all_right = KawigiEdit_RunTest(5, p0, p1, false, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Manao has recently invented a brand new game called The Number Game. He usually plays this game against his friend.
// 
// Initially, Manao has an integer A and his friend has an integer B. Note that neither A nor B contain a zero digit in their base 10 representation. The players make moves alternatively with Manao starting first. In each move, the player can either reverse his current number, or he can divide it by 10 (using integer division).
// For example, if the current number is 12849, the player can either reverse it to obtain 94821, or he can divide it by 10 to obtain 1284.
// Note that we always round down when using integer division.
// Also note that each player is only allowed to change his own number, and not the number of the other player.
// 
// If after some move the players' numbers become equal, Manao is declared the winner. If after 1000 moves (that is, 500 moves by Manao and 500 by his friend) Manao has not won, he loses. Given A and B, determine whether Manao would win if both players play optimally. Return "Manao wins" or "Manao loses" accordingly.
// 
// DEFINITION
// Class:TheNumberGame
// Method:determineOutcome
// Parameters:int, int
// Returns:string
// Method signature:string determineOutcome(int A, int B)
// 
// 
// CONSTRAINTS
// -A will be between 1 and 999,999,999, inclusive.
// -B will be between 1 and 999,999,999, inclusive.
// -A and B will not contain a zero digit in base 10 representation.
// -A and B will be distinct.
// 
// 
// EXAMPLES
// 
// 0)
// 45
// 4
// 
// Returns: "Manao wins"
// 
// Manao can win in one move by dividing his number by 10.
// 
// 1)
// 45
// 5
// 
// Returns: "Manao wins"
// 
// There are several possible scenarios this game can follow:
// 
// Manao divides by 10 and obtains 4. Now his opponent can reverse his number and obtain 5 again. Obviously, no matter what Manao does in his next 499 moves, his opponent can evade him.
// Manao reverses his number and obtains 54. His opponent reverses his 5. Manao divides 54 by 10 and obtains 5, thus making the numbers equal
// Manao reverses his number and obtains 54. His opponent divides by 10 and obtains zero. Manao will win in three moves, dividing his number by 10 twice.
// 
// Obviously, Manao will not choose to divide by 10 in his first move and will win.
// 
// 2)
// 99
// 123
// 
// Returns: "Manao loses"
// 
// No matter how Manao plays, the opponent can perform reverse moves until the end of the game.
// 
// 3)
// 2356236
// 5666
// 
// Returns: "Manao loses"
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

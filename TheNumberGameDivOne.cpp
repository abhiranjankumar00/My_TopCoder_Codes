#include <iostream>
#include <ctime>
#include <vector>
#include <list>
#include <queue>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <cassert>
#include <utility>
#include <sstream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <climits>
#include <iterator>
#include <fstream>
using namespace std;

typedef long long 		int64;
typedef vector<int> 		vi;
typedef string 			ST;
typedef stringstream 		SS;
typedef vector< vector<int> > 	vvi;
typedef pair<int,int> 		ii;
typedef vector<string> 		vs;
/*
#if __cplusplus > 199711L	// for g++0x, value of __cplusplus must be greater thana 199711L.
	#define tr(i, c)	for(auto i = begin(c); i != end(c); i++)
#else
	#define tr(i, c)	for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#endif
*/
#define endl		("\n")
#define tr(i, c)	for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define PI		M_PI
#define E 		M_E
#define	eps		1e-9

#define	Sf		scanf
#define	Pf		printf

#define forn(i, n)	for(int i = 0, lets_stop_here = (int)n; i <  lets_stop_here; i++)
#define forab(i, a, b)	for(int i = a, lets_stop_here = (int)b; i <= lets_stop_here; i++)
#define rep(i, a, b)	for(int i = a, lets_stop_here = (int)b; i >= lets_stop_here; i--)

#define	all(c)		(c).begin(), (c).end()
#define	cl(a, b)	memset(a, b, sizeof(a))
#define mp		make_pair
#define pb		push_back

#define	present(x, c)	((c).find(x) != (c).end())	//map & set//
#define	cpresent(x, c)	(find( (c).begin(), (c).end(), x) != (c).end())	//vector & list//

#define read(n)		scanf("%d", &n)
#define write(n)	printf("%d ", n)
#define writeln(n)	printf("%d\n", n)

#if (0)
	#define debug 
#else 
	#define debug(x)	cout << #x << " = " << x << "\n"
#endif

class TheNumberGameDivOne
{
public:
	string find(long long n);
};

/*
vi factorize(int n) {
	vi ret;
	for(int f = 2; f*f <= n; f++) {
		if(n % f == 0) {
			ret.pb(f);
			ret.pb(n/f);
		}
	}
	return ret;
}

const int sz = 1e4;
enum {P, N};
int Ans[sz];

int solve(int64 n) {
	if(n < 1 || n >= sz) {
		debug(n);
		assert(n >= 1 && n < sz);
	}
	int &ret = Ans[n];

	if(ret > -1)
		return ret;
	ret = P;

	vi f = factorize(n);

	tr(it, f)
		if(solve(n-*it) == P)
			return ret = N;


	return ret;
}
*/
bool check(int64 n) {
	if((n & (n-1)) != 0)
		return false;
	int64 p = 0;
	for(int i = 0; i < 64; i++)
		if((n & (1ll<<i) ) == n) {
			debug(i);
			return i % 2 == 1 ;
		}
}
int ans(int64 n) {
	if(n % 2 == 1 || check(n))
		return 0;
//		return "Brus";
	return 1;
//	return  "John";
}

string TheNumberGameDivOne::find (long long n) 
{
	return ans(n) == 0? "Brus" : "John";
/*
/ *
	if(ans(n))
		debug("Brus");
		return "Brus";
	debug("");
	return "John";
* /
	cl(Ans, -1);
	vi tmp;

	forab(i, 1, sz-1) {
		if(solve(i) == N) {
			tmp.pb(i);
//			cout << i << ",";
//			cout << i << ": " << solve(i) << endl;
		}
	}

	forab(i, 1, sz-1)
		assert(solve(i) == ans(i));

/ *
	for(int i = 1; i < sz; i++)
		if(i % 2 == 0 && solve(i ) == P)
			cout << i << ", ";
	cout << endl;
	cout << endl;

	for(int i = 1; i < sz; i++)
		if(i % 2 == 1 && solve(i)== N)
			cout << i << ", ";
	cout << endl;
* /
	debug(tmp.size());
	forn(i, tmp.size()) 	if(i == 0 || tmp[i] - tmp[i-1] == 4) {
		cout << tmp[i] << ",";
	}
	cout << endl;

	return solve(n) ? "John" : "Brus";
*/
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, long long p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << p0;
	cout << "]" << endl;
	TheNumberGameDivOne *obj;
	string answer;
	obj = new TheNumberGameDivOne();
	clock_t startTime = clock();
	answer = obj->find(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	long long p0;
	string p1;
	
	{
	// ----- test 0 -----
	p0 = 6ll;
	p1 = "John";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 2ll;
	p1 = "Brus";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 747ll;
	p1 = "Brus";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 128ll;
	p1 = "Brus";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 2ll;
	all_right = KawigiEdit_RunTest(4, p0, false, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 35184372088832ll;
	all_right = KawigiEdit_RunTest(5, p0, false, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	p0 = 17592186044416ll;
	all_right = KawigiEdit_RunTest(6, p0, false, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 7 -----
	p0 = 576460752303423488ll;
	all_right = KawigiEdit_RunTest(7, p0, false, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 8 -----
	p0 = 288230376151711744ll;
	all_right = KawigiEdit_RunTest(8, p0, false, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 9 -----
	p0 = 144115188075855872ll;
	all_right = KawigiEdit_RunTest(9, p0, false, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 10 -----
	p0 = 144115188075855871ll;
	all_right = KawigiEdit_RunTest(10, p0, false, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// John and Brus play a game with a number.
// The game starts with a positive integer n.
// The two players take alternating turns, John starts.
// Each move looks as follows:
// Let C be the current value of the integer.
// The current player has to choose a positive divisor of the number C, other than 1 and C.
// Once he chooses the divisor, he has to subtract it from C.
// The result is the new number with which the other player now starts his move.
// If a player cannot make a valid move, he loses the game.
// 
// 
// For example, if they start with n=15, one possible gameplay can look as follows:
// 
// John takes the number 15, chooses its divisor 3, and decreases the number to 15-3 = 12.
// Brus takes the number 12, chooses its divisor 4, and decreases the number to 12-4 = 8.
// John takes the number 8, chooses its divisor 2, and decreases the number to 8-2 = 6.
// Brus takes the number 6, chooses its divisor 3, and decreases the number to 6-3 = 3.
// John takes the number 3, and as there are no divisors other than 1 and 3, he has no valid move and thus he loses the game.
// 
// 
// 
// You are given the long long n.
// Assume that both players use the optimal strategy while playing the game.
// Return "John" (quotes for clarity) if John wins the game and "Brus" otherwise.
// 
// 
// DEFINITION
// Class:TheNumberGameDivOne
// Method:find
// Parameters:long long
// Returns:string
// Method signature:string find(long long n)
// 
// 
// CONSTRAINTS
// -n will be between 1 and 10^18, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 6
// 
// Returns: "John"
// 
// John has two possible moves: either decrease 6 by 2 or decrease 6 by 3.
// If he chooses the second option, Brus will have no possible moves, hence John will win the game.
// 
// 1)
// 2
// 
// Returns: "Brus"
// 
// 
// 
// 2)
// 747
// 
// Returns: "Brus"
// 
// 
// 
// 3)
// 128
// 
// Returns: "Brus"
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

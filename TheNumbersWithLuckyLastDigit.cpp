#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef string ST;
typedef stringstream SS;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef vector <string> vs;

#define Pf	printf
#define	Sf	scanf

#define	ep	1e-9
#define PI M_PI
#define E M_E

#define	CL(a, b)	memset(a, b, sizeof(a))
#define	mp	make_pair

#define	pb	push_back
#define	SZ(a)	int((a).size())

#define	all(c)	(c).begin(), (c).end()
#define	tr(i, c)	for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())	//vector & list//

#define	forn(i, n)	for(int i = 0; i < n; i++)
#define	forab(i, a, b)	for(int i = a; i <= b; i++)
#define	rep(i, a, b)	for(int i = a; i>=b; i--)

class TheNumbersWithLuckyLastDigit
{
public:
	int find(int n)
	{
		if(n % 10 == 4 || n % 10 == 7)
			return 1;
		
		if(n % 10 == 8)
			return 2;
		
		if(n % 10 == 1)
			return n/10 >= 1 ? 2: -1;
			
		if(n % 10 == 5 || n % 10 == 2)
			return n/10 >= 1 ? 3 : -1;
			
		if(n % 10 == 9 || n % 10 == 6)
			return n/10 >= 1 ? 4 : -1;
		
		if(n % 10 == 3 || n % 10 == 0)
			return n/10 >= 2 ? 5 : -1;
			
		assert(0);	
			
		int ret = -1;

		forn(n4, 100)	forn(n7, 100)	if(n4 + n7 > 0) {
				int m = n4*4 + n7*7;
				if(m <= n && n%10 == m%10)
						ret = ret < 0 ? n4 + n7 : min(n4+n7, ret);
		}
		
		return ret;
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << p0;
	cout << "]" << endl;
	TheNumbersWithLuckyLastDigit *obj;
	int answer;
	obj = new TheNumbersWithLuckyLastDigit();
	clock_t startTime = clock();
	answer = obj->find(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	
	{
	// ----- test 0 -----
	p0 = 99;
	p1 = 4;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 11;
	p1 = 2;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 13;
	p1 = -1;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 1234567;
	p1 = 1;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 100000000;
	all_right = KawigiEdit_RunTest(4, p0, false, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// John believes that the digits 4 and 7 are lucky, and all other digits are unlucky.
// A positive integer is called a lucky number if its last digit is lucky.
// For example, 4, 14 and 207 are lucky numbers, while 40, 741 and 3 are not lucky numbers.
// John would like to represent the int n as a sum of only lucky numbers, and he would like to do this using the minimal possible number of summands.
// Return the number of summands in the representation, or -1 if it is impossible to achieve the goal.
// 
// 
// 
// DEFINITION
// Class:TheNumbersWithLuckyLastDigit
// Method:find
// Parameters:int
// Returns:int
// Method signature:int find(int n)
// 
// 
// CONSTRAINTS
// -n will be between 1 and 1,000,000,000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 99
// 
// Returns: 4
// 
// One of the possible representations is 99=14+24+27+34.
// 
// 1)
// 11
// 
// Returns: 2
// 
// 11=4+7.
// 
// 2)
// 13
// 
// Returns: -1
// 
// It is impossible to achieve the goal.
// 
// 3)
// 1234567
// 
// Returns: 1
// 
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

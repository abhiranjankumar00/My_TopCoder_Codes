#include <iostream>
#include <ctime>
#include <vector>
#include <list>
#include <queue>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <cassert>
#include <utility>
#include <sstream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <climits>
#include <iterator>
#include <fstream>
using namespace std;

typedef long long 		int64;
typedef vector<int> 		vi;
typedef string 			ST;
typedef stringstream 		SS;
typedef vector< vector<int> > 	vvi;
typedef pair<int,int> 		ii;
typedef vector<string> 		vs;
/*
#if __cplusplus > 199711L	// for g++0x, value of __cplusplus must be greater thana 199711L.
	#define tr(i, c)	for(auto i = begin(c); i != end(c); i++)
#else
	#define tr(i, c)	for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#endif
*/
#define endl		("\n")
#define tr(i, c)	for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define PI		M_PI
#define E 		M_E
#define	eps		1e-9

#define	Sf		scanf
#define	Pf		printf

#define forn(i, n)	for(int i = 0, lets_stop_here = (int)n; i <  lets_stop_here; i++)
#define forab(i, a, b)	for(int i = a, lets_stop_here = (int)b; i <= lets_stop_here; i++)
#define rep(i, a, b)	for(int i = a, lets_stop_here = (int)b; i >= lets_stop_here; i--)

#define	all(c)		(c).begin(), (c).end()
#define	cl(a, b)	memset(a, b, sizeof(a))
#define mp		make_pair
#define pb		push_back

#define	present(x, c)	((c).find(x) != (c).end())	//map & set//
#define	cpresent(x, c)	(find( (c).begin(), (c).end(), x) != (c).end())	//vector & list//

#define read(n)		scanf("%d", &n)
#define write(n)	printf("%d ", n)
#define writeln(n)	printf("%d\n", n)

#if (0)
	#define debug 
#else 
	#define debug(x)	cout << #x << " = " << x << "\n"
#endif

class TheQuestionsAndAnswersDivOne
{
public:
	int find(int questions, vector <string> answers);
};

int64 fact[44];
vi cur;
vs ans;
int64 ret, Ans[55][55];

int64 ways(int totalAnsLeft, int uniqueAnsLeft) {
	if(totalAnsLeft < uniqueAnsLeft)
		return 0ll;
	if(totalAnsLeft == uniqueAnsLeft)
		return fact[totalAnsLeft];

	int64 &ret = Ans[totalAnsLeft][uniqueAnsLeft];
	if(ret > -1)
		return ret;
	ret = 0;
	return ret;
}
int TheQuestionsAndAnswersDivOne::find (int questions, vector <string> answers) 
{
	fact[0] = 1;
	forab(i, 1, 40)	fact[i] = i*fact[i-1];
	cur.clear();
	cl(Ans, -1);
	ans = answers;
	ret=0;
	
	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, vector <string> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	TheQuestionsAndAnswersDivOne *obj;
	int answer;
	obj = new TheQuestionsAndAnswersDivOne();
	clock_t startTime = clock();
	answer = obj->find(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	vector <string> p1;
	int p2;
	
	{
	// ----- test 0 -----
	p0 = 2;
	string t1[] = {"No","Yes"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 2;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 2;
	string t1[] = {"No","No","No"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 6;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 3;
	string t1[] = {"Yes","No","No","Yes"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 12;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 3;
	string t1[] = {"Yes","Yes","Yes","No"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 18;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// John and Brus have become very famous people all over the world, especially in Bolivia.
// A man in Bolivia decided to write a story about them.
// To make the story more truthful, he set up an interview with John.
// He prepared a list of distinct simple "Yes" or "No" questions and he enlisted the help of two friends to transcribe the interview.
// Each time he asked a question, one friend wrote down the question while the other friend wrote down the answer.
// He was very nervous when conducting the interview, so he might have asked some of the questions multiple times.
// However, John's answers always remained the same for the same questions.
// 
// 
// 
// Unfortunately, the friend who was writing down the questions lost his list.
// In a desperate attempt to remember the order in which he asked the questions, the Bolivian has decided to write down all the possible ways that he might have asked them.
// He knows for sure that he asked every question from his list at least once.
// You are given an int questions, which is the number of questions that were in his list, and a vector <string> answers, the i-th element of which is the answer to the i-th question he asked.
// Return the total number of ways in which he might have asked the questions.
// 
// 
// 
// DEFINITION
// Class:TheQuestionsAndAnswersDivOne
// Method:find
// Parameters:int, vector <string>
// Returns:int
// Method signature:int find(int questions, vector <string> answers)
// 
// 
// CONSTRAINTS
// -questions will be between 2 and 9, inclusive.
// -answers will contain between questions and 9 elements, inclusive.
// -Each element of answers will be either "Yes" or "No".
// 
// 
// EXAMPLES
// 
// 0)
// 2
// {"No", "Yes"}
// 
// Returns: 2
// 
// The two possible ways are: the first question followed by the second question, or vice versa.
// 
// 1)
// 2
// {"No", "No", "No"}
// 
// Returns: 6
// 
// 2)
// 3
// {"Yes", "No", "No", "Yes"}
// 
// Returns: 12
// 
// 
// 
// 3)
// 3
// {"Yes", "Yes", "Yes", "No"}
// 
// Returns: 18
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

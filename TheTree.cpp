#include <bits/stdc++.h>
using namespace std;

class TheTree
{
public:
	int maximumDiameter(vector <int> cnt);
};

int mxHt ;

void  dfs(int nd, int ht, const vector <vector<int> > &G, vector <bool> &vis ) {
  if(vis[nd])
    return;

  vis[nd] = true;
  mxHt = max(mxHt, ht);

  for(auto it = (G[nd]).begin(); it != (G[nd]).end(); ++it) {
    dfs(*it, ht+1, G, vis);
  }
}

int TheTree::maximumDiameter (vector <int> cnt) 
{
  int N = cnt.size();
  vector <vector<int> > level(N+1);
  map <int, int> par;
  int curNode = 1;

  level[0].push_back(0);
  par[0] = 0;

  for(int i = 0; i < (int)N; ++i) {
    int lvl = i+1;
    cnt[i] = min(cnt[i], 2);

    level[lvl].push_back(curNode);
    par[curNode++] = level[lvl-1].front();

    if(cnt[i]==2) {
      level[lvl].push_back(curNode);
      par[curNode++] = level[lvl-1].back();
    }
  }

//  cout << "curNode = " << curNode << "\n";
  vector <vector<int> > G(curNode);
  vector <bool> vis(curNode);

  for(int i = (int)1; i <= (int)level.size()-1; ++i) {
    for(auto it = (level[i]).begin(); it != (level[i]).end(); ++it) {
      int u = *it;
      int v = par[u];
      G[u].push_back(v);
      G[v].push_back(u);
    }
  }
/*{{{*/
  /*
  for(auto it = (G).begin(); it != (G).end(); ++it) {
    printf("%2d: ", (int)(it - G.begin()));
    for(auto jt = (*it).begin(); jt != (*it).end(); ++jt) {
      printf("%2d ", *jt);
    }
    cout << "\n";
  }
  cout << "\n";
  */
/*}}}*/
	int ret = 0;
  for(int i = 0; i < (int)curNode; ++i) {
    fill(vis.begin(), vis.end(), false);
    mxHt = 0;
    dfs(i, 0, G, vis);
//    printf("(node = %d, mxHt = %d), ", i, mxHt);
    ret = max(ret, mxHt);
  }
 // cout << "\n";
	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	TheTree *obj;
	int answer;
	obj = new TheTree();
	clock_t startTime = clock();
	answer = obj->maximumDiameter(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	vector <int> p0;
	int p1;
	
	// ----- test 0 -----
	disabled = false;
	p0 = {3};
	p1 = 2;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = {2,2};
	p1 = 4;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = {4,1,2,4};
	p1 = 5;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = {4,2,1,3,2,5,7,2,4,5,2,3,1,13,6};
	p1 = 21;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = {1};
	p1 = 1;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 5 -----
	disabled = false;
	p0 = {1,1,1};
	p1 = 3;
	all_right = (disabled || KawigiEdit_RunTest(5, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 6 -----
	disabled = false;
	p0 = {1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000};
	p1 = 100;
	all_right = (disabled || KawigiEdit_RunTest(6, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Manao is working in the Tree Research Center.
// It may come as a surprise that the trees they research are not the ones you can see in a park.
// Instead, they are researching special graphs.
// (See Notes for definitions of terms related to these trees.)
// 
// Manao's daily job is reconstructing trees, given some partial information about them.
// Today Manao faced a difficult task.
// He needed to find the maximum possible diameter of a tree, given the following information:
// 
// 
// Some vertex in the tree is called V.
// The distance between V and the farthest vertex from V is D.
// For each x between 1 and D, inclusive, Manao knows the number of vertices such that their distance from V is x.
// 
// 
// You are given a vector <int> cnt containing D strictly positive integers.
// For each i, the i-th element of cnt is equal to the number of vertices which have distance i+1 from V.
// Please help Manao with his task.
// Return the maximum possible diameter of a tree that matches the given information.
// 
// 
// DEFINITION
// Class:TheTree
// Method:maximumDiameter
// Parameters:vector <int>
// Returns:int
// Method signature:int maximumDiameter(vector <int> cnt)
// 
// 
// NOTES
// -A tree is a connected graph with no cycles. Note that each tree with N vertices has precisely N-1 edges.
// -The distance between two vertices of a tree is the smallest number of edges one has to traverse in order to get from one of the vertices to the other one.
// -The diameter of a tree is the maximum of all pairwise distances. In other words, the diameter is the distance between the two vertices that are the farthest away from each other.
// 
// 
// CONSTRAINTS
// -cnt will contain between 1 and 50 elements, inclusive.
// -Each element of cnt will be between 1 and 1000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {3}
// 
// Returns: 2
// 
// The only tree that matches the given information is shown below. The vertex V is red.
// 
// 
// 
// 
// 1)
// {2, 2}
// 
// Returns: 4
// 
// There are two trees which correspond to the given partial information:
// 
// 
// 
// The tree on the left has diameter 3 and the tree on the right has diameter 4.
// 
// 2)
// {4, 1, 2, 4}
// 
// Returns: 5
// 
// This is one example of a tree that corresponds to the given constraints and has the largest possible diameter.
// 
// 
// 
// 3)
// {4, 2, 1, 3, 2, 5, 7, 2, 4, 5, 2, 3, 1, 13, 6}
// 
// Returns: 21
// 
// 
// 
// END KAWIGIEDIT TESTING

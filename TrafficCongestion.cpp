#include <iostream>
#include <ctime>
#include <vector>
#include <list>
#include <queue>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <cassert>
#include <utility>
#include <sstream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <climits>
#include <iterator>
#include <fstream>
using namespace std;

typedef long long 		int64;
typedef vector<int> 		vi;
typedef string 			ST;
typedef stringstream 		SS;
typedef vector< vector<int> > 	vvi;
typedef pair<int,int> 		ii;
typedef vector<string> 		vs;
/*
#if __cplusplus > 199711L	// for g++0x, value of __cplusplus must be greater thana 199711L.
	#define tr(i, c)	for(auto i = begin(c); i != end(c); i++)
#else
	#define tr(i, c)	for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#endif
*/
#define endl		("\n")
#define tr(i, c)	for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define PI		M_PI
#define E 		M_E
#define	eps		1e-9

#define	Sf		scanf
#define	Pf		printf

#define forn(i, n)	for(int i = 0, lets_stop_here = (int)n; i <  lets_stop_here; i++)
#define forab(i, a, b)	for(int i = a, lets_stop_here = (int)b; i <= lets_stop_here; i++)
#define rep(i, a, b)	for(int i = a, lets_stop_here = (int)b; i >= lets_stop_here; i--)

#define	all(c)		(c).begin(), (c).end()
#define	cl(a, b)	memset(a, b, sizeof(a))
#define mp		make_pair
#define pb		push_back

#define	present(x, c)	((c).find(x) != (c).end())	//map & set//
#define	cpresent(x, c)	(find( (c).begin(), (c).end(), x) != (c).end())	//vector & list//

#define read(n)		scanf("%d", &n)
#define write(n)	printf("%d ", n)
#define writeln(n)	printf("%d\n", n)

//#define debug(x)
#define debug(x)	cout << #x << " = " << x << "\n"

class TrafficCongestion
{
public:
	int theMinCars(int treeHeight);
};


const long long p = 1000000007ll;
const long long sz = 1e6 + 11;
long long pow2[sz];

long long solve(int ht) {
	if(ht == 0 || ht == 1)
		return 1ll;
	long long ret = solve(ht-2);
	ret += pow2[ht-1];
	ret %= p;
	return ret;
}

int TrafficCongestion::theMinCars (int treeHeight) 
{
	pow2[0] = 1ll;
	for(int i = 1; i <= sz-1; ++i) {
		pow2[i] = (2ll*pow2[i-1]) % p;
	}
	return (int)solve(treeHeight);
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << p0;
	cout << "]" << endl;
	TrafficCongestion *obj;
	int answer;
	obj = new TrafficCongestion();
	clock_t startTime = clock();
	answer = obj->theMinCars(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	
	{
	// ----- test 0 -----
	p0 = 1;
	p1 = 1;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 2;
	p1 = 3;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 3;
	p1 = 5;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 585858;
	p1 = 548973404;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 0;
	p1 = 1;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 1000000;
	p1 = 490028042;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	p0 = 999999;
	all_right = KawigiEdit_RunTest(6, p0, false, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// There are some cities and some roads connecting them together.
// The road network has the topology of a perfect binary tree (see below for a picture), in which the cities are nodes and the roads are edges.
// 
// You are given the int treeHeight giving the height of the tree.
// (The height of a perfect binary tree is the number of edges on the path between the root node and any leaf node.)
// Thus, there are 2^(treeHeight+1)-1 cities and 2^(treeHeight+1)-2 roads in total.
// 
// The picture below shows how the road network looks like when treeHeight = 2.
// 
// 
// 
// We want to send some cars into the road network.
// Each car will be traveling from its starting city to its destination city without visiting the same city twice.
// (Note that the route of each car is uniquely determined by its starting and its destination city.)
// It is possible for the starting city to be equal to the destination city, in that case the car only visits that single city.
// 
// Our goal is to send out the cars in such a way that each city will be visited by exactly one car.
// Let X be the smallest number of cars we need in order to do so.
// Compute and return the value X modulo 1,000,000,007.
// 
// DEFINITION
// Class:TrafficCongestion
// Method:theMinCars
// Parameters:int
// Returns:int
// Method signature:int theMinCars(int treeHeight)
// 
// 
// CONSTRAINTS
// -treeHeight will be between 0 and 1,000,000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 1
// 
// Returns: 1
// 
// In this case, one car can visit all the cities.
// 
// 
// 
// 1)
// 2
// 
// Returns: 3
// 
// Here is one way to visit all cities exactly once by three cars:
// 
// 
// 
// 
// 2)
// 3
// 
// Returns: 5
// 
// 
// 
// 3)
// 585858
// 
// Returns: 548973404
// 
// 
// 
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

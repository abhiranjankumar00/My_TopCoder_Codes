#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef string ST;
typedef stringstream SS;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef vector <string> vs;

#define Pf	printf
#define	Sf	scanf

#define	ep	1e-9
#define PI M_PI
#define E M_E

#define	CL(a, b)	memset(a, b, sizeof(a))
#define	mp	make_pair

#define	pb	push_back

#define	all(c)	(c).begin(), (c).end()
#define	tr(i, c)	for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())	//vector & list//

#define	forn(i, n)	for(int i = 0; i < n; i++)
#define	forab(i, a, b)	for(int i = a; i <= b; i++)
#define	rep(i, a, b)	for(int i = a; i>=b; i--)

class TwiceString
{
public:
	string getShortest(string s)
	{
		  int ok, n, i, j, nr = 0;
		  n = s.length()- 1;

		  for(i = 1; i<=n; i++) {
			    ok = 1;
			    for(j = 0; j <= i-1;j++)
					if(s[j] != s[n-i+1+j])
						  ok = 0;
			    if(ok)
					nr = i;
		  }
		  j = n+1;
		  ST s2;
		  for(i = 0; i <= n; i++)
			    s2.pb(s[i]);

		  for(i = nr; i<=n; i++) {
			    s2.pb(s[i]);
			    j++;
		  }
		  return s2;
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	TwiceString *obj;
	string answer;
	obj = new TwiceString();
	clock_t startTime = clock();
	answer = obj->getShortest(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	string p1;
	
	{
	// ----- test 0 -----
	p0 = "aba";
	p1 = "ababa";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "xxxxx";
	p1 = "xxxxxx";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "topcoder";
	p1 = "topcodertopcoder";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "abracadabra";
	p1 = "abracadabracadabra";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "abab";
	all_right = KawigiEdit_RunTest(4, p0, false, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = "abc";
	all_right = KawigiEdit_RunTest(5, p0, false, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	p0 = "ababcab";
	all_right = KawigiEdit_RunTest(6, p0, false, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// You are given a string s.  Return the shortest string which contains s as a contiguous substring twice.
// 
// Note that two occurrences of s may overlap. For example, "ababa" contains "aba" twice.
// 
// 
// DEFINITION
// Class:TwiceString
// Method:getShortest
// Parameters:string
// Returns:string
// Method signature:string getShortest(string s)
// 
// 
// NOTES
// -The shortest string which contains s as a contiguous substring twice is always unique.
// 
// 
// CONSTRAINTS
// -s will contain between 1 and 50 characters, inclusive. 
// -Each character in s will be a lowercase letter ('a'-'z').  
// 
// 
// EXAMPLES
// 
// 0)
// "aba"
// 
// Returns: "ababa"
// 
// This is the example shown in the problem statement. 
// 
// 1)
// "xxxxx"
// 
// Returns: "xxxxxx"
// 
// 
// 
// 2)
// "topcoder"
// 
// Returns: "topcodertopcoder"
// 
// 
// 
// 3)
// "abracadabra"
// 
// Returns: "abracadabracadabra"
// 
// 
// 
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

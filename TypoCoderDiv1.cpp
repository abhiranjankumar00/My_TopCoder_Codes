#include <bits/stdc++.h>
using namespace std;

class TypoCoderDiv1
{
public:
	int getmax(vector <int> D, int X);
};


int ret;
int N;
vector <int> D;

int dp[55][2300];
/*
void dfs(int id, long long cur, int curAns){
//    printf("(%d, %lld)  ", id, cur);
    if(id == N) {
        ret = max(ret, curAns);
        return;
    }
    if(cur >= 2200) {
        if(cur - D[id] < 2200)
            dfs(id+1, cur-D[id], curAns+1);
    }
    else {
        dfs(id+1, cur+D[id], curAns + (cur+D[id] >= 2200?1:0));
        dfs(id+1, max(0ll, cur-D[id]), curAns);
    }
}
*/

int solve(int id, int p) {
    if(id == N)
        return 0;
    int &ret = dp[id][p];
    if(ret > -1)
        return ret;
    ret = 0;

    if(id+1 == N) {
        if(p + D[id] >= 2200)
            ret = 1;
        else
            ret = 0;
    }
    else {
        ret = solve(id+1, max(0, p - D[id]));
        if(p+D[id] < 2200)
            ret = max(ret, solve(id+1, p+D[id]));

//        printf("p = %d, D[%d] = %d,  p+D[id] = %d, p+D[id]-D[id+1] = %d", p, id, D[id], p+D[id], p+D[id]-D[id+1]);
//        printf(" -> %d\n", (p+D[id] >= 2200 && p+D[id]-D[id+1] < 2200)?1:0);
        if(p+D[id] >= 2200 && p+D[id]-D[id+1] < 2200)
            ret = max(ret, 2 + solve(id+2, max( 0, p+D[id]-D[id+1])));
    }
//    printf("id = %d, p = %d, ret = %d\n", id, p, ret);
    return ret;
}
int TypoCoderDiv1::getmax (vector <int> _D, int X)
{
    ret = 0;
    D = _D;
    N = _D.size();
    memset(dp, -1, sizeof(dp));
    return solve(0, X);
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	TypoCoderDiv1 *obj;
	int answer;
	obj = new TypoCoderDiv1();
	clock_t startTime = clock();
	answer = obj->getmax(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	vector <int> p0;
	int p1;
	int p2;
	
	// ----- test 0 -----
	disabled = false;
	p0 = {100,200,100,1,1};
	p1 = 2000;
	p2 = 3;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = {0,0,0,0,0};
	p1 = 2199;
	p2 = 0;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = {90000,80000,70000,60000,50000,40000,30000,20000,10000};
	p1 = 0;
	p2 = 1;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = {1000000000,1000000000,10000,100000,2202,1};
	p1 = 1000;
	p2 = 4;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = {2048,1024,5012,256,128,64,32,16,8,4,2,1,0};
	p1 = 2199;
	p2 = 0;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 5 -----
	disabled = false;
	p0 = {61,666,512,229,618,419,757,217,458,883,23,932,547,679,565,767,513,798,870,31,379,294,929,892,173,127,796,353,913,115,802,803,948,592,959,127,501,319,140,694,851,189,924,590,790,3,669,541,342,272};
	p1 = 1223;
	p2 = 29;
	all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 6 -----
	disabled = false;
	p0 = {34,64,43,14,58,30,2,16,90,58,35,55,46,24,14,73,96,13,9,42,64,36,89,42,42,64,52,68,53,76,52,54,23,88,32,52,28,96,70,32,26,3,23,78,47,23,54,30,86,32};
	p1 = 1328;
	p2 = 20;
	all_right = (disabled || KawigiEdit_RunTest(6, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// TypoCoder is a programming contest like TopCoder.
// TypoCoder also has a rating system.
// There are two types of coders in TypoCoder: brown coders and ciel coders.
// A brown coder is a coder whose rating is greater than or equal to 2200.
// A ciel coder is a coder whose rating is less than 2200.
// 
// Cat Lower competes in TypoCoder.
// He is currently a ciel coder.
// His rating at the end of the current year is X.
// 
// Next year there will be some contests.
// In each of those contests, Cat Lower can either try his best or lose on purpose.
// For each i, the i-th contest (0-based index) has weight D[i].
// If Cat Lower tries his best in the i-th contest, his rating will increase by D[i].
// If he decides to lose on purpose instead, his rating will decrease by D[i], but not below zero.
// Formally, his rating will decrease by min(D[i],his rating before the contest).
// 
// Cat Lower loves being a ciel coder.
// Therefore, he must never be a brown coder twice in a row.
// That is, whenever Cat Lower becomes a brown coder, he must be ciel again after the next contest (if there are any contests left).
// 
// TypoCoder awards "Chameleon coder of the year" to the coder whose color changed the most times during the year.
// 
// You are given the vector <int> D and the int X.
// Return the maximal number of color changes Cat Lower can have next year.
// 
// 
// DEFINITION
// Class:TypoCoderDiv1
// Method:getmax
// Parameters:vector <int>, int
// Returns:int
// Method signature:int getmax(vector <int> D, int X)
// 
// 
// CONSTRAINTS
// -D will contain between 1 and 50 elements, inclusive.
// -Each element of D will be between 0 and 1,000,000,000 (10^9), inclusive.
// -X will be between 0 and 2199, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {100,200,100,1,1}
// 2000
// 
// Returns: 3
// 
// When he increase at the second, the third and the last competition and decrease at the first and the fourth competition, he can change the color 3 times and this is the maximal.
// 
// 1)
// {0,0,0,0,0}
// 2199
// 
// Returns: 0
// 
// He cannot be a brown coder in this case.
// 
// 2)
// {90000,80000,70000,60000,50000,40000,30000,20000,10000}
// 0
// 
// Returns: 1
// 
// Note that Cat Lower always has at least one valid strategy: if he decides to lose in all contests, he will remain ciel forever.
// In this test case, the optimal strategy for him is to lose in the first eight contests and then to win in the last one.
// Note that before the last contest his rating will be 0.
// 
// 3)
// {1000000000,1000000000,10000,100000,2202,1}
// 1000
// 
// Returns: 4
// 
// 
// 
// 4)
// {2048,1024,5012,256,128,64,32,16,8,4,2,1,0}
// 2199
// 
// Returns: 0
// 
// 
// 
// 5)
// {61,666,512,229,618,419,757,217,458,883,23,932,547,679,565,767,513,798,870,31,379,294,929,892,173,127,796,353,913,115,802,803,948,592,959,127,501,319,140,694,851,189,924,590,790,3,669,541,342,272}
// 1223
// 
// Returns: 29
// 
// 
// 
// 6)
// {34,64,43,14,58,30,2,16,90,58,35,55,46,24,14,73,96,13,9,42,64,36,89,42,42,64,52,68,53,76,52,54,23,88,32,52,28,96,70,32,26,3,23,78,47,23,54,30,86,32}
// 1328
// 
// Returns: 20
// 
// 
// 
// END KAWIGIEDIT TESTING

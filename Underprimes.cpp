#include <bits/stdc++.h>
using namespace std;

class Underprimes
{
public:
	int howMany(int A, int B);
};

const int mx = 1e5 + 111;
int numPrimeDivisors[mx];

int Underprimes::howMany (int A, int B) 
{
	memset(numPrimeDivisors, 0, sizeof(numPrimeDivisors));
	int ret = 0;

	for(int i = 2; i < mx; ++i) {
		if(numPrimeDivisors[i] == 0) {
			for(int j = 2*i; j < mx; j+=i) {
				int n = j;
				while(n % i == 0) {
					numPrimeDivisors[j]++;
					n/=i;
				}
			}
		}
	}
	for(int i = A; i <= B; ++i) {
		if(numPrimeDivisors[i] > 1 && numPrimeDivisors[numPrimeDivisors[i]] == 0)
			ret++;
	}
	
	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	Underprimes *obj;
	int answer;
	obj = new Underprimes();
	clock_t startTime = clock();
	answer = obj->howMany(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	p0 = 2;
	p1 = 10;
	p2 = 5;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 100;
	p1 = 105;
	p2 = 2;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 17;
	p1 = 17;
	p2 = 0;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 123;
	p1 = 456;
	p2 = 217;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// The prime factorization of a number X is the list of prime numbers that multiply together to form X.  For example, the prime factorization of 12 is 2 * 2 * 3.  Note that 1 is not a prime number.
// An underprime is a number whose prime factorization contains a prime number of elements.  For example, 12 is an underprime because its prime factorization contains 3 elements, and 3 is a prime number.  Given ints A and B, return the number of underprimes between A and B, inclusive.
// 
// DEFINITION
// Class:Underprimes
// Method:howMany
// Parameters:int, int
// Returns:int
// Method signature:int howMany(int A, int B)
// 
// 
// NOTES
// -A positive integer number is called prime if it has exactly two divisors - 1 and itself. For example, 2, 3, 5 and 7 are prime numbers, and 4, 6, 8 and 9 are not prime. By convention, 1 is not considered to be a prime number.
// -All prime factorizations of the same integer always contain the same prime numbers and can only differ by the order of primes within them.
// 
// 
// CONSTRAINTS
// -A will be between 2 and 100000, inclusive.
// -B will be between A and 100000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 2
// 10
// 
// Returns: 5
// 
// The underprimes in this interval are: 4, 6, 8, 9, 10.
// 
// 1)
// 100
// 105
// 
// Returns: 2
// 
// The underprimes in this interval are 102 = 2 * 3 * 17 and 105 = 3 * 5 * 7.
// 
// 2)
// 17
// 17
// 
// Returns: 0
// 
// 17 is a prime number, so its prime factorization contains one element. 1 is not a prime, so 17 is not an underprime.
// 
// 3)
// 123
// 456
// 
// Returns: 217
// 
// 
// 
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

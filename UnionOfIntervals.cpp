#include <bits/stdc++.h>
using namespace std;

class UnionOfIntervals
{
public:
	int nthElement(vector <int> lowerBound, vector <int> upperBound, int n);
};

long long elementLower(long long val, const vector <long long> &lower, const vector <long long> &upper) {
  long long ret = 0;
  for(int i = 0; i < (int)lower.size(); ++i) {
    if(val < lower[i])
      ret += 0;
    else if(val > upper[i])
      ret += upper[i] - lower[i] + 1;
    else
      ret += val - lower[i];
  }
  return ret;
}

int UnionOfIntervals::nthElement (vector <int> _lowerBound, vector <int> _upperBound, int n) 
{
  vector <long long> lowerBound, upperBound;
  for(int i = 0; i < (int)_lowerBound.size(); ++i) {
    lowerBound.push_back(_lowerBound[i]);
    upperBound.push_back(_upperBound[i]);
  }
  long long l = -2e15, r = 2e15;

  while(l < r) {
    long long mid = (l+r+1)/2;
    if(elementLower(mid, lowerBound, upperBound) <= n)
      l = mid;
    else
      r = mid-1;
  }
	
	return (int)l;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << p2;
	cout << "]" << endl;
	UnionOfIntervals *obj;
	int answer;
	obj = new UnionOfIntervals();
	clock_t startTime = clock();
	answer = obj->nthElement(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	vector <int> p0;
	vector <int> p1;
	int p2;
	int p3;
	
	// ----- test 0 -----
	disabled = false;
	p0 = {1,5};
	p1 = {3,7};
	p2 = 4;
	p3 = 6;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = {10,30};
	p1 = {40,50};
	p2 = 2;
	p3 = 30;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = {-1500000000};
	p1 = {1500000000};
	p2 = 1500000091;
	p3 = 91;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Given a list of integers, find the n-th smallest number, i.e., the number that appears at index n (0-based) when they are sorted in non-descending order. The numbers will be given in intervals. For example, the intervals (1, 3) and (5, 7) represent the list of numbers { 1, 2, 3, 5, 6, 7 }. A number may be present in more than one interval, and it appears in the list once for each interval it is in. For example, the intervals (1, 4) and (3, 5) represent the list of numbers { 1, 2, 3, 3, 4, 4, 5 }.
// 
// The intervals will be given as two vector <int>s, lowerBound and upperBound. The i-th elements of these vector <int>s represent the smallest and largest numbers in the i-th interval, inclusive.
// 
// DEFINITION
// Class:UnionOfIntervals
// Method:nthElement
// Parameters:vector <int>, vector <int>, int
// Returns:int
// Method signature:int nthElement(vector <int> lowerBound, vector <int> upperBound, int n)
// 
// 
// NOTES
// -n is 0-based, meaning that the first element is indexed 0.
// -A sequence is sorted in non-descending order if and only if for each pair of indices i and j, where i is smaller than j, the element at position i is less than or equal to the element at position j.
// 
// 
// CONSTRAINTS
// -lowerBound will contain between 1 and 50 elements, inclusive.
// -upperBound will contain the same number of elements as lowerBound.
// -Each element of lowerBound and upperBound will be between -2,000,000,000 and 2,000,000,000, inclusive.
// -The i-th element of lowerBound will be less than or equal to the i-th element of upperBound.
// -n will be a non-negative integer less than the total number of elements in the list, but no greater than 2,000,000,000.
// 
// 
// EXAMPLES
// 
// 0)
// { 1, 5 }
// { 3, 7 }
// 4
// 
// Returns: 6
// 
// The numbers are 1, 2, 3, 5, 6 and 7. The number at index 4 is 6.
// 
// 1)
// { 1, 3 }
// { 4, 5 }
// 3
// 
// Returns: 3
// 
// 2)
// { -1500000000 }
// { 1500000000 }
// 1500000091
// 
// Returns: 91
// 
// Watch out for overflow errors.
// 
// END KAWIGIEDIT TESTING

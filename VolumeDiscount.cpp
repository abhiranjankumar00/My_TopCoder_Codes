#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef string ST;
typedef stringstream SS;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef vector <string> vs;

#define Pf	printf
#define	Sf	scanf

#define	ep	1e-9
#define PI M_PI
#define E M_E

#define	CL(a, b)	memset(a, b, sizeof(a))
#define	mp	make_pair

#define	pb	push_back

#define	all(c)	(c).begin(), (c).end()
#define	tr(i, c)	for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())	//vector & list//

#define forn(i, n)	for(int i = 0, loop_ends_here = (int)n; i < loop_ends_here; i++)
#define forab(i, a, b)	for(int i = a, loop_ends_here = (int) b; i <= loop_ends_here; i++)
#define rep(i, a, b)	for(int i = a, loop_ends_here = (int)b; i>=loop_ends_here; i--)

struct Units {
	int nUnits, cost;
	Units(int u, int c) {
		nUnits = u;		cost = c;
	}
};

int ans[111];

vector <Units> units;

int solve(int rem) {
	if(rem <= 0)	return 0;
	int &ret = ans[rem];
	if(ret >= 0)	return ret;
	
	ret = 99999999;
	
	tr(it, units) {
		ret = min(ret, it->cost + solve(rem - it->nUnits));
	}
	return ret;
}


class VolumeDiscount
{
public:
	int bestDeal(vector <string> priceList, int quantity)
	{
		units.clear();
		CL(ans, -1);		ans[0] = 0;
		tr(it, priceList) {
			int x, y;
			sscanf(it->c_str(), "%d %d", &x, &y);
			units.pb(Units(x, y));
		}
		int ret = solve(quantity);
		
		forn(i, quantity+1) 
			Pf("rem = %d, ans = %d\n", i, ans[i]);
		
		return ret;
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	VolumeDiscount *obj;
	int answer;
	obj = new VolumeDiscount();
	clock_t startTime = clock();
	answer = obj->bestDeal(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	string t0[] = {"1 10","5 45"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 10;
	p2 = 90;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"1 8","5 45"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 10;
	p2 = 80;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"99 913","97 173","50 464","80 565"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 18;
	p2 = 173;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"2 272","1 166","10 993"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 81;
	p2 = 8110;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"5 10","4 8","1 500"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 97;
	p2 = 194;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// When a customer buys large quantities of a product, frequently the seller will offer a volume discount.  For instance, one unit might cost 10 dollars, but might be offered in packages of 5 for 45 dollars.  In such a case, it always makes sense buy the bulk lots to save money.  In some other cases, however, it might not always make sense.  Suppose a single unit were on sale for 8 dollars.  In such a case, purchasing single units would be less expensive than purchasing a 5-pack.
// 
// You are given a vector <string> priceList describing the number of units available in each bundle, and the cost of the bundle.  Each element is of the form "units cost" (quotes added for clarity).  You are also given an int quantity, the number of units you wish to purchase.
// 
// Return an int indicating the best possible cost to purchase at least the desired quantity of units.
// 
// DEFINITION
// Class:VolumeDiscount
// Method:bestDeal
// Parameters:vector <string>, int
// Returns:int
// Method signature:int bestDeal(vector <string> priceList, int quantity)
// 
// 
// CONSTRAINTS
// -priceList will contain between 1 and 5 elements, inclusive.
// -Each element of priceList will be formatted as described in the problem statement.
// -units will be an integer between 1 and 99, inclusive, with no leading zeroes
// -cost will be an integer between 1 and 999, inclusive, with no leading zeroes.  
// -No two values of units will be the same.
// -quantity will be between 1 and 99, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {"1 10", "5 45"}
// 10
// 
// Returns: 90
// 
// The first example suggested in the problem statement.
// 
// 1)
// {"1 8", "5 45"}
// 10
// 
// Returns: 80
// 
// The second example suggested in the problem statement.
// 
// 2)
// {"99 913", "97 173", "50 464", "80 565"} 	
// 18
// 
// Returns: 173
// 
// Here, every package has more units than we need, so we pick the cheapest one.
// 
// 
// 3)
// {"2 272","1 166","10 993"}
// 81
// 
// Returns: 8110
// 
// END KAWIGIEDIT TESTING




//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

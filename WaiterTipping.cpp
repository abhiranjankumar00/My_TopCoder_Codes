#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef string ST;
typedef stringstream SS;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef vector <string> vs;

#define Pf	printf
#define	Sf	scanf

#define	ep	1e-9
#define PI M_PI
#define E M_E

#define	CL(a, b)	memset(a, b, sizeof(a))
#define	mp	make_pair

#define	pb	push_back

#define	all(c)	(c).begin(), (c).end()
#define	tr(i, c)	for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())	//vector & list//

#define forn(i, n)	for(int i = 0, loop_ends_here = (int)n; i < loop_ends_here; i++)
#define forab(i, a, b)	for(int i = a, loop_ends_here = (int) b; i <= loop_ends_here; i++)
#define rep(i, a, b)	for(int i = a, loop_ends_here = (int)b; i>=loop_ends_here; i--)

class WaiterTipping
{
public:
	int maxPercent(int total, int taxPercent, int money)
	{
		forn(i, money+1)
			if(total + (int)(total*taxPercent/100.0) + (int)(total*i/100.0) > money)
				return i-1;
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2;
	cout << "]" << endl;
	WaiterTipping *obj;
	int answer;
	obj = new WaiterTipping();
	clock_t startTime = clock();
	answer = obj->maxPercent(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	int p3;
	
	{
	// ----- test 0 -----
	p0 = 500;
	p1 = 10;
	p2 = 600;
	p3 = 10;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 500;
	p1 = 10;
	p2 = 604;
	p3 = 10;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 850;
	p1 = 8;
	p2 = 870;
	p3 = -1;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 226;
	p1 = 48;
	p2 = 584;
	p3 = 111;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 123;
	p1 = 52;
	p2 = 696;
	p3 = 415;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 500;
	p1 = 10;
	p2 = 550;
	p3 = 0;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// You have just finished eating your Chinese food, and the waiter has brought you the bill.
// You note the untaxed total on the bill, given as an int in total.
// Additionally, you know the tax rate in your locale, given as an int in taxPercent.
// Lastly, you have counted how much money you have, given as an int in money.
// 
// Since you feel the service was excellent, you want to give as large a tip as you can afford. You are to return the largest integral value of tip such that: 
// total + floor(total*taxPercent/100) + floor(total*tip/100) <= money 
// If there is no non-negative value of tip that satisfies the above inequality, return -1 (you don't have enough money to pay the bill and tax). 
// 
// 
// DEFINITION
// Class:WaiterTipping
// Method:maxPercent
// Parameters:int, int, int
// Returns:int
// Method signature:int maxPercent(int total, int taxPercent, int money)
// 
// 
// NOTES
// -total and money are given in cents
// -Although certainly unusual, it is perfectly permissible to leave a tip that is larger than the original bill.
// 
// 
// CONSTRAINTS
// -total and money will be between between 100 and 100000, inclusive.
// -taxPercent will be between 0 and 100, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 500
// 10
// 600
// 
// Returns: 10
// 
// Here, you pay 500 for the bill and 50 for tax, leaving you 50 for the tip, which is 10% of the original bill total.
// 
// 1)
// 500
// 10
// 604
// 
// Returns: 10
// 
// Similar to above, but here you have 54 cents for tip, but this will still only get you 10%.
// 
// 2)
// 850
// 8
// 870
// 
// Returns: -1
// 
// Uh-oh, looks like you don't have enough money!
// 
// 3)
// 226
// 48
// 584
// 
// Returns: 111
// 
// 226 + floor(226*48/100) + floor(226*111/100) =
// 226 + floor(10848/100) + floor(25086/100) = 
// 226 + 108 + 250 =
// 584
// 
// 4)
// 123
// 52
// 696
// 
// Returns: 415
// 
// 123 + floor(123*52/100) + floor(123*415/100) =
// 123 + floor(6396/100) + floor(51045/100) = 
// 123 + 63 + 510 = 
// 696
// 
// 5)
// 500
// 10
// 550
// 
// Returns: 0
// 
// END KAWIGIEDIT TESTING




//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

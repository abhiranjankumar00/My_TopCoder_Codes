#include <iostream>
#include <ctime>
#include <vector>
#include <list>
#include <queue>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <cassert>
#include <utility>
#include <sstream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <climits>
#include <iterator>
#include <fstream>
using namespace std;

typedef long long 		int64;
typedef vector<int> 		vi;
typedef string 			ST;
typedef stringstream 		SS;
typedef vector< vector<int> > 	vvi;
typedef pair<int,int> 		ii;
typedef vector<string> 		vs;
/*
#if __cplusplus > 199711L	// for g++0x, value of __cplusplus must be greater thana 199711L.
	#define tr(i, c)	for(auto i = begin(c); i != end(c); i++)
#else
	#define tr(i, c)	for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#endif
*/
#define endl		("\n")
#define tr(i, c)	for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define PI		M_PI
#define E 		M_E
#define	eps		1e-9

#define	Sf		scanf
#define	Pf		printf

#define forn(i, n)	for(int i = 0, lets_stop_here = (int)n; i <  lets_stop_here; i++)
#define forab(i, a, b)	for(int i = a, lets_stop_here = (int)b; i <= lets_stop_here; i++)
#define rep(i, a, b)	for(int i = a, lets_stop_here = (int)b; i >= lets_stop_here; i--)

#define	all(c)		(c).begin(), (c).end()
#define	cl(a, b)	memset(a, b, sizeof(a))
#define mp		make_pair
#define pb		push_back

#define	present(x, c)	((c).find(x) != (c).end())	//map & set//
#define	cpresent(x, c)	(find( (c).begin(), (c).end(), x) != (c).end())	//vector & list//

#define read(n)		scanf("%d", &n)
#define write(n)	printf("%d ", n)
#define writeln(n)	printf("%d\n", n)

//#define debug(x)
#define debug(x)	cout << #x << " = " << x << "\n"

class WebsiteRank2
{
public:
	long long countVotes(vector <string> votes, string website);
};

long long WebsiteRank2::countVotes (vector <string> votes, string website) 
{
	long long ret;
	
	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, string p1, bool hasAnswer, long long p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "\"" << p1 << "\"";
	cout << "]" << endl;
	WebsiteRank2 *obj;
	long long answer;
	obj = new WebsiteRank2();
	clock_t startTime = clock();
	answer = obj->countVotes(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	string p1;
	long long p2;
	
	{
	// ----- test 0 -----
	string t0[] = {"C A B"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "C";
	p2 = 3ll;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"A B C D","B C D","C D"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "A";
	p2 = 8ll;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"A"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "A";
	p2 = 1ll;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"A B","B A"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "A";
	p2 = 1ll;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"A B C D E F","B A","C B","D B"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "A";
	p2 = 3ll;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {"MYSITE OTHERSITE ANOTHERSITE THIRDSITE"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "MYSITE";
	p2 = 4ll;
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// The job of a search engine is to provide relevant results to search queries.  However, most real search queries 
// match thousands, if not millions, of websites.  Since some of them have to be shown, it is important for 
// the search engine to figure out which websites are worth displaying.  This is done with several heuristics, 
// one of which considers the count of external websites linking to the website in question, as well as their 
// importance.
// 
// An easy way to do this is to assign all websites an initial vote of 1.  If website A links to 
// website B, website A adds all its votes to website B.  As an example, consider websites A, 
// B and C.  They each have an initial vote of 1.  However, after careful evaluation you discover that both A and 
// B link to C.  Therefore, A and B each have 1 vote, and C has 3 votes.  Should a search query ever match all three 
// websites, website C will be displayed first.  The task is made more complex by websites often exchanging links.  This means that 
// if website A links to B, B may also link to A.  To prevent artificial inflation of website importance, all votes from website A to website B must not count toward B's votes if website B directly or indirectly links to A.
// 
// You are given a vector <string> votes and string website.  Each element of votes consists of a website name, followed by a single space, followed by a single space separated list of all the websites that link to it.  All website names contain only uppercase letters.  Count and return the 
// votes that website has, following the strategy outlined above.
// 
// 
// DEFINITION
// Class:WebsiteRank2
// Method:countVotes
// Parameters:vector <string>, string
// Returns:long long
// Method signature:long long countVotes(vector <string> votes, string website)
// 
// 
// CONSTRAINTS
// -votes will contain between 1 and 50 elements, inclusive.
// -Each element of votes will contain between 1 and 50 characters, inclusive.
// -Each element of votes will contain only uppercase letters ('A'-'Z') and spaces (' ').
// -Each element of votes will contain no leading or trailing spaces, and no consecutive spaces.
// -website will contain between 1 and 50 characters, inclusive.
// -website will contain only uppercase letters ('A'-'Z').
// -website will be contained in votes either as a linking website or a website that is linked to.
// -A website will never directly link back to itself.
// -All elements of votes will start with different website names.
// -Each element of votes will have a distinct first website name.  Within a single element of votes no website name will be repeated.
// 
// 
// EXAMPLES
// 
// 0)
// {"C A B"}
// "C"
// 
// Returns: 3
// 
// The example from the problem statement.
// 
// 
// 1)
// {"A B C D", "B C D", "C D"}
// "A"
// 
// Returns: 8
// 
// B has 4 votes, C has 2 votes, and D has 1 vote. Initially A has 1 vote, which changes to 8 after the strategy is applied.
// 
// 
// 2)
// {"A"}
// "A"
// 
// Returns: 1
// 
// Unfortunately, no websites currently link to A.
// 
// 
// 3)
// {"A B", "B A"}
// "A"
// 
// Returns: 1
// 
// B's votes to A and A's votes to B are ignored, leaving just one vote for each.
// 
// 
// 4)
// {"A B C D E F", "B A", "C B", "D B"}
// "A"
// 
// Returns: 3
// 
// Not only does A directly link to B, but also indirectly to C and D.  This leaves just 3 votes for A.
// 
// 
// 5)
// {"MYSITE OTHERSITE ANOTHERSITE THIRDSITE"}
// "MYSITE"
// 
// Returns: 4
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

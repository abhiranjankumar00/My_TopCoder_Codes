#include <bits/stdc++.h>
using namespace std;

class WhiteHats
{
public:
	int whiteNumber(vector <int> count);
};

int WhiteHats::whiteNumber (vector <int> count) 
{
	if(*max_element(count.begin(), count.end()) - *min_element(count.begin(), count.end())>=2)
		return -1;
	for(int i = 0; i < count.size(); ++i) {
		if(count[i] >= count.size())
			return -1;
	}
	int ret= accumulate(count.begin(), count.end(), 0)%(count.size()-1)==0?accumulate(count.begin(), count.end(), 0)/(count.size()-1):-1;
	if(ret == -1)
		return ret;
	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	WhiteHats *obj;
	int answer;
	obj = new WhiteHats();
	clock_t startTime = clock();
	answer = obj->whiteNumber(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	int p1;
	
	{
	// ----- test 0 -----
	int t0[] = {2,1,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {2,2,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {0,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {1,1,1,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = -1;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {10,10};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = -1;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// There is a number of people in a room, and each of them wears a hat which is either black or white.
// Every person counts the number of other people wearing white hats. You are given a vector <int> count, the i-th element of which is the number counted by the i-th person. Return the total number of people wearing white hats, or -1 if count doesn't correspond to a valid situation.
// 
// 
// DEFINITION
// Class:WhiteHats
// Method:whiteNumber
// Parameters:vector <int>
// Returns:int
// Method signature:int whiteNumber(vector <int> count)
// 
// 
// CONSTRAINTS
// -count will contain between 2 and 50 elements, inclusive.
// -Each element of count will be between 0 and 50, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {2,1,1}
// 
// Returns: 2
// 
// The first person wears a black hat and sees two people wearing white hats.  Each person wearing a white hat sees only one other white hat in the room.
// 
// 1)
// {2,2,2}
// 
// Returns: 3
// 
// Everyone wears a white hat here.
// 
// 2)
// {0,0}
// 
// Returns: 0
// 
// Black hats only.
// 
// 3)
// {1,1,1,2}
// 
// Returns: -1
// 
// 
// 
// 4)
// {10,10}
// 
// Returns: -1
// 
// Now that's interesting.  There are only two people in the room, yet each of them counted 10 others.
// 
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

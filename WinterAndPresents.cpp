#include <bits/stdc++.h>
using namespace std;

class WinterAndPresents
{
public:
	long long getNumber(vector <int> apple, vector <int> orange);
};

long long WinterAndPresents::getNumber (vector <int> apple, vector <int> orange)
{
	long long ret = 0;
    int ca = 0, cb = 0, mn = 1e9;
    int n = apple.size();
    for(int i = 0; i < (int)n; ++i) {
        mn = min(mn, apple[i] + orange[i]);
        ca += apple[i];
        cb += orange[i];
    }
    for(auto it = (apple).begin(); it != (apple).end(); ++it) {
        printf("%2d ", *it);
    }
    cout << "\n";
    for(auto it = (orange).begin(); it != (orange).end(); ++it) {
        printf("%2d ", *it);
    }
    cout << "\n";
    cout << "mn = " << mn << "\n";
    cout << "ca = " << ca << "\n";
    cout << "cb = " << cb << "\n";
    for(int k = (int)1; k <= (int)mn; ++k) {
        printf("k = %2d, total = %2d, ", k, n*k);
        if(min(ca,cb) >= n*k) {
            ret += n*k+1;
            printf("[%2d, %2d], [%2d, %2d], ", 0, n*k, n*k, 0);
            printf("add = %2d\n", n*k+1);
        }
        else {
            int amin = 0, amax = min(ca, n*k);
            int bmin = n*k - amax;
            int bmax = min(n*k, cb);
            ret += bmax - bmin + 1;
            //printf("amin = %d, amax = %d\n", amin, amax);
//            printf("\nbmin = %d, bmax = %d\n", bmin, bmax);
            amin = max(0, n*k-bmax);
            amax = min(ca, n*k-bmin);
//            printf("amin = %d, amax = %d\n", amin, amax);
            printf("[%2d, %2d], [%2d, %2d], ", amin, bmax, amax, bmin);
            printf("add = %2d\n", bmax-bmin+1);
        }
    }
	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, bool hasAnswer, long long p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	WinterAndPresents *obj;
	long long answer;
	obj = new WinterAndPresents();
	clock_t startTime = clock();
	answer = obj->getNumber(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	vector <int> p0;
	vector <int> p1;
	long long p2;
	
	// ----- test 0 -----
	disabled = false;
	p0 = {1};
	p1 = {1};
	p2 = 3ll;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = {1,2,0,3};
	p1 = {4,5,0,6};
	p2 = 0ll;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = {2,2,2};
	p1 = {2,2,2};
	p2 = 16ll;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = {7,4,5};
	p1 = {1,10,2};
	p2 = 46ll;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// It's winter time!
// You need to prepare a Christmas gift for your friend.
// 
// 
// 
// 
// You have several bags arranged in a row.
// The bags only contain apples and oranges.
// You are given an vector <int> apple and an vector <int> orange.
// For each i, the i-th element of apple represents the number of apples in the i-th bag, and the i-th element of orange represents the number of oranges in the i-th bag.
// 
// 
// 
// 
// You will choose the gift using the following procedure:
// First, you will choose any positive integer X such that there are at least X pieces of fruit in each bag.
// Then, you will take exactly X pieces of fruit out of each bag, and combine all the fruit into one present.
// Return the number of different gifts that may be produced by following the given procedure.
// (Two gifts are considered different if they contain a different number of apples or a different number of oranges.)
// 
// 
// DEFINITION
// Class:WinterAndPresents
// Method:getNumber
// Parameters:vector <int>, vector <int>
// Returns:long long
// Method signature:long long getNumber(vector <int> apple, vector <int> orange)
// 
// 
// CONSTRAINTS
// -apple will contain between 1 and 50 elements, inclusive.
// -orange will contain between 1 and 50 elements, inclusive.
// -apple and orange will contain the same number of elements.
// -Each element of apple and orange will be between 0 and 1,000,000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {1}
// {1}
// 
// Returns: 3
// 
// Three different presents are possible in this case: 
// 
// 
// 0 apples and 1 orange
// 
// 
// 1 apple and 0 oranges
// 
// 
// 1 apple and 1 orange
// 
// 
// 
// 1)
// {1, 2, 0, 3}
// {4, 5, 0, 6}
// 
// Returns: 0
// 
// As there is an empty bag, there is no way to choose the present.
// 
// 2)
// {2, 2, 2}
// {2, 2, 2}
// 
// Returns: 16
// 
// 
// 
// 3)
// {7, 4, 5}
// {1, 10, 2}
// 
// Returns: 46
// 
// 
// 
// 4)
// {1000000}
// {1000000}
// 
// Returns: 1000002000000
// 
// 
// 
// END KAWIGIEDIT TESTING

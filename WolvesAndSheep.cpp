#include <bits/stdc++.h>
using namespace std;

class WolvesAndSheep
{
public:
	int getmin(vector <string> field);
};

void printBin(int val, int n) {
    for(int i = (int)0; i < (int)n; ++i) {
        printf("%d", ((val & (1<<i)) != 0 ? 1 : 0) );
    }
    cout << "\n";
}

int WolvesAndSheep::getmin (vector <string> grid)
{
    int N = grid.size(), M = grid.front().size();
	int ret = (N-1)*(M-1);
    int row[20];

    vector <int> rows;

    for(int p = 0; p < (1<<(N-1)); ++p) {
        int curAns = 0;
        memset(row, 0, sizeof(row));
        rows.clear();
        //printBin(p, N);

        for(int j = 0; j < N; ++j) if((p & (1<<j)) != 0) {
            curAns++;
            row[j] = 1;         // row[j] | row[j+1]
            rows.push_back(j);
        }

        bool valid = true;
        for(int j = 0; j < (int)M; ++j) {

            bool S = false, W = false;

            for(int i = 0; i < (int)N; ++i) {

                if(grid[i][j] == 'W')
                    W = true;
                else if(grid[i][j] == 'S')
                    S = true;

                if(W && S) {
                    valid = false;
                    break;
                }

                if(row[i])
                    S = W = false;
            }
        }
        if(!valid)
            continue;

        /*
         *rows.push_back(N-1);
         *bool S = false, W = 0;
         *for(int j = 0; j < (int)M; ++j) {
         *    for(int i = 0; i < (int)rows.size(); ++i) {
         *        for(int k = (i == 0 ? 0 : rows[i-1]+1); k <= (i+1 == rows.size() ? N-1 : rows[i+1]); k++){
         *        }
         *    }
         *}
         */

        rows.push_back(N-1);
        int lstIdx = 0;
        for(int d = 0; d < (int)rows.size()-1; ++d) {
            bool S = false, W = false;
            int nextIdx = -1;

            for(int j = lstIdx; j < M; j++) {
                for(int i = (d == 0 ? 0 : rows[d-1]+1); i <= rows[d]; i++) {
                    assert(i >= 0 && i < N);
                    assert(j >= 0 );
                    assert(j < M );
                    if(grid[i][j] == 'S') {
                        S = true;
                    }
                    else if(grid[i][j] == 'W') {
                        W = true;
                    }

                    if(S && W) {
                        if(nextIdx == -1)
                            nextIdx = j;
                        else if(j < nextIdx)
                            nextIdx = j;
                        break;
                    }
                }
            }

            if(nextIdx == -1)
                nextIdx = M;
            lstIdx = nextIdx;
            curAns++;
        }
        ret = min(ret, curAns);
    }

	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	WolvesAndSheep *obj;
	int answer;
	obj = new WolvesAndSheep();
	clock_t startTime = clock();
	answer = obj->getmin(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	vector <string> p0;
	int p1;
	
	// ----- test 0 -----
	disabled = false;
	p0 = {"W.WSS","WW.S.",".SSS.","SSS.S",".SS.S"};
	p1 = 2;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = {".....",".....","....."};
	p1 = 0;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = {".SS","...","S..","W.W"};
	p1 = 1;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = {"WWWSWWSSWWW","WWSWW.SSWWW","WS.WSWWWWS."};
	p1 = 10;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = {".W.S.W.W","W.W.S.W.",".S.S.W.W","S.S.S.W.",".S.W.W.S","S.S.W.W.",".W.W.W.S","W.W.S.S."};
	p1 = 7;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 5 -----
	disabled = false;
	p0 = {"W.SSWWSSSW.SS",".SSSSW.SSWWWW",".WWWWS.WSSWWS","SS.WSS..W.WWS","WSSS.SSWS.W.S","WSS.WS...WWWS","S.WW.S.SWWWSW","WSSSS.SSW...S","S.WWSW.WWSWSW",".WSSS.WWSWWWS","..SSSS.WWWSSS","SSWSWWS.W.SSW","S.WSWS..WSSS.","WS....W..WSS."};
	p1 = 24;
	all_right = (disabled || KawigiEdit_RunTest(5, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 6 -----
	disabled = false;
	p0 = {"WW..SS","WW..SS","......","......","SS..WW","SS..WW"};
	p1 = 2;
	all_right = (disabled || KawigiEdit_RunTest(6, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Farmer John has a huge rectangular pasture for his sheep.
// The pasture is divided into a grid of unit square cells.
// The sheep can travel freely between the cells.
// There is a wall around the pasture, so the sheep cannot leave it.
// One day, Farmer John found that wolves have infested the pasture through holes in the wall.
// Farmer John has fixed those holes, but the damage has been done: there are now some wolves in the pasture.
// More precisely, some cells of the pasture contain sheep, some contain wolves and some are empty.
// There are no cells that contain both sheep and wolves, and Farmer John would like to keep it that way.
// To make sure that the wolves cannot reach his sheep, Farmer John is going to build some fences.
// Each new fence has to be placed either between two rows or between two columns of cells.
// Each fence will start at one end of the pasture and reach all the way to the other end.
// Neither sheep nor wolves can cross the fences.
// The new fences must be placed in such a way that none of the wolves will be able to reach a sheep.
// You are given a vector <string> field.
// For each i and j, character j of element i of field represents the cell in row i, column j of the grid.
// (All indices in the previous sentence are 0-based.)
// Each character in field will be one of 'S' (a cell with sheep), 'W' (a cell with wolves), and '.' (an empty cell).
// Return the smallest number of new fences needed to separate the wolves from the sheep.
// 
// DEFINITION
// Class:WolvesAndSheep
// Method:getmin
// Parameters:vector <string>
// Returns:int
// Method signature:int getmin(vector <string> field)
// 
// 
// CONSTRAINTS
// -field will contain between 1 and 16 elements, inclusive.
// -Each element of field will contain between 1 and 16 characters, inclusive.
// -Each element of field will contain the same number of characters.
// -Each character of each element of field will be 'S', 'W' or '.'.
// 
// 
// EXAMPLES
// 
// 0)
// {"W.WSS",
//  "WW.S.",
//  ".SSS.",
//  "SSS.S",
//  ".SS.S"}
// 
// Returns: 2
// 
// The optimal solution is to build two fences: one between rows 1 and 2, the other between columns 2 and 3.
// (All those indices are 0-based.)
// This will divide the pasture into four smaller rectangles.
// One of those rectangles (the 2 by 3 rectangle in the top left corner) will contain only wolves, the other three will contain only sheep.
// 
// 1)
// {".....",
//  ".....",
//  "....."}
// 
// Returns: 0
// 
// There are no animals, thus we need no fences.
// 
// 2)
// {".SS",
//  "...",
//  "S..",
//  "W.W"}
// 
// Returns: 1
// 
// 
// 
// 3)
// {"WWWSWWSSWWW",
//  "WWSWW.SSWWW",
//  "WS.WSWWWWS."}
// 
// Returns: 10
// 
// 
// 
// 4)
// {".W.S.W.W",
//  "W.W.S.W.",
//  ".S.S.W.W",
//  "S.S.S.W.",
//  ".S.W.W.S",
//  "S.S.W.W.",
//  ".W.W.W.S",
//  "W.W.S.S."}
// 
// Returns: 7
// 
// 
// 
// 5)
// {"W.SSWWSSSW.SS",
//  ".SSSSW.SSWWWW",
//  ".WWWWS.WSSWWS",
//  "SS.WSS..W.WWS",
//  "WSSS.SSWS.W.S",
//  "WSS.WS...WWWS",
//  "S.WW.S.SWWWSW",
//  "WSSSS.SSW...S",
//  "S.WWSW.WWSWSW",
//  ".WSSS.WWSWWWS",
//  "..SSSS.WWWSSS",
//  "SSWSWWS.W.SSW",
//  "S.WSWS..WSSS.",
//  "WS....W..WSS."}
// 
// Returns: 24
// 
// 
// 
// 6)
// {"WW..SS",
//  "WW..SS",
//  "......",
//  "......",
//  "SS..WW",
//  "SS..WW"}
// 
// Returns: 2
// 
// 
// 
// END KAWIGIEDIT TESTING

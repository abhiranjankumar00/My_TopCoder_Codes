import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class WordAbbreviation
{
	public String[] getAbbreviations(String[] words)
	{
		boolean flag = false;

		while(flag == false) {
		}	
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String[] p0, boolean hasAnswer, String[] p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p0[i] + "\"");
		}
		System.out.print("}");
		System.out.println("]");
		WordAbbreviation obj;
		String[] answer;
		obj = new WordAbbreviation();
		long startTime = System.currentTimeMillis();
		answer = obj.getAbbreviations(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.print("\t" + "{");
			for (int i = 0; p1.length > i; ++i) {
				if (i > 0) {
					System.out.print(",");
				}
				System.out.print("\"" + p1[i] + "\"");
			}
			System.out.println("}");
		}
		System.out.println("Your answer:");
		System.out.print("\t" + "{");
		for (int i = 0; answer.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + answer[i] + "\"");
		}
		System.out.println("}");
		if (hasAnswer) {
			if (answer.length != p1.length) {
				res = false;
			} else {
				for (int i = 0; answer.length > i; ++i) {
					if (!answer[i].equals(p1[i])) {
						res = false;
					}
				}
			}
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String[] p0;
		String[] p1;
		
		// ----- test 0 -----
		p0 = new String[]{"abc","def","ghi"};
		p1 = new String[]{"a","d","g"};
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new String[]{"aaab","aaac","aaad"};
		p1 = new String[]{"aaab","aaac","aaad"};
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new String[]{"top","coder","contest"};
		p1 = new String[]{"t","cod","con"};
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new String[]{"bababaaaaa","baaabaababa","bbabaaabbaaabbabaabaabbbbbaabb","aaababababbbbababbbaabaaaaaaaabbabbbaaab","baaaaabaababbbaabbbabbababbbabbbbbbbbab"};
		p1 = new String[]{"bab","baaab","bb","a","baaaa"};
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new String[]{"oneword"};
		p1 = new String[]{"o"};
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// You are given a String[] words, each element of which is a single word.  Return a String[] where the i-th element is the abbrevation for the i-th word.  The abbreviation for a word is its shortest non-empty prefix that is not a prefix of any other given word.  The constraints will guarantee that it is possible to find an abbreviation for all the given words.
	// 
	// DEFINITION
	// Class:WordAbbreviation
	// Method:getAbbreviations
	// Parameters:String[]
	// Returns:String[]
	// Method signature:String[] getAbbreviations(String[] words)
	// 
	// 
	// NOTES
	// -A string s1 is called a prefix of string s2 if and only if s1 can be obtained by removing zero or more characters from the end of s2.
	// 
	// 
	// CONSTRAINTS
	// -words will contain between 1 and 50 elements, inclusive.
	// -Each element of words will contain between 1 and 50 characters, inclusive.
	// -Each element of words will only contain lowercase letters ('a'-'z').
	// -No element of words will be a prefix of another element of words.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// {"abc","def","ghi"}
	// 
	// Returns: {"a", "d", "g" }
	// 
	// A single character is enough.
	// 
	// 1)
	// {"aaab","aaac","aaad"}
	// 
	// Returns: {"aaab", "aaac", "aaad" }
	// 
	// It's possible that the abbreviation is the same as the original word.
	// 
	// 2)
	// {"top","coder","contest"}
	// 
	// Returns: {"t", "cod", "con" }
	// 
	// 
	// 
	// 3)
	// {
	//  "bababaaaaa",
	//  "baaabaababa",
	//  "bbabaaabbaaabbabaabaabbbbbaabb",
	//  "aaababababbbbababbbaabaaaaaaaabbabbbaaab",
	//  "baaaaabaababbbaabbbabbababbbabbbbbbbbab"
	// }
	// 
	// Returns: {"bab", "baaab", "bb", "a", "baaaa" }
	// 
	// 
	// 
	// 4)
	// {"oneword"}
	// 
	// Returns: {"o" }
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

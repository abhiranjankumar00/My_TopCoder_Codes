#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef string ST;
typedef stringstream SS;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef vector <string> vs;

#define endl 		("\n")
#define DEBUG(x)	cout << #x << " = " << x << "\n"
#define Pf		printf
#define	Sf		scanf

#define	ep		1e-9
#define PI		M_PI
#define E 		M_E

#define	CL(a, b)	memset(a, b, sizeof(a))
#define	mp		make_pair
#define	pb		push_back

#define	all(c)		(c).begin(), (c).end()
#define	tr(i, c)	for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())		//vector & list//

#define forn(i, n)	for(int i = 0, loop_ends_here = (int)n; i < loop_ends_here ; i++)
#define forab(i, a, b)	for(int i = a, loop_ends_here = (int)b; i <= loop_ends_here; i++)
#define rep(i, a, b)	for(int i = a, loop_ends_here = (int)b; i >= loop_ends_here; i--)

#define read(n)		scanf("%d", &n)
#define write(n)	printf("%d ", n)
#define writeln(n)	printf("%d\n", n)

class XorBoard
{
public:
	int count(int H, int W, int Rcount, int Ccount, int S);
};

const int64 mod = 555555555LL;
const int sz = (int)(2*1.6e3);

int Comb[sz+11][sz+11];

int XorBoard::count (int H, int W, int Rcount, int Ccount, int S) 
{
	forab(i, 0, sz)		forab(j, 0, i) 
		Comb[i][j] = (j == 0 || i == j) ? 1 : (Comb[i-1][j] + Comb[i-1][j-1])%mod;
	int64 ret = 0;

	forab(r, 0, min(Rcount, H))		if(r % 2 == Rcount % 2)
		forab(c, 0, min(Ccount, W))		if(c % 2 == Ccount % 2)
			if(r*W + c*H - 2*r*c == S) {
				int64 tmp;
				int left = (Rcount - r)/2;
				tmp = 1ll*Comb[H][r] * Comb[H + left - 1][left];
				tmp %= mod;

				left = (Ccount - c)/2;
				tmp *= (1ll*Comb[W][c] * Comb[W+left-1][left])%mod;
				tmp %= mod;

				ret = (ret + tmp) % mod;
			}
	ret = (ret + mod) % mod;	
	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, int p4, bool hasAnswer, int p5) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3 << "," << p4;
	cout << "]" << endl;
	XorBoard *obj;
	int answer;
	obj = new XorBoard();
	clock_t startTime = clock();
	answer = obj->count(p0, p1, p2, p3, p4);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p5 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p5;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	int p3;
	int p4;
	int p5;
	
	{
	// ----- test 0 -----
	p0 = 2;
	p1 = 2;
	p2 = 2;
	p3 = 2;
	p4 = 4;
	p5 = 4;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 2;
	p1 = 2;
	p2 = 0;
	p3 = 0;
	p4 = 1;
	p5 = 0;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 10;
	p1 = 20;
	p2 = 50;
	p3 = 40;
	p4 = 200;
	p5 = 333759825;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 1200;
	p1 = 1000;
	p2 = 800;
	p3 = 600;
	p4 = 4000;
	p5 = 96859710;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 555;
	p1 = 555;
	p2 = 555;
	p3 = 555;
	p4 = 5550;
	p5 = 549361755;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 1200;
	p1 = 1000;
	p2 = 800;
	p3 = 600;
	p4 = 4000;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, p4, false, p5) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Fox Jiro has a rectangular grid with H rows and W columns (i.e., the grid has H*W cells in total). Initially, each cell in the grid contained the character '0'.
// 
// A row flip is an operation in which Jiro picks a row of the grid, and in that row he changes all '0's to '1's and vice versa.
// Similarly, a column flip is an operation in which Jiro does the same to a column of the grid.
// Jiro took the grid that contained '0's everywhere.
// He performed a row flip Rcount times, and then a column flip Ccount times.
// (It is possible that Jiro flipped the same row or column multiple times.)
// At the end, Jiro noticed that there are exactly S '1's in the grid.
// 
// You are given the ints H, W, Rcount, Ccount, and S.
// We are interested in the number of different ways in which Jiro could have flipped the rows and columns of the grid.
// Two ways of flipping are considered different if there is a row or a column that was flipped a different number of times.
// (That is, the order in which the rows and columns are flipped does not matter.)
// Return the number of different ways of flipping that match the given situation, modulo 555,555,555.
// 
// 
// DEFINITION
// Class:XorBoard
// Method:count
// Parameters:int, int, int, int, int
// Returns:int
// Method signature:int count(int H, int W, int Rcount, int Ccount, int S)
// 
// 
// CONSTRAINTS
// -H will be between 1 and 1,555, inclusive.
// -W will be between 1 and 1,555, inclusive.
// -Rcount will be between 0 and 1,555, inclusive.
// -Ccount will be between 0 and 1,555, inclusive.
// -S will be between 0 and H*W, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 2
// 2
// 2
// 2
// 4
// 
// Returns: 4
// 
// In two of the four ways, Jiro flips each row once, and then the same column twice.
// In the other two ways he first flips the same row twice, and then each column once.
// 
// 1)
// 2
// 2
// 0
// 0
// 1
// 
// Returns: 0
// 
// Without any flips, all cells still contain '0's, so S=1 is impossible.
// 
// 2)
// 10
// 20
// 50
// 40
// 200
// 
// Returns: 333759825
// 
// Rcount and Ccount may be greater than H and W.
// 
// 3)
// 1200
// 1000
// 800
// 600
// 4000
// 
// Returns: 96859710
// 
// 
// 
// 4)
// 555
// 555
// 555
// 555
// 5550
// 
// Returns: 549361755
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

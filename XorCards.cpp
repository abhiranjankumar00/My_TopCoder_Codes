#include <bits/stdc++.h>
using namespace std;

class XorCards
{
public:
	long long numberOfWays(vector<long long> number, long long limit);
};

long long XorCards::numberOfWays (vector<long long> number, long long limit) 
{
	long long ret;
	
	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector<long long> p0, long long p1, bool hasAnswer, long long p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	XorCards *obj;
	long long answer;
	obj = new XorCards();
	clock_t startTime = clock();
	answer = obj->numberOfWays(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector<long long> p0;
	long long p1;
	long long p2;
	
	{
	// ----- test 0 -----
	long long t0[] = {1ll,2ll};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2ll;
	p2 = 3ll;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	long long t0[] = {5ll,5ll};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3ll;
	p2 = 2ll;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	long long t0[] = {1ll,2ll,3ll,4ll,5ll,6ll,7ll};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 5ll;
	p2 = 96ll;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	long long t0[] = {123ll,456ll,789ll,147ll,258ll,369ll,159ll,357ll};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 500ll;
	p2 = 125ll;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	long long t0[] = {0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1000000000000000ll;
	p2 = 4294967296ll;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	long long t0[] = {1000000000000000ll,999999999999999ll};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 65535ll;
	p2 = 2ll;
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// You have a set of cards.
// There is one non-negative integer on each card.
// Different cards may contain the same integer.
// For each i, the number written on the i-th card (0-based index) is number[i].
// Your friend wants to select a subset of those cards such that the bitwise xor of the selected cards is less than or equal to limit.
// 
// 
// 
// You are given the vector<long long> number and the long long limit.
// Count the number of ways in which your friend can select the subset of cards.
// Two subsets count as different if they differ as sets of cards (even if the corresponding sets of numbers are the same, see Example 4).
// 
// DEFINITION
// Class:XorCards
// Method:numberOfWays
// Parameters:vector<long long>, long long
// Returns:long long
// Method signature:long long numberOfWays(vector<long long> number, long long limit)
// 
// 
// NOTES
// -XOR (exclusive or) is a binary operation, performed on two numbers in binary notation. First, the shorter number is prepended with leading zeroes until both numbers have the same number of digits (in binary). Then, the result is calculated as follows: for each bit where the numbers differ the result has 1 in its binary representation. It has 0 in all other positions.
// -For example 42 XOR 7 is performed as follows. First, the numbers are converted to binary: 42 is 101010 and 7 is 111. Then the shorter number is prepended with leading zeros until both numbers have the same number of digits. This means 7 becomes 000111. Then 101010 XOR 000111 = 101101 (the result has ones only in the positions where the two numbers differ). Then the result can be converted back to decimal notation. In this case 101101 = 45, so 42 XOR 7 = 45.
// -If your friend decides to select zero cards, the bitwise xor of numbers on selected cards is zero.
// -If your friend decides to select a single card, the bitwise xor of numbers on selected cards is the number on the selected card.
// 
// 
// CONSTRAINTS
// -number will contain between 1 and 50 elements, inclusive.
// -Each element in number will be between 0 and 1,000,000,000,000,000 (10^15), inclusive.
// -limit will be between 0 and 1,000,000,000,000,000 (10^15), inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {1,2}
// 2
// 
// Returns: 3
// 
// This set of cards has four possible subsets.
// Here they are, along with the corresponding bitwise xors:
// {} => 0, {1} => 1, {2} => 2, and {1,2} => 3.
// Note that limit=2.
// Out of these four subsets, for the first three the bitwise xor of selected numbers is at most equal to limit.
// 
// 1)
// {5,5}
// 3
// 
// Returns: 2
// 
// The two good subsets are {} and {5,5}.
// 
// 2)
// {1,2,3,4,5,6,7}
// 5
// 
// Returns: 96
// 
// 
// 
// 3)
// {123, 456, 789, 147, 258, 369, 159, 357}
// 500
// 
// Returns: 125
// 
// 
// 
// 4)
// {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
// 1000000000000000
// 
// Returns: 4294967296
// 
// 
// 
// 5)
// {1000000000000000, 999999999999999}
// 65535
// 
// Returns: 2
// 
// 
// 
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

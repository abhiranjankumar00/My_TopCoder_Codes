#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
#include <cstring>
using namespace std;

typedef long long  int64;
typedef vector<int> vi;
typedef string ST;
typedef stringstream SS;
typedef vector< vector <int> > vvi;
typedef pair<int,int> ii;
typedef vector <string> vs;

#define Pf	printf
#define	Sf	scanf

#define	ep	1e-9
#define PI M_PI
#define E M_E

#define	CL(a, b)	memset(a, b, sizeof(a))
#define	mp	make_pair

#define	pb	push_back
#define	SZ(a)	int((a).size())

#define	all(c)	(c).begin(), (c).end()
#define	tr(i, c)	for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define	present(x, c)	((c).find(x) != (c).end())		//map & set//
#define	cpresent(x, c)	(find(all(c),x) != (c).end())	//vector & list//

#define	forn(i, n)	for(int i = 0; i < n; i++)
#define	forab(i, a, b)	for(int i = a; i <= b; i++)
#define	rep(i, a, b)	for(int i = a; i>=b; i--)

#define mod 1000000009

struct range {
	int s, f;
	range(int l, int r) {
		s = l, 		f = r;
	}
};

void insert(int idx, int s, int f, vector <vector<range> > &r) {
//	cout << "#1";

	tr(it, r[idx]) {
		if( (s >= it->s && it->s <= f) || (f >= it->s && f <= it->f ))
		{
			r[idx].pb(range(min(s, it->s), max(f, it->f)));
			r[idx].erase(it);
			Pf("Inserting (%d, %d)\n", min(s, it->s), max(f, it->f));
//			cout << " #2"<< endl;
			return;
		}
	}

	r[idx].pb(range(s, f));
	Pf("Inserting (%d, %d)\n", s, f);
//	cout << " #2\n";
	return;
}

class YetAnotherIncredibleMachine
{
public:
	int countWays(vector <int> pf, vector <int> len, vector <int> balls)
	{
//		cout << "#a\n";
		int64 ret = 1;
//		r.clear();
//		r.resize(pf.size());
		vector < vector <range> > r(pf.size());
//		cout << "#aa\n";

//		cout << "#b\n";
		forn(i, pf.size()) {
			forn(j, balls.size()) {
				if(balls[j] <= pf[i] && balls[j] >= pf[i] - len[i] + 1) {
					insert(i, max(pf[i]-len[i]+1, balls[j]-len[i]-1), balls[j], r);
				}
			}
		}

//		cout << "#c\n";
		forn(i, pf.size()) {
			tr(it, r[i])
				Pf("(%d, %d)  ", it->s, it->f);
			cout << endl;
		}

		forn(i, pf.size()) {
			int64 tmpans= len[i];
			
			tr(it, r[i])
				tmpans -= (it->f - it->s );

			if(i==0)
				ret = tmpans;
			else
				ret = (ret * tmpans)%mod;
		}
		
//		cout << "#d\n";
		return ret;
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, vector <int> p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}";
	cout << "]" << endl;
	YetAnotherIncredibleMachine *obj;
	int answer;
	obj = new YetAnotherIncredibleMachine();
	clock_t startTime = clock();
	answer = obj->countWays(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <int> p1;
	vector <int> p2;
	int p3;
	
	{
	// ----- test 0 -----
	int t0[] = {7};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {10};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {3,4};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 3;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// You may remember an old computer game called "The Incredible Machine". It was a game where you could simulate simple processes like balls falling, lasers shooting, or cats pursuing mice.
// Manao is faced with the following problem in this game.
// 
// The game is 2-dimensional. To make solving the problem easier, Manao introduced the cartesian coordinates on the screen. The OX axis goes from left to right and coincides with the ground. The OY axis goes from bottom to top.
// 
// There are N horizontal platforms mounted at different heights. The length of the i-th platform is platformLength[i] and it is mounted at point (platformMount[i], i + 1). Each platform can be moved horizontally in such a way that it does not disconnect from its mount, i.e., the mount resides between its ends or on one of them. In other words, the leftmost possible position of the i-th platform is when its left end is at (platformMount[i] - platformLength[i], i + 1) and the rightmost position is when its right end is at (platformMount[i] + platformLength[i], i + 1). The platforms may only be moved by integer distances, so both left and right ends of a platform are always located at points with integer coordinates.
// 
// Several balls will simultaneously fall downwards to the ground from a height that is above all platforms. All balls will fall vertically and the i-th of them will fall at X-coordinate balls[i]. The balls are very small and can be considered as points. Manao should set the platforms' placement in such a way that no ball falls on a platform. Falling on an end of a platform counts as falling on a platform. Manao is not allowed to move the platforms once the balls start falling.
// 
// Count the number of ways to place the platforms so that all of the balls miss them. Return this number modulo 1,000,000,009. Two placements are different if there's a platform that has different positions in these placements.
// 
// DEFINITION
// Class:YetAnotherIncredibleMachine
// Method:countWays
// Parameters:vector <int>, vector <int>, vector <int>
// Returns:int
// Method signature:int countWays(vector <int> platformMount, vector <int> platformLength, vector <int> balls)
// 
// 
// CONSTRAINTS
// -platformMount will contain between 1 and 50 elements, inclusive.
// -Each element of platformMount will be between -10000 and 10000, inclusive.
// -platformLength will contain the same number of elements as platformMount.
// -Each element of platformLength will be between 1 and 10000, inclusive.
// -balls will contain between 1 and 50 elements, inclusive.
// -Each element of balls will be between -10000 and 10000, inclusive.
// -All elements of balls will be distinct.
// 
// 
// EXAMPLES
// 
// 0)
// {7}
// {10}
// {3,4}
// 
// Returns: 3
// 
// A platform of length 10 is mounted at point (7, 1). Two balls will fall at coordinates 3 and 4. There are three placements of the platform which let the ball miss it: setting the platform's left end at X-coordinate 5, 6 and 7.
// 
// 1)
// {1,4}
// {3,3}
// {2,7}
// 
// Returns: 1
// 
// The only placement which ensures that balls land aside the platforms is when platform 0's right end is at point (1, 1) and platform 1's left end is at (3, 2).
// 
// 2)
// {4,4,4}
// {10,9,8}
// {1,100}
// 
// Returns: 27
// 
// There are 3 possible placements for each of the platforms.
// 
// 3)
// {0}
// {1}
// {0}
// 
// Returns: 0
// 
// There is no way to move the platform away from the ball's trajectory.
// 
// 4)
// {100, -4215, 251}
// {400, 10000, 2121}
// {5000, 2270, 8512, 6122}
// 
// Returns: 250379170
// 
// 
// 
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

#include <bits/stdc++.h>
using namespace std;

class ZigZag
{
	vector<int> s;
	map<pair<int, int>, int> memo;
	int N;

	int zigZag(int idx, int diff) {
		auto it = memo.find({idx, diff});
		if(it != memo.end())
			return it->second;
		int ret = 1;
		for(int i = 0; i < idx; i++) {
			int prevVal = 0;
			if(diff == 1 && s[i] < s[idx])
				prevVal = zigZag(i, -diff);
			else if(diff == -1 && s[i] > s[idx])
				prevVal = zigZag(i, -diff);

			ret = max(prevVal+1, ret);
		}
		printf("idx = %d, diff = %d, ret = %d\n", idx, diff, ret);
		memo[{idx, diff}] = ret;
		return ret;
	}
public:
    int longestZigZag(vector <int> sequence)
    {
		this->s = sequence;
		this->N = this->s.size();
		this->memo.clear();

        int ret = max(zigZag(this->N-1, 1), zigZag(this->N-1, -1));
        return ret;
    }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	ZigZag *obj;
	int answer;
	obj = new ZigZag();
	clock_t startTime = clock();
	answer = obj->longestZigZag(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	vector <int> p0;
	int p1;
	
	// ----- test 0 -----
	disabled = false;
	p0 = {1,7,4,9,2,5};
	p1 = 6;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = {1,17,5,10,13,15,10,5,16,8};
	p1 = 7;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = {44};
	p1 = 1;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = {1,2,3,4,5,6,7,8,9};
	p1 = 2;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = {70,55,13,2,99,2,80,80,80,80,100,19,7,5,5,5,1000,32,32};
	p1 = 8;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 5 -----
	disabled = false;
	p0 = {374,40,854,203,203,156,362,279,812,955,600,947,978,46,100,953,670,862,568,188,67,669,810,704,52,861,49,640,370,908,477,245,413,109,659,401,483,308,609,120,249,22,176,279,23,22,617,462,459,244};
	p1 = 36;
	all_right = (disabled || KawigiEdit_RunTest(5, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 6 -----
	disabled = false;
	p0 = {2,3};
	p1 = 2;
	all_right = (disabled || KawigiEdit_RunTest(6, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// A sequence of numbers is called a zig-zag sequence if the differences
// between successive numbers strictly alternate between positive and negative.  The
// first difference (if one exists) may be either positive or negative.  A sequence with
// fewer than two elements is trivially a zig-zag sequence.
// 
// 
// 
// For example, 1,7,4,9,2,5 is a zig-zag sequence because the differences
// (6,-3,5,-7,3) are alternately positive and negative.  In contrast, 1,4,7,2,5
// and 1,7,4,5,5 are not zig-zag sequences, the first because its first two differences are positive and
// the second because its last difference is zero.
// 
// 
// 
// Given a sequence of integers, sequence, return the length of the longest subsequence of sequence that is
// a zig-zag sequence.  A subsequence is obtained by deleting some number of
// elements (possibly zero) from the original sequence, leaving the remaining elements in their original order.
// 
// 
// 
// DEFINITION
// Class:ZigZag
// Method:longestZigZag
// Parameters:vector <int>
// Returns:int
// Method signature:int longestZigZag(vector <int> sequence)
// 
// 
// CONSTRAINTS
// -sequence contains between 1 and 50 elements, inclusive.
// -Each element of sequence is between 1 and 1000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// { 1, 7, 4, 9, 2, 5 }
// 
// Returns: 6
// 
// The entire sequence is a zig-zag sequence.
// 
// 1)
// { 1, 17, 5, 10, 13, 15, 10, 5, 16, 8 }
// 
// Returns: 7
// 
// There are several subsequences that achieve this length.  One is 1,17,10,13,10,16,8.
// 
// 2)
// { 44 }
// 
// Returns: 1
// 
// 3)
// { 1, 2, 3, 4, 5, 6, 7, 8, 9 }
// 
// Returns: 2
// 
// 4)
// { 70, 55, 13, 2, 99, 2, 80, 80, 80, 80, 100, 19, 7, 5, 5, 5, 1000, 32, 32 }
// 
// Returns: 8
// 
// 5)
// { 374, 40, 854, 203, 203, 156, 362, 279, 812, 955, 
// 600, 947, 978, 46, 100, 953, 670, 862, 568, 188, 
// 67, 669, 810, 704, 52, 861, 49, 640, 370, 908, 
// 477, 245, 413, 109, 659, 401, 483, 308, 609, 120, 
// 249, 22, 176, 279, 23, 22, 617, 462, 459, 244 }
// 
// 
// Returns: 36
// 
// END KAWIGIEDIT TESTING

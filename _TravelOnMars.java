import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class TravelOnMars
{
	public int minTimes(int[] range, int startCity, int endCity)
	{
		
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int p1, int p2, boolean hasAnswer, int p3) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}" + "," + p1 + "," + p2);
		System.out.println("]");
		TravelOnMars obj;
		int answer;
		obj = new TravelOnMars();
		long startTime = System.currentTimeMillis();
		answer = obj.minTimes(p0, p1, p2);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p3);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p3;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int[] p0;
		int p1;
		int p2;
		int p3;
		
		// ----- test 0 -----
		p0 = new int[]{2,1,1,1,1,1};
		p1 = 1;
		p2 = 4;
		p3 = 2;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new int[]{2,1,1,1,1,1};
		p1 = 4;
		p2 = 1;
		p3 = 3;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new int[]{2,1,1,2,1,2,1,1};
		p1 = 2;
		p2 = 6;
		p3 = 3;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new int[]{3,2,1,1,3,1,2,2,1,1,2,2,2,2,3};
		p1 = 6;
		p2 = 13;
		p3 = 4;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// Bob recently went to Mars.
	// 
	// There are N cities on Mars. The cities all lie on a circular railroad and they are numbered 0 through N-1 along the railroad. More precisely, there is a railroad segment that connects cities N-1 and 0, and for each i (0 <= i <= N-2) there is a railroad segment that connects cities i and i+1. Trains travel along the railroad in both directions.
	// 
	// You are given a int[] range with N elements. For each i: the set of cities that are reachable from city i by a direct train is precisely the set of cities that are within the distance range[i] of city i. (The distance between two cities is the smallest number of railroad segments one needs to travel in order to get from one city to the other. For example, if N=17 and range[2]=3, the cities directly reachable from city 2 are the cities {16,0,1,2,3,4,5}.)
	// 
	// You are also given ints startCity and endCity. Bob starts his tour in the city startCity and wants to end it in the city endCity. Calculate and return the minimum number of succesive direct trains he needs to take.
	// 
	// DEFINITION
	// Class:TravelOnMars
	// Method:minTimes
	// Parameters:int[], int, int
	// Returns:int
	// Method signature:int minTimes(int[] range, int startCity, int endCity)
	// 
	// 
	// CONSTRAINTS
	// -range will contain N elements, where N is between 2 and 50, inclusive.
	// -Each element of range will be between 1 and 50, inclusive.
	// -startCity will be between 0 and N-1, inclusive.
	// -endCity will be between 0 and N-1, inclusive.
	// -startCity and endCity will be different.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// {2,1,1,1,1,1}
	// 1
	// 4
	// 
	// Returns: 2
	// 
	// Bob wants to get from city 1 to city 4.
	// The optimal solution is to travel from city 1 to city 0, and then (as range[0]=2) from city 0 to city 4.
	// 
	// 1)
	// {2,1,1,1,1,1}
	// 4
	// 1
	// 
	// Returns: 3
	// 
	// This is the same test case as Example 0, only startCity and endCity have been swapped. Note that the answer is now 3 instead of 2.
	// 
	// 2)
	// {2,1,1,2,1,2,1,1}
	// 2
	// 6
	// 
	// Returns: 3
	// 
	// Bob starts in city 2. There are two optimal routes: (2->3->5->6) and (2->1->0->6).
	// 
	// 3)
	// {3,2,1,1,3,1,2,2,1,1,2,2,2,2,3}
	// 6
	// 13
	// 
	// Returns: 4
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
